/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(37);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _root = __webpack_require__(184);
	
	var _root2 = _interopRequireDefault(_root);
	
	var _reactModal = __webpack_require__(320);
	
	var _reactModal2 = _interopRequireDefault(_reactModal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	document.addEventListener("DOMContentLoaded", function () {
	  var root = document.getElementById('root');
	  _reactModal2.default.setAppElement(document.body);
	  _reactDom2.default.render(_react2.default.createElement(_root2.default, null), root);
	});

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactBaseClasses = __webpack_require__(5);
	var ReactChildren = __webpack_require__(14);
	var ReactDOMFactories = __webpack_require__(22);
	var ReactElement = __webpack_require__(16);
	var ReactPropTypes = __webpack_require__(28);
	var ReactVersion = __webpack_require__(33);
	
	var createReactClass = __webpack_require__(34);
	var onlyChild = __webpack_require__(36);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  var lowPriorityWarning = __webpack_require__(13);
	  var canDefineProperty = __webpack_require__(10);
	  var ReactElementValidator = __webpack_require__(23);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var __spread = _assign;
	var createMixin = function (mixin) {
	  return mixin;
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  var warnedForSpread = false;
	  var warnedForCreateMixin = false;
	  __spread = function () {
	    lowPriorityWarning(warnedForSpread, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.');
	    warnedForSpread = true;
	    return _assign.apply(null, arguments);
	  };
	
	  createMixin = function (mixin) {
	    lowPriorityWarning(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. ' + 'In React v16.0, it will be removed. ' + 'You can use this mixin directly instead. ' + 'See https://fb.me/createmixin-was-never-implemented for more info.');
	    warnedForCreateMixin = true;
	    return mixin;
	  };
	}
	
	var React = {
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactBaseClasses.Component,
	  PureComponent: ReactBaseClasses.PureComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: createReactClass,
	  createFactory: createFactory,
	  createMixin: createMixin,
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  var warnedForCreateClass = false;
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        lowPriorityWarning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated,' + ' and will be removed in  React v16.0.' + ' Use the latest available v15.* prop-types package from npm instead.' + ' For info on usage, compatibility, migration and more, see ' + 'https://fb.me/prop-types-docs');
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	
	    Object.defineProperty(React, 'createClass', {
	      get: function () {
	        lowPriorityWarning(warnedForCreateClass, 'Accessing createClass via the main React package is deprecated,' + ' and will be removed in React v16.0.' + " Use a plain JavaScript class instead. If you're not yet " + 'ready to migrate, create-react-class v15.* is available ' + 'on npm as a temporary, drop-in replacement. ' + 'For more info see https://fb.me/react-create-class');
	        warnedForCreateClass = true;
	        return createReactClass;
	      }
	    });
	  }
	
	  // React.DOM factories are deprecated. Wrap these methods so that
	  // invocations of the React.DOM namespace and alert users to switch
	  // to the `react-dom-factories` package.
	  React.DOM = {};
	  var warnedForFactories = false;
	  Object.keys(ReactDOMFactories).forEach(function (factory) {
	    React.DOM[factory] = function () {
	      if (!warnedForFactories) {
	        lowPriorityWarning(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in v16.0+. Use the ' + 'react-dom-factories package instead. ' + ' Version 1.0 provides a drop-in replacement.' + ' For more info, see https://fb.me/react-dom-factories', factory);
	        warnedForFactories = true;
	      }
	      return ReactDOMFactories[factory].apply(ReactDOMFactories, arguments);
	    };
	  });
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6),
	    _assign = __webpack_require__(4);
	
	var ReactNoopUpdateQueue = __webpack_require__(7);
	
	var canDefineProperty = __webpack_require__(10);
	var emptyObject = __webpack_require__(11);
	var invariant = __webpack_require__(12);
	var lowPriorityWarning = __webpack_require__(13);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          lowPriorityWarning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;
	
	module.exports = {
	  Component: ReactComponent,
	  PureComponent: ReactPureComponent
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var warning = __webpack_require__(8);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(9);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	
	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }
	
	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var lowPriorityWarning = function () {};
	
	if (process.env.NODE_ENV !== 'production') {
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	
	  lowPriorityWarning = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }
	
	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}
	
	module.exports = lowPriorityWarning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(15);
	var ReactElement = __webpack_require__(16);
	
	var emptyFunction = __webpack_require__(9);
	var traverseAllChildren = __webpack_require__(19);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;
	
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactCurrentOwner = __webpack_require__(17);
	
	var warning = __webpack_require__(8);
	var canDefineProperty = __webpack_require__(10);
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	var REACT_ELEMENT_TYPE = __webpack_require__(18);
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	var specialPropKeyWarningShown, specialPropRefWarningShown;
	
	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}
	
	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}
	
	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}
	
	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}
	
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }
	
	  return element;
	};
	
	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = _assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }
	
	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	};
	
	module.exports = ReactCurrentOwner;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactCurrentOwner = __webpack_require__(17);
	var REACT_ELEMENT_TYPE = __webpack_require__(18);
	
	var getIteratorFn = __webpack_require__(20);
	var invariant = __webpack_require__(12);
	var KeyEscapeUtils = __webpack_require__(21);
	var warning = __webpack_require__(8);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 20 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(16);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(23);
	  createDOMFactory = ReactElementValidator.createFactory;
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),
	
	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactComponentTreeHook = __webpack_require__(24);
	var ReactElement = __webpack_require__(16);
	
	var checkReactTypeSpec = __webpack_require__(25);
	
	var canDefineProperty = __webpack_require__(10);
	var getIteratorFn = __webpack_require__(20);
	var warning = __webpack_require__(8);
	var lowPriorityWarning = __webpack_require__(13);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();
	
	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
	
	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}
	
	var ReactElementValidator = {
	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }
	
	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }
	
	        info += ReactComponentTreeHook.getCurrentStackAddendum();
	
	        var currentSource = props !== null && props !== undefined && props.__source !== undefined ? props.__source : null;
	        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	        ReactComponentTreeHook.popNonStandardWarningStack();
	      }
	    }
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            lowPriorityWarning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactCurrentOwner = __webpack_require__(17);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty
	  // Strip regex characters so we can use it for regex
	  ).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&'
	  // Remove hasOwnProperty from the template to make it generic
	  ).replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}
	
	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);
	
	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;
	
	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();
	
	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };
	
	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};
	
	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };
	
	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };
	
	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}
	
	var unmountedIDs = [];
	
	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;
	
	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}
	
	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}
	
	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}
	
	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}
	
	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;
	
	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }
	
	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }
	
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },
	
	
	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs,
	
	  pushNonStandardWarningStack: function (isCreatingElement, currentSource) {
	    if (typeof console.reactStack !== 'function') {
	      return;
	    }
	
	    var stack = [];
	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;
	
	    try {
	      if (isCreatingElement) {
	        stack.push({
	          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
	          fileName: currentSource ? currentSource.fileName : null,
	          lineNumber: currentSource ? currentSource.lineNumber : null
	        });
	      }
	
	      while (id) {
	        var element = ReactComponentTreeHook.getElement(id);
	        var parentID = ReactComponentTreeHook.getParentID(id);
	        var ownerID = ReactComponentTreeHook.getOwnerID(id);
	        var ownerName = ownerID ? ReactComponentTreeHook.getDisplayName(ownerID) : null;
	        var source = element && element._source;
	        stack.push({
	          name: ownerName,
	          fileName: source ? source.fileName : null,
	          lineNumber: source ? source.lineNumber : null
	        });
	        id = parentID;
	      }
	    } catch (err) {
	      // Internal state is messed up.
	      // Stop building the stack (it's just a nice to have).
	    }
	
	    console.reactStack(stack);
	  },
	  popNonStandardWarningStack: function () {
	    if (typeof console.reactStackEnd !== 'function') {
	      return;
	    }
	    console.reactStackEnd();
	  }
	};
	
	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactPropTypeLocationNames = __webpack_require__(26);
	var ReactPropTypesSecret = __webpack_require__(27);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(24);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(24);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 27 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _require = __webpack_require__(16),
	    isValidElement = _require.isValidElement;
	
	var factory = __webpack_require__(29);
	
	module.exports = factory(isValidElement);

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(30);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var assign = __webpack_require__(4);
	
	var ReactPropTypesSecret = __webpack_require__(31);
	var checkPropTypes = __webpack_require__(32);
	
	var printWarning = function() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	
	function emptyFunctionThatReturnsNull() {
	  return null;
	}
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }
	
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var printWarning = function() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = __webpack_require__(31);
	  var loggedTypeFailures = {};
	
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          )
	
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 33 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.6.2';

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _require = __webpack_require__(5),
	    Component = _require.Component;
	
	var _require2 = __webpack_require__(16),
	    isValidElement = _require2.isValidElement;
	
	var ReactNoopUpdateQueue = __webpack_require__(7);
	var factory = __webpack_require__(35);
	
	module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var emptyObject = __webpack_require__(11);
	var _invariant = __webpack_require__(12);
	
	if (process.env.NODE_ENV !== 'production') {
	  var warning = __webpack_require__(8);
	}
	
	var MIXINS_KEY = 'mixins';
	
	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}
	
	var ReactPropTypeLocationNames;
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	} else {
	  ReactPropTypeLocationNames = {};
	}
	
	function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {
	  /**
	   * Policies that describe methods in `ReactClassInterface`.
	   */
	
	  var injectedMixins = [];
	
	  /**
	   * Composite components are higher-level components that compose other composite
	   * or host components.
	   *
	   * To create a new type of `ReactClass`, pass a specification of
	   * your new class to `React.createClass`. The only requirement of your class
	   * specification is that you implement a `render` method.
	   *
	   *   var MyComponent = React.createClass({
	   *     render: function() {
	   *       return <div>Hello World</div>;
	   *     }
	   *   });
	   *
	   * The class specification supports a specific protocol of methods that have
	   * special meaning (e.g. `render`). See `ReactClassInterface` for
	   * more the comprehensive protocol. Any other properties and methods in the
	   * class specification will be available on the prototype.
	   *
	   * @interface ReactClassInterface
	   * @internal
	   */
	  var ReactClassInterface = {
	    /**
	     * An array of Mixin objects to include when defining your component.
	     *
	     * @type {array}
	     * @optional
	     */
	    mixins: 'DEFINE_MANY',
	
	    /**
	     * An object containing properties and methods that should be defined on
	     * the component's constructor instead of its prototype (static methods).
	     *
	     * @type {object}
	     * @optional
	     */
	    statics: 'DEFINE_MANY',
	
	    /**
	     * Definition of prop types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    propTypes: 'DEFINE_MANY',
	
	    /**
	     * Definition of context types for this component.
	     *
	     * @type {object}
	     * @optional
	     */
	    contextTypes: 'DEFINE_MANY',
	
	    /**
	     * Definition of context types this component sets for its children.
	     *
	     * @type {object}
	     * @optional
	     */
	    childContextTypes: 'DEFINE_MANY',
	
	    // ==== Definition methods ====
	
	    /**
	     * Invoked when the component is mounted. Values in the mapping will be set on
	     * `this.props` if that prop is not specified (i.e. using an `in` check).
	     *
	     * This method is invoked before `getInitialState` and therefore cannot rely
	     * on `this.state` or use `this.setState`.
	     *
	     * @return {object}
	     * @optional
	     */
	    getDefaultProps: 'DEFINE_MANY_MERGED',
	
	    /**
	     * Invoked once before the component is mounted. The return value will be used
	     * as the initial value of `this.state`.
	     *
	     *   getInitialState: function() {
	     *     return {
	     *       isOn: false,
	     *       fooBaz: new BazFoo()
	     *     }
	     *   }
	     *
	     * @return {object}
	     * @optional
	     */
	    getInitialState: 'DEFINE_MANY_MERGED',
	
	    /**
	     * @return {object}
	     * @optional
	     */
	    getChildContext: 'DEFINE_MANY_MERGED',
	
	    /**
	     * Uses props from `this.props` and state from `this.state` to render the
	     * structure of the component.
	     *
	     * No guarantees are made about when or how often this method is invoked, so
	     * it must not have side effects.
	     *
	     *   render: function() {
	     *     var name = this.props.name;
	     *     return <div>Hello, {name}!</div>;
	     *   }
	     *
	     * @return {ReactComponent}
	     * @required
	     */
	    render: 'DEFINE_ONCE',
	
	    // ==== Delegate methods ====
	
	    /**
	     * Invoked when the component is initially created and about to be mounted.
	     * This may have side effects, but any external subscriptions or data created
	     * by this method must be cleaned up in `componentWillUnmount`.
	     *
	     * @optional
	     */
	    componentWillMount: 'DEFINE_MANY',
	
	    /**
	     * Invoked when the component has been mounted and has a DOM representation.
	     * However, there is no guarantee that the DOM node is in the document.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been mounted (initialized and rendered) for the first time.
	     *
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidMount: 'DEFINE_MANY',
	
	    /**
	     * Invoked before the component receives new props.
	     *
	     * Use this as an opportunity to react to a prop transition by updating the
	     * state using `this.setState`. Current props are accessed via `this.props`.
	     *
	     *   componentWillReceiveProps: function(nextProps, nextContext) {
	     *     this.setState({
	     *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	     *     });
	     *   }
	     *
	     * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	     * transition may cause a state change, but the opposite is not true. If you
	     * need it, you are probably looking for `componentWillUpdate`.
	     *
	     * @param {object} nextProps
	     * @optional
	     */
	    componentWillReceiveProps: 'DEFINE_MANY',
	
	    /**
	     * Invoked while deciding if the component should be updated as a result of
	     * receiving new props, state and/or context.
	     *
	     * Use this as an opportunity to `return false` when you're certain that the
	     * transition to the new props/state/context will not require a component
	     * update.
	     *
	     *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	     *     return !equal(nextProps, this.props) ||
	     *       !equal(nextState, this.state) ||
	     *       !equal(nextContext, this.context);
	     *   }
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @return {boolean} True if the component should update.
	     * @optional
	     */
	    shouldComponentUpdate: 'DEFINE_ONCE',
	
	    /**
	     * Invoked when the component is about to update due to a transition from
	     * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	     * and `nextContext`.
	     *
	     * Use this as an opportunity to perform preparation before an update occurs.
	     *
	     * NOTE: You **cannot** use `this.setState()` in this method.
	     *
	     * @param {object} nextProps
	     * @param {?object} nextState
	     * @param {?object} nextContext
	     * @param {ReactReconcileTransaction} transaction
	     * @optional
	     */
	    componentWillUpdate: 'DEFINE_MANY',
	
	    /**
	     * Invoked when the component's DOM representation has been updated.
	     *
	     * Use this as an opportunity to operate on the DOM when the component has
	     * been updated.
	     *
	     * @param {object} prevProps
	     * @param {?object} prevState
	     * @param {?object} prevContext
	     * @param {DOMElement} rootNode DOM element representing the component.
	     * @optional
	     */
	    componentDidUpdate: 'DEFINE_MANY',
	
	    /**
	     * Invoked when the component is about to be removed from its parent and have
	     * its DOM representation destroyed.
	     *
	     * Use this as an opportunity to deallocate any external resources.
	     *
	     * NOTE: There is no `componentDidUnmount` since your component will have been
	     * destroyed by that point.
	     *
	     * @optional
	     */
	    componentWillUnmount: 'DEFINE_MANY',
	
	    /**
	     * Replacement for (deprecated) `componentWillMount`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillMount: 'DEFINE_MANY',
	
	    /**
	     * Replacement for (deprecated) `componentWillReceiveProps`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillReceiveProps: 'DEFINE_MANY',
	
	    /**
	     * Replacement for (deprecated) `componentWillUpdate`.
	     *
	     * @optional
	     */
	    UNSAFE_componentWillUpdate: 'DEFINE_MANY',
	
	    // ==== Advanced methods ====
	
	    /**
	     * Updates the component's currently mounted DOM representation.
	     *
	     * By default, this implements React's rendering and reconciliation algorithm.
	     * Sophisticated clients may wish to override this.
	     *
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     * @overridable
	     */
	    updateComponent: 'OVERRIDE_BASE'
	  };
	
	  /**
	   * Similar to ReactClassInterface but for static methods.
	   */
	  var ReactClassStaticInterface = {
	    /**
	     * This method is invoked after a component is instantiated and when it
	     * receives new props. Return an object to update state in response to
	     * prop changes. Return null to indicate no change to state.
	     *
	     * If an object is returned, its keys will be merged into the existing state.
	     *
	     * @return {object || null}
	     * @optional
	     */
	    getDerivedStateFromProps: 'DEFINE_MANY_MERGED'
	  };
	
	  /**
	   * Mapping from class specification keys to special processing functions.
	   *
	   * Although these are declared like instance properties in the specification
	   * when defining classes using `React.createClass`, they are actually static
	   * and are accessible on the constructor instead of the prototype. Despite
	   * being static, they must be defined outside of the "statics" key under
	   * which all other static methods are defined.
	   */
	  var RESERVED_SPEC_KEYS = {
	    displayName: function(Constructor, displayName) {
	      Constructor.displayName = displayName;
	    },
	    mixins: function(Constructor, mixins) {
	      if (mixins) {
	        for (var i = 0; i < mixins.length; i++) {
	          mixSpecIntoComponent(Constructor, mixins[i]);
	        }
	      }
	    },
	    childContextTypes: function(Constructor, childContextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, childContextTypes, 'childContext');
	      }
	      Constructor.childContextTypes = _assign(
	        {},
	        Constructor.childContextTypes,
	        childContextTypes
	      );
	    },
	    contextTypes: function(Constructor, contextTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, contextTypes, 'context');
	      }
	      Constructor.contextTypes = _assign(
	        {},
	        Constructor.contextTypes,
	        contextTypes
	      );
	    },
	    /**
	     * Special case getDefaultProps which should move into statics but requires
	     * automatic merging.
	     */
	    getDefaultProps: function(Constructor, getDefaultProps) {
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps = createMergedResultFunction(
	          Constructor.getDefaultProps,
	          getDefaultProps
	        );
	      } else {
	        Constructor.getDefaultProps = getDefaultProps;
	      }
	    },
	    propTypes: function(Constructor, propTypes) {
	      if (process.env.NODE_ENV !== 'production') {
	        validateTypeDef(Constructor, propTypes, 'prop');
	      }
	      Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	    },
	    statics: function(Constructor, statics) {
	      mixStaticSpecIntoComponent(Constructor, statics);
	    },
	    autobind: function() {}
	  };
	
	  function validateTypeDef(Constructor, typeDef, location) {
	    for (var propName in typeDef) {
	      if (typeDef.hasOwnProperty(propName)) {
	        // use a warning instead of an _invariant so components
	        // don't show up in prod but only in __DEV__
	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            typeof typeDef[propName] === 'function',
	            '%s: %s type `%s` is invalid; it must be a function, usually from ' +
	              'React.PropTypes.',
	            Constructor.displayName || 'ReactClass',
	            ReactPropTypeLocationNames[location],
	            propName
	          );
	        }
	      }
	    }
	  }
	
	  function validateMethodOverride(isAlreadyDefined, name) {
	    var specPolicy = ReactClassInterface.hasOwnProperty(name)
	      ? ReactClassInterface[name]
	      : null;
	
	    // Disallow overriding of base class methods unless explicitly allowed.
	    if (ReactClassMixin.hasOwnProperty(name)) {
	      _invariant(
	        specPolicy === 'OVERRIDE_BASE',
	        'ReactClassInterface: You are attempting to override ' +
	          '`%s` from your class specification. Ensure that your method names ' +
	          'do not overlap with React methods.',
	        name
	      );
	    }
	
	    // Disallow defining methods more than once unless explicitly allowed.
	    if (isAlreadyDefined) {
	      _invariant(
	        specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED',
	        'ReactClassInterface: You are attempting to define ' +
	          '`%s` on your component more than once. This conflict may be due ' +
	          'to a mixin.',
	        name
	      );
	    }
	  }
	
	  /**
	   * Mixin helper which handles policy validation and reserved
	   * specification keys when building React classes.
	   */
	  function mixSpecIntoComponent(Constructor, spec) {
	    if (!spec) {
	      if (process.env.NODE_ENV !== 'production') {
	        var typeofSpec = typeof spec;
	        var isMixinValid = typeofSpec === 'object' && spec !== null;
	
	        if (process.env.NODE_ENV !== 'production') {
	          warning(
	            isMixinValid,
	            "%s: You're attempting to include a mixin that is either null " +
	              'or not an object. Check the mixins included by the component, ' +
	              'as well as any mixins they include themselves. ' +
	              'Expected object but got %s.',
	            Constructor.displayName || 'ReactClass',
	            spec === null ? null : typeofSpec
	          );
	        }
	      }
	
	      return;
	    }
	
	    _invariant(
	      typeof spec !== 'function',
	      "ReactClass: You're attempting to " +
	        'use a component class or function as a mixin. Instead, just use a ' +
	        'regular object.'
	    );
	    _invariant(
	      !isValidElement(spec),
	      "ReactClass: You're attempting to " +
	        'use a component as a mixin. Instead, just use a regular object.'
	    );
	
	    var proto = Constructor.prototype;
	    var autoBindPairs = proto.__reactAutoBindPairs;
	
	    // By handling mixins before any other properties, we ensure the same
	    // chaining order is applied to methods with DEFINE_MANY policy, whether
	    // mixins are listed before or after these methods in the spec.
	    if (spec.hasOwnProperty(MIXINS_KEY)) {
	      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	    }
	
	    for (var name in spec) {
	      if (!spec.hasOwnProperty(name)) {
	        continue;
	      }
	
	      if (name === MIXINS_KEY) {
	        // We have already handled mixins in a special case above.
	        continue;
	      }
	
	      var property = spec[name];
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      validateMethodOverride(isAlreadyDefined, name);
	
	      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	        RESERVED_SPEC_KEYS[name](Constructor, property);
	      } else {
	        // Setup methods on prototype:
	        // The following member methods should not be automatically bound:
	        // 1. Expected ReactClass methods (in the "interface").
	        // 2. Overridden methods (that were mixed in).
	        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	        var isFunction = typeof property === 'function';
	        var shouldAutoBind =
	          isFunction &&
	          !isReactClassMethod &&
	          !isAlreadyDefined &&
	          spec.autobind !== false;
	
	        if (shouldAutoBind) {
	          autoBindPairs.push(name, property);
	          proto[name] = property;
	        } else {
	          if (isAlreadyDefined) {
	            var specPolicy = ReactClassInterface[name];
	
	            // These cases should already be caught by validateMethodOverride.
	            _invariant(
	              isReactClassMethod &&
	                (specPolicy === 'DEFINE_MANY_MERGED' ||
	                  specPolicy === 'DEFINE_MANY'),
	              'ReactClass: Unexpected spec policy %s for key %s ' +
	                'when mixing in component specs.',
	              specPolicy,
	              name
	            );
	
	            // For methods which are defined more than once, call the existing
	            // methods before calling the new property, merging if appropriate.
	            if (specPolicy === 'DEFINE_MANY_MERGED') {
	              proto[name] = createMergedResultFunction(proto[name], property);
	            } else if (specPolicy === 'DEFINE_MANY') {
	              proto[name] = createChainedFunction(proto[name], property);
	            }
	          } else {
	            proto[name] = property;
	            if (process.env.NODE_ENV !== 'production') {
	              // Add verbose displayName to the function, which helps when looking
	              // at profiling tools.
	              if (typeof property === 'function' && spec.displayName) {
	                proto[name].displayName = spec.displayName + '_' + name;
	              }
	            }
	          }
	        }
	      }
	    }
	  }
	
	  function mixStaticSpecIntoComponent(Constructor, statics) {
	    if (!statics) {
	      return;
	    }
	
	    for (var name in statics) {
	      var property = statics[name];
	      if (!statics.hasOwnProperty(name)) {
	        continue;
	      }
	
	      var isReserved = name in RESERVED_SPEC_KEYS;
	      _invariant(
	        !isReserved,
	        'ReactClass: You are attempting to define a reserved ' +
	          'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
	          'as an instance property instead; it will still be accessible on the ' +
	          'constructor.',
	        name
	      );
	
	      var isAlreadyDefined = name in Constructor;
	      if (isAlreadyDefined) {
	        var specPolicy = ReactClassStaticInterface.hasOwnProperty(name)
	          ? ReactClassStaticInterface[name]
	          : null;
	
	        _invariant(
	          specPolicy === 'DEFINE_MANY_MERGED',
	          'ReactClass: You are attempting to define ' +
	            '`%s` on your component more than once. This conflict may be ' +
	            'due to a mixin.',
	          name
	        );
	
	        Constructor[name] = createMergedResultFunction(Constructor[name], property);
	
	        return;
	      }
	
	      Constructor[name] = property;
	    }
	  }
	
	  /**
	   * Merge two objects, but throw if both contain the same key.
	   *
	   * @param {object} one The first object, which is mutated.
	   * @param {object} two The second object
	   * @return {object} one after it has been mutated to contain everything in two.
	   */
	  function mergeIntoWithNoDuplicateKeys(one, two) {
	    _invariant(
	      one && two && typeof one === 'object' && typeof two === 'object',
	      'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
	    );
	
	    for (var key in two) {
	      if (two.hasOwnProperty(key)) {
	        _invariant(
	          one[key] === undefined,
	          'mergeIntoWithNoDuplicateKeys(): ' +
	            'Tried to merge two objects with the same key: `%s`. This conflict ' +
	            'may be due to a mixin; in particular, this may be caused by two ' +
	            'getInitialState() or getDefaultProps() methods returning objects ' +
	            'with clashing keys.',
	          key
	        );
	        one[key] = two[key];
	      }
	    }
	    return one;
	  }
	
	  /**
	   * Creates a function that invokes two functions and merges their return values.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createMergedResultFunction(one, two) {
	    return function mergedResult() {
	      var a = one.apply(this, arguments);
	      var b = two.apply(this, arguments);
	      if (a == null) {
	        return b;
	      } else if (b == null) {
	        return a;
	      }
	      var c = {};
	      mergeIntoWithNoDuplicateKeys(c, a);
	      mergeIntoWithNoDuplicateKeys(c, b);
	      return c;
	    };
	  }
	
	  /**
	   * Creates a function that invokes two functions and ignores their return vales.
	   *
	   * @param {function} one Function to invoke first.
	   * @param {function} two Function to invoke second.
	   * @return {function} Function that invokes the two argument functions.
	   * @private
	   */
	  function createChainedFunction(one, two) {
	    return function chainedFunction() {
	      one.apply(this, arguments);
	      two.apply(this, arguments);
	    };
	  }
	
	  /**
	   * Binds a method to the component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   * @param {function} method Method to be bound.
	   * @return {function} The bound method.
	   */
	  function bindAutoBindMethod(component, method) {
	    var boundMethod = method.bind(component);
	    if (process.env.NODE_ENV !== 'production') {
	      boundMethod.__reactBoundContext = component;
	      boundMethod.__reactBoundMethod = method;
	      boundMethod.__reactBoundArguments = null;
	      var componentName = component.constructor.displayName;
	      var _bind = boundMethod.bind;
	      boundMethod.bind = function(newThis) {
	        for (
	          var _len = arguments.length,
	            args = Array(_len > 1 ? _len - 1 : 0),
	            _key = 1;
	          _key < _len;
	          _key++
	        ) {
	          args[_key - 1] = arguments[_key];
	        }
	
	        // User is trying to bind() an autobound method; we effectively will
	        // ignore the value of "this" that the user is trying to use, so
	        // let's warn.
	        if (newThis !== component && newThis !== null) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): React component methods may only be bound to the ' +
	                'component instance. See %s',
	              componentName
	            );
	          }
	        } else if (!args.length) {
	          if (process.env.NODE_ENV !== 'production') {
	            warning(
	              false,
	              'bind(): You are binding a component method to the component. ' +
	                'React does this for you automatically in a high-performance ' +
	                'way, so you can safely remove this call. See %s',
	              componentName
	            );
	          }
	          return boundMethod;
	        }
	        var reboundMethod = _bind.apply(boundMethod, arguments);
	        reboundMethod.__reactBoundContext = component;
	        reboundMethod.__reactBoundMethod = method;
	        reboundMethod.__reactBoundArguments = args;
	        return reboundMethod;
	      };
	    }
	    return boundMethod;
	  }
	
	  /**
	   * Binds all auto-bound methods in a component.
	   *
	   * @param {object} component Component whose method is going to be bound.
	   */
	  function bindAutoBindMethods(component) {
	    var pairs = component.__reactAutoBindPairs;
	    for (var i = 0; i < pairs.length; i += 2) {
	      var autoBindKey = pairs[i];
	      var method = pairs[i + 1];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	
	  var IsMountedPreMixin = {
	    componentDidMount: function() {
	      this.__isMounted = true;
	    }
	  };
	
	  var IsMountedPostMixin = {
	    componentWillUnmount: function() {
	      this.__isMounted = false;
	    }
	  };
	
	  /**
	   * Add more to the ReactClass base class. These are all legacy features and
	   * therefore not already part of the modern ReactComponent.
	   */
	  var ReactClassMixin = {
	    /**
	     * TODO: This will be deprecated because state should always keep a consistent
	     * type signature and the only use case for this, is to avoid that.
	     */
	    replaceState: function(newState, callback) {
	      this.updater.enqueueReplaceState(this, newState, callback);
	    },
	
	    /**
	     * Checks whether or not this composite component is mounted.
	     * @return {boolean} True if mounted, false otherwise.
	     * @protected
	     * @final
	     */
	    isMounted: function() {
	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this.__didWarnIsMounted,
	          '%s: isMounted is deprecated. Instead, make sure to clean up ' +
	            'subscriptions and pending requests in componentWillUnmount to ' +
	            'prevent memory leaks.',
	          (this.constructor && this.constructor.displayName) ||
	            this.name ||
	            'Component'
	        );
	        this.__didWarnIsMounted = true;
	      }
	      return !!this.__isMounted;
	    }
	  };
	
	  var ReactClassComponent = function() {};
	  _assign(
	    ReactClassComponent.prototype,
	    ReactComponent.prototype,
	    ReactClassMixin
	  );
	
	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  function createClass(spec) {
	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function(props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        warning(
	          this instanceof Constructor,
	          'Something is calling a React component directly. Use a factory or ' +
	            'JSX instead. See: https://fb.me/react-legacyfactory'
	        );
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (
	          initialState === undefined &&
	          this.getInitialState._isMockFunction
	        ) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      _invariant(
	        typeof initialState === 'object' && !Array.isArray(initialState),
	        '%s.getInitialState(): must return an object or null',
	        Constructor.displayName || 'ReactCompositeComponent'
	      );
	
	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
	    mixSpecIntoComponent(Constructor, spec);
	    mixSpecIntoComponent(Constructor, IsMountedPostMixin);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    _invariant(
	      Constructor.prototype.render,
	      'createClass(...): Class specification must implement a `render` method.'
	    );
	
	    if (process.env.NODE_ENV !== 'production') {
	      warning(
	        !Constructor.prototype.componentShouldUpdate,
	        '%s has a method called ' +
	          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
	          'The name is phrased as a question because the function is ' +
	          'expected to return a value.',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.componentWillRecieveProps,
	        '%s has a method called ' +
	          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	      warning(
	        !Constructor.prototype.UNSAFE_componentWillRecieveProps,
	        '%s has a method called UNSAFE_componentWillRecieveProps(). ' +
	          'Did you mean UNSAFE_componentWillReceiveProps()?',
	        spec.displayName || 'A component'
	      );
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  }
	
	  return createClass;
	}
	
	module.exports = factory;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	'use strict';
	
	var _prodInvariant = __webpack_require__(6);
	
	var ReactElement = __webpack_require__(16);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(38);


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactDefaultInjection = __webpack_require__(43);
	var ReactMount = __webpack_require__(172);
	var ReactReconciler = __webpack_require__(64);
	var ReactUpdates = __webpack_require__(61);
	var ReactVersion = __webpack_require__(177);
	
	var findDOMNode = __webpack_require__(178);
	var getHostComponentFromComposite = __webpack_require__(179);
	var renderSubtreeIntoContainer = __webpack_require__(180);
	var warning = __webpack_require__(8);
	
	ReactDefaultInjection.inject();
	
	var ReactDOM = {
	  findDOMNode: findDOMNode,
	  render: ReactMount.render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	  /* eslint-enable camelcase */
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    ComponentTree: {
	      getClosestInstanceFromNode: ReactDOMComponentTree.getClosestInstanceFromNode,
	      getNodeFromInstance: function (inst) {
	        // inst is an internal instance (but could be a composite)
	        if (inst._renderedComponent) {
	          inst = getHostComponentFromComposite(inst);
	        }
	        if (inst) {
	          return ReactDOMComponentTree.getNodeFromInstance(inst);
	        } else {
	          return null;
	        }
	      }
	    },
	    Mount: ReactMount,
	    Reconciler: ReactReconciler
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(53);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        // Firefox does not have the issue with devtools loaded over file://
	        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 && navigator.userAgent.indexOf('Firefox') === -1;
	        console.debug('Download the React DevTools ' + (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') + 'for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    var testFunc = function testFn() {};
	    process.env.NODE_ENV !== 'production' ? warning((testFunc.name || testFunc.toString()).indexOf('testFn') !== -1, "It looks like you're using a minified copy of the development build " + 'of React. When deploying React apps to production, make sure to use ' + 'the production build which skips development warnings and is faster. ' + 'See https://fb.me/react-minification for more details.') : void 0;
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : void 0;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.trim];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'One or more ES5 shims expected by React are not available: ' + 'https://fb.me/react-warning-polyfills') : void 0;
	        break;
	      }
	    }
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactInstrumentation = __webpack_require__(67);
	  var ReactDOMUnknownPropertyHook = __webpack_require__(181);
	  var ReactDOMNullInputValuePropHook = __webpack_require__(182);
	  var ReactDOMInvalidARIAHook = __webpack_require__(183);
	
	  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
	  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
	}
	
	module.exports = ReactDOM;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var DOMProperty = __webpack_require__(41);
	var ReactDOMComponentFlags = __webpack_require__(42);
	
	var invariant = __webpack_require__(12);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var Flags = ReactDOMComponentFlags;
	
	var internalInstanceKey = '__reactInternalInstance$' + Math.random().toString(36).slice(2);
	
	/**
	 * Check if a given node should be cached.
	 */
	function shouldPrecacheNode(node, nodeID) {
	  return node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID) || node.nodeType === 8 && node.nodeValue === ' react-text: ' + nodeID + ' ' || node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ';
	}
	
	/**
	 * Drill down (through composites and empty components) until we get a host or
	 * host text component.
	 *
	 * This is pretty polymorphic but unavoidable with the current structure we have
	 * for `_renderedChildren`.
	 */
	function getRenderedHostOrTextFromComponent(component) {
	  var rendered;
	  while (rendered = component._renderedComponent) {
	    component = rendered;
	  }
	  return component;
	}
	
	/**
	 * Populate `_hostNode` on the rendered host/text component with the given
	 * DOM node. The passed `inst` can be a composite.
	 */
	function precacheNode(inst, node) {
	  var hostInst = getRenderedHostOrTextFromComponent(inst);
	  hostInst._hostNode = node;
	  node[internalInstanceKey] = hostInst;
	}
	
	function uncacheNode(inst) {
	  var node = inst._hostNode;
	  if (node) {
	    delete node[internalInstanceKey];
	    inst._hostNode = null;
	  }
	}
	
	/**
	 * Populate `_hostNode` on each child of `inst`, assuming that the children
	 * match up with the DOM (element) children of `node`.
	 *
	 * We cache entire levels at once to avoid an n^2 problem where we access the
	 * children of a node sequentially and have to walk from the start to our target
	 * node every time.
	 *
	 * Since we update `_renderedChildren` and the actual DOM at (slightly)
	 * different times, we could race here and see a newer `_renderedChildren` than
	 * the DOM nodes we see. To avoid this, ReactMultiChild calls
	 * `prepareToManageChildren` before we change `_renderedChildren`, at which
	 * time the container's child nodes are always cached (until it unmounts).
	 */
	function precacheChildNodes(inst, node) {
	  if (inst._flags & Flags.hasCachedChildNodes) {
	    return;
	  }
	  var children = inst._renderedChildren;
	  var childNode = node.firstChild;
	  outer: for (var name in children) {
	    if (!children.hasOwnProperty(name)) {
	      continue;
	    }
	    var childInst = children[name];
	    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
	    if (childID === 0) {
	      // We're currently unmounting this child in ReactMultiChild; skip it.
	      continue;
	    }
	    // We assume the child nodes are in the same order as the child instances.
	    for (; childNode !== null; childNode = childNode.nextSibling) {
	      if (shouldPrecacheNode(childNode, childID)) {
	        precacheNode(childInst, childNode);
	        continue outer;
	      }
	    }
	    // We reached the end of the DOM children without finding an ID match.
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unable to find element with ID %s.', childID) : _prodInvariant('32', childID) : void 0;
	  }
	  inst._flags |= Flags.hasCachedChildNodes;
	}
	
	/**
	 * Given a DOM node, return the closest ReactDOMComponent or
	 * ReactDOMTextComponent instance ancestor.
	 */
	function getClosestInstanceFromNode(node) {
	  if (node[internalInstanceKey]) {
	    return node[internalInstanceKey];
	  }
	
	  // Walk up the tree until we find an ancestor whose instance we have cached.
	  var parents = [];
	  while (!node[internalInstanceKey]) {
	    parents.push(node);
	    if (node.parentNode) {
	      node = node.parentNode;
	    } else {
	      // Top of the tree. This node must not be part of a React tree (or is
	      // unmounted, potentially).
	      return null;
	    }
	  }
	
	  var closest;
	  var inst;
	  for (; node && (inst = node[internalInstanceKey]); node = parents.pop()) {
	    closest = inst;
	    if (parents.length) {
	      precacheChildNodes(inst, node);
	    }
	  }
	
	  return closest;
	}
	
	/**
	 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
	 * instance, or null if the node was not rendered by this React.
	 */
	function getInstanceFromNode(node) {
	  var inst = getClosestInstanceFromNode(node);
	  if (inst != null && inst._hostNode === node) {
	    return inst;
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
	 * DOM node.
	 */
	function getNodeFromInstance(inst) {
	  // Without this first invariant, passing a non-DOM-component triggers the next
	  // invariant for a missing parent, which is super confusing.
	  !(inst._hostNode !== undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  if (inst._hostNode) {
	    return inst._hostNode;
	  }
	
	  // Walk up the tree until we find an ancestor whose DOM node we have cached.
	  var parents = [];
	  while (!inst._hostNode) {
	    parents.push(inst);
	    !inst._hostParent ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React DOM tree root should always have a node reference.') : _prodInvariant('34') : void 0;
	    inst = inst._hostParent;
	  }
	
	  // Now parents contains each ancestor that does *not* have a cached native
	  // node, and `inst` is the deepest ancestor that does.
	  for (; parents.length; inst = parents.pop()) {
	    precacheChildNodes(inst, inst._hostNode);
	  }
	
	  return inst._hostNode;
	}
	
	var ReactDOMComponentTree = {
	  getClosestInstanceFromNode: getClosestInstanceFromNode,
	  getInstanceFromNode: getInstanceFromNode,
	  getNodeFromInstance: getNodeFromInstance,
	  precacheChildNodes: precacheChildNodes,
	  precacheNode: precacheNode,
	  uncacheNode: uncacheNode
	};
	
	module.exports = ReactDOMComponentTree;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 40 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	'use strict';
	
	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */
	
	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;
	
	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;
	
	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }
	
	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';
	
	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
	
	  throw error;
	}
	
	module.exports = reactProdInvariant;

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_PROPERTY: 0x1,
	  HAS_BOOLEAN_VALUE: 0x4,
	  HAS_NUMERIC_VALUE: 0x8,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x10 | 0x8,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x20,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function (domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property \'%s\' which has already been injected. You may be accidentally injecting the same DOM property config twice, or you may be injecting two configs that have conflicting property names.', propName) : _prodInvariant('48', propName) : void 0;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or numeric value, but not a combination: %s', propName) : _prodInvariant('50', propName) : void 0;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	
	/* eslint-disable max-len */
	var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
	/* eslint-enable max-len */
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	  ROOT_ATTRIBUTE_NAME: 'data-reactroot',
	
	  ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
	  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   *
	   * autofocus is predefined, because adding it to the property whitelist
	   * causes unintended side effects.
	   *
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? { autofocus: 'autoFocus' } : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function (attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentFlags = {
	  hasCachedChildNodes: 1 << 0
	};
	
	module.exports = ReactDOMComponentFlags;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = __webpack_require__(44);
	var BeforeInputEventPlugin = __webpack_require__(45);
	var ChangeEventPlugin = __webpack_require__(60);
	var DefaultEventPluginOrder = __webpack_require__(78);
	var EnterLeaveEventPlugin = __webpack_require__(79);
	var HTMLDOMPropertyConfig = __webpack_require__(84);
	var ReactComponentBrowserEnvironment = __webpack_require__(85);
	var ReactDOMComponent = __webpack_require__(98);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactDOMEmptyComponent = __webpack_require__(143);
	var ReactDOMTreeTraversal = __webpack_require__(144);
	var ReactDOMTextComponent = __webpack_require__(145);
	var ReactDefaultBatchingStrategy = __webpack_require__(146);
	var ReactEventListener = __webpack_require__(147);
	var ReactInjection = __webpack_require__(150);
	var ReactReconcileTransaction = __webpack_require__(151);
	var SVGDOMPropertyConfig = __webpack_require__(159);
	var SelectEventPlugin = __webpack_require__(160);
	var SimpleEventPlugin = __webpack_require__(161);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginUtils.injectComponentTree(ReactDOMComponentTree);
	  ReactInjection.EventPluginUtils.injectTreeTraversal(ReactDOMTreeTraversal);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function (instantiate) {
	    return new ReactDOMEmptyComponent(instantiate);
	  });
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	}
	
	module.exports = {
	  inject: inject
	};

/***/ }),
/* 44 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ARIADOMPropertyConfig = {
	  Properties: {
	    // Global States and Properties
	    'aria-current': 0, // state
	    'aria-details': 0,
	    'aria-disabled': 0, // state
	    'aria-hidden': 0, // state
	    'aria-invalid': 0, // state
	    'aria-keyshortcuts': 0,
	    'aria-label': 0,
	    'aria-roledescription': 0,
	    // Widget Attributes
	    'aria-autocomplete': 0,
	    'aria-checked': 0,
	    'aria-expanded': 0,
	    'aria-haspopup': 0,
	    'aria-level': 0,
	    'aria-modal': 0,
	    'aria-multiline': 0,
	    'aria-multiselectable': 0,
	    'aria-orientation': 0,
	    'aria-placeholder': 0,
	    'aria-pressed': 0,
	    'aria-readonly': 0,
	    'aria-required': 0,
	    'aria-selected': 0,
	    'aria-sort': 0,
	    'aria-valuemax': 0,
	    'aria-valuemin': 0,
	    'aria-valuenow': 0,
	    'aria-valuetext': 0,
	    // Live Region Attributes
	    'aria-atomic': 0,
	    'aria-busy': 0,
	    'aria-live': 0,
	    'aria-relevant': 0,
	    // Drag-and-Drop Attributes
	    'aria-dropeffect': 0,
	    'aria-grabbed': 0,
	    // Relationship Attributes
	    'aria-activedescendant': 0,
	    'aria-colcount': 0,
	    'aria-colindex': 0,
	    'aria-colspan': 0,
	    'aria-controls': 0,
	    'aria-describedby': 0,
	    'aria-errormessage': 0,
	    'aria-flowto': 0,
	    'aria-labelledby': 0,
	    'aria-owns': 0,
	    'aria-posinset': 0,
	    'aria-rowcount': 0,
	    'aria-rowindex': 0,
	    'aria-rowspan': 0,
	    'aria-setsize': 0
	  },
	  DOMAttributeNames: {},
	  DOMPropertyNames: {}
	};
	
	module.exports = ARIADOMPropertyConfig;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(46);
	var ExecutionEnvironment = __webpack_require__(53);
	var FallbackCompositionState = __webpack_require__(54);
	var SyntheticCompositionEvent = __webpack_require__(57);
	var SyntheticInputEvent = __webpack_require__(59);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: 'onBeforeInput',
	      captured: 'onBeforeInputCapture'
	    },
	    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionEnd',
	      captured: 'onCompositionEndCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionStart',
	      captured: 'onCompositionStartCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: 'onCompositionUpdate',
	      captured: 'onCompositionUpdateCapture'
	    },
	    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case 'topCompositionStart':
	      return eventTypes.compositionStart;
	    case 'topCompositionEnd':
	      return eventTypes.compositionEnd;
	    case 'topCompositionUpdate':
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topKeyUp':
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case 'topKeyDown':
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case 'topKeyPress':
	    case 'topMouseDown':
	    case 'topBlur':
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if (typeof detail === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(nativeEventTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case 'topCompositionEnd':
	      return getDataFromCustomEvent(nativeEvent);
	    case 'topKeyPress':
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case 'topTextInput':
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  // If composition event is available, we extract a string only at
	  // compositionevent, otherwise extract it at fallback events.
	  if (currentComposition) {
	    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case 'topPaste':
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case 'topKeyPress':
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case 'topCompositionEnd':
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(47);
	var EventPluginUtils = __webpack_require__(49);
	
	var accumulateInto = __webpack_require__(51);
	var forEachAccumulated = __webpack_require__(52);
	var warning = __webpack_require__(8);
	
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(inst, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(inst, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(inst, phase, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(inst, 'Dispatching inst must not be null') : void 0;
	  }
	  var listener = listenerAtPhase(inst, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    var targetInst = event._targetInst;
	    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
	    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(inst, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(inst, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event._targetInst, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, from, to) {
	  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var EventPluginRegistry = __webpack_require__(48);
	var EventPluginUtils = __webpack_require__(49);
	var ReactErrorUtils = __webpack_require__(50);
	
	var accumulateInto = __webpack_require__(51);
	var forEachAccumulated = __webpack_require__(52);
	var invariant = __webpack_require__(12);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function (event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function (e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function (e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	var getDictionaryKey = function (inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	};
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	function shouldPreventMouseEvent(name, type, props) {
	  switch (name) {
	    case 'onClick':
	    case 'onClickCapture':
	    case 'onDoubleClick':
	    case 'onDoubleClickCapture':
	    case 'onMouseDown':
	    case 'onMouseDownCapture':
	    case 'onMouseMove':
	    case 'onMouseMoveCapture':
	    case 'onMouseUp':
	    case 'onMouseUpCapture':
	      return !!(props.disabled && isInteractive(type));
	    default:
	      return false;
	  }
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	  },
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {function} listener The callback to store.
	   */
	  putListener: function (inst, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : _prodInvariant('94', registrationName, typeof listener) : void 0;
	
	    var key = getDictionaryKey(inst);
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[key] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(inst, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function (inst, registrationName) {
	    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
	    // live here; needs to be moved to a better place soon
	    var bankForRegistrationName = listenerBank[registrationName];
	    if (shouldPreventMouseEvent(registrationName, inst._currentElement.type, inst._currentElement.props)) {
	      return null;
	    }
	    var key = getDictionaryKey(inst);
	    return bankForRegistrationName && bankForRegistrationName[key];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function (inst, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(inst, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      var key = getDictionaryKey(inst);
	      delete bankForRegistrationName[key];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {object} inst The instance, which is the source of events.
	   */
	  deleteAllListeners: function (inst) {
	    var key = getDictionaryKey(inst);
	    for (var registrationName in listenerBank) {
	      if (!listenerBank.hasOwnProperty(registrationName)) {
	        continue;
	      }
	
	      if (!listenerBank[registrationName][key]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(inst, registrationName);
	      }
	
	      delete listenerBank[registrationName][key];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function (events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function (simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : _prodInvariant('95') : void 0;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function () {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function () {
	    return listenerBank;
	  }
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var eventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!eventPluginOrder) {
	    // Wait until an `eventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var pluginModule = namesToPlugins[pluginName];
	    var pluginIndex = eventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : _prodInvariant('96', pluginName) : void 0;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !pluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : _prodInvariant('97', pluginName) : void 0;
	    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
	    var publishedEvents = pluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : _prodInvariant('98', eventName, pluginName) : void 0;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : _prodInvariant('99', eventName) : void 0;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, pluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : _prodInvariant('100', registrationName) : void 0;
	  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
	
	  if (process.env.NODE_ENV !== 'production') {
	    var lowerCasedName = registrationName.toLowerCase();
	    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;
	
	    if (registrationName === 'onDoubleClick') {
	      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
	    }
	  }
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Mapping from lowercase registration names to the properly cased version,
	   * used to warn in the case of missing event handlers. Available
	   * only in __DEV__.
	   * @type {Object}
	   */
	  possibleRegistrationNames: process.env.NODE_ENV !== 'production' ? {} : null,
	  // Trust the developer to only use possibleRegistrationNames in __DEV__
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function (injectedEventPluginOrder) {
	    !!eventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : _prodInvariant('101') : void 0;
	    // Clone the ordering so it cannot be dynamically mutated.
	    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function (injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var pluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : _prodInvariant('102', pluginName) : void 0;
	        namesToPlugins[pluginName] = pluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function (event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    if (dispatchConfig.phasedRegistrationNames !== undefined) {
	      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
	      // that it is not undefined.
	      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	
	      for (var phase in phasedRegistrationNames) {
	        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
	          continue;
	        }
	        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
	        if (pluginModule) {
	          return pluginModule;
	        }
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function () {
	    eventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
	      for (var lowerCasedName in possibleRegistrationNames) {
	        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
	          delete possibleRegistrationNames[lowerCasedName];
	        }
	      }
	    }
	  }
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactErrorUtils = __webpack_require__(50);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `ComponentTree`: [required] Module that can convert between React instances
	 *   and actual node references.
	 */
	var ComponentTree;
	var TreeTraversal;
	var injection = {
	  injectComponentTree: function (Injected) {
	    ComponentTree = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
	    }
	  },
	  injectTreeTraversal: function (Injected) {
	    TreeTraversal = Injected;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.') : void 0;
	    }
	  }
	};
	
	function isEndish(topLevelType) {
	  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
	}
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function (event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchInstances = event._dispatchInstances;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    var instancesIsArr = Array.isArray(dispatchInstances);
	    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : void 0;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {*} inst Internal component instance
	 */
	function executeDispatch(event, simulated, listener, inst) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
	  }
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchInstances = event._dispatchInstances;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and Instances are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchInstances[i])) {
	        return dispatchInstances[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchInstances)) {
	      return dispatchInstances;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchInstances = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchInstance = event._dispatchInstances;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : _prodInvariant('103') : void 0;
	  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
	  var res = dispatchListener ? dispatchListener(event) : null;
	  event.currentTarget = null;
	  event._dispatchListeners = null;
	  event._dispatchInstances = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getInstanceFromNode: function (node) {
	    return ComponentTree.getInstanceFromNode(node);
	  },
	  getNodeFromInstance: function (node) {
	    return ComponentTree.getNodeFromInstance(node);
	  },
	  isAncestor: function (a, b) {
	    return TreeTraversal.isAncestor(a, b);
	  },
	  getLowestCommonAncestor: function (a, b) {
	    return TreeTraversal.getLowestCommonAncestor(a, b);
	  },
	  getParentInstance: function (inst) {
	    return TreeTraversal.getParentInstance(inst);
	  },
	  traverseTwoPhase: function (target, fn, arg) {
	    return TreeTraversal.traverseTwoPhase(target, fn, arg);
	  },
	  traverseEnterLeave: function (from, to, fn, argFrom, argTo) {
	    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a) {
	  try {
	    func(a);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function () {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
	      var boundFunc = function () {
	        func(a);
	      };
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : _prodInvariant('30') : void 0;
	
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  if (Array.isArray(current)) {
	    if (Array.isArray(next)) {
	      current.push.apply(current, next);
	      return current;
	    }
	    current.push(next);
	    return current;
	  }
	
	  if (Array.isArray(next)) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	}
	
	module.exports = forEachAccumulated;

/***/ }),
/* 53 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(55);
	
	var getTextContentAccessor = __webpack_require__(56);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	_assign(FallbackCompositionState.prototype, {
	  destructor: function () {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function () {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function () {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(55);
	
	var emptyFunction = __webpack_require__(9);
	var warning = __webpack_require__(8);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	
	var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function (event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
	  if (process.env.NODE_ENV !== 'production') {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	_assign(SyntheticEvent.prototype, {
	  preventDefault: function () {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function () {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	      // eslint-disable-next-line valid-typeof
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function () {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function () {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (process.env.NODE_ENV !== 'production') {
	        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
	      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
	      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
	    }
	  }
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var E = function () {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  _assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = _assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	/** Proxying after everything set on SyntheticEvent
	  * to resolve Proxy issue on some WebKit browsers
	  * in which some Event properties are set to undefined (GH#10010)
	  */
	if (process.env.NODE_ENV !== 'production') {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function (target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function (constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function (target, prop, value) {
	            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
	              process.env.NODE_ENV !== 'production' ? warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.') : void 0;
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {object} SyntheticEvent
	  * @param {String} propName
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    process.env.NODE_ENV !== 'production' ? warning(warningCondition, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(47);
	var EventPropagators = __webpack_require__(46);
	var ExecutionEnvironment = __webpack_require__(53);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactUpdates = __webpack_require__(61);
	var SyntheticEvent = __webpack_require__(58);
	
	var inputValueTracking = __webpack_require__(74);
	var getEventTarget = __webpack_require__(75);
	var isEventSupported = __webpack_require__(76);
	var isTextInputElement = __webpack_require__(77);
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: 'onChange',
	      captured: 'onChangeCapture'
	    },
	    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']
	  }
	};
	
	function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, inst, nativeEvent, target);
	  event.type = 'change';
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementInst = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!document.documentMode || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent));
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementInst = null;
	}
	
	function getInstIfValueChanged(targetInst, nativeEvent) {
	  var updated = inputValueTracking.updateValueIfChanged(targetInst);
	  var simulated = nativeEvent.simulated === true && ChangeEventPlugin._allowSimulatedPassThrough;
	
	  if (updated || simulated) {
	    return targetInst;
	  }
	}
	
	function getTargetInstForChangeEvent(topLevelType, targetInst) {
	  if (topLevelType === 'topChange') {
	    return targetInst;
	  }
	}
	
	function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events.
	
	  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
	}
	
	/**
	 * (For IE <=9) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetInst) {
	  activeElement = target;
	  activeElementInst = targetInst;
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For IE <=9) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementInst = null;
	}
	
	/**
	 * (For IE <=9) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
	    manualDispatchChangeEvent(nativeEvent);
	  }
	}
	
	function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
	  if (topLevelType === 'topFocus') {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(target, targetInst);
	  } else if (topLevelType === 'topBlur') {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetInstForInputEventPolyfill(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    return getInstIfValueChanged(activeElementInst, nativeEvent);
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topClick') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}
	
	function getTargetInstForInputOrChangeEvent(topLevelType, targetInst, nativeEvent) {
	  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
	    return getInstIfValueChanged(targetInst, nativeEvent);
	  }
	}
	
	function handleControlledInputBlur(inst, node) {
	  // TODO: In IE, inst is occasionally null. Why?
	  if (inst == null) {
	    return;
	  }
	
	  // Fiber and ReactDOM keep wrapper state in separate places
	  var state = inst._wrapperState || node._wrapperState;
	
	  if (!state || !state.controlled || node.type !== 'number') {
	    return;
	  }
	
	  // If controlled, assign the value attribute to the current value on blur
	  var value = '' + node.value;
	  if (node.getAttribute('value') !== value) {
	    node.setAttribute('value', value);
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	  eventTypes: eventTypes,
	
	  _allowSimulatedPassThrough: true,
	  _isInputEventSupported: isInputEventSupported,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    var getTargetInstFunc, handleEventFunc;
	    if (shouldUseChangeEvent(targetNode)) {
	      if (doesChangeEventBubble) {
	        getTargetInstFunc = getTargetInstForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(targetNode)) {
	      if (isInputEventSupported) {
	        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
	      } else {
	        getTargetInstFunc = getTargetInstForInputEventPolyfill;
	        handleEventFunc = handleEventsForInputEventPolyfill;
	      }
	    } else if (shouldUseClickEvent(targetNode)) {
	      getTargetInstFunc = getTargetInstForClickEvent;
	    }
	
	    if (getTargetInstFunc) {
	      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
	      if (inst) {
	        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, targetNode, targetInst);
	    }
	
	    // When blurring, set the value attribute for number inputs
	    if (topLevelType === 'topBlur') {
	      handleControlledInputBlur(targetInst, targetNode);
	    }
	  }
	};
	
	module.exports = ChangeEventPlugin;

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(62);
	var PooledClass = __webpack_require__(55);
	var ReactFeatureFlags = __webpack_require__(63);
	var ReactReconciler = __webpack_require__(64);
	var Transaction = __webpack_require__(73);
	
	var invariant = __webpack_require__(12);
	
	var dirtyComponents = [];
	var updateBatchNumber = 0;
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching strategy') : _prodInvariant('123') : void 0;
	}
	
	var NESTED_UPDATES = {
	  initialize: function () {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function () {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function () {
	    this.callbackQueue.reset();
	  },
	  close: function () {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */true);
	}
	
	_assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function () {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function (method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to match dirty-components array length (%s).', len, dirtyComponents.length) : _prodInvariant('124', len, dirtyComponents.length) : void 0;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  // Any updates enqueued while reconciling must be performed after this entire
	  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
	  // C, B could update twice in a single batch if C's render enqueues an update
	  // to B (since B would have already updated, we should skip it, and the only
	  // way we can know to do so is by checking the batch counter).
	  updateBatchNumber++;
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    var markerName;
	    if (ReactFeatureFlags.logTopLevelRenders) {
	      var namedComponent = component;
	      // Duck type TopLevelWrapper. This is probably always true.
	      if (component._currentElement.type.isReactTopLevelWrapper) {
	        namedComponent = component._renderedComponent;
	      }
	      markerName = 'React update: ' + namedComponent.getName();
	      console.time(markerName);
	    }
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
	
	    if (markerName) {
	      console.timeEnd(markerName);
	    }
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function () {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	  if (component._updateBatchNumber == null) {
	    component._updateBatchNumber = updateBatchNumber + 1;
	  }
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  invariant(batchingStrategy.isBatchingUpdates, "ReactUpdates.asap: Can't enqueue an asap callback in a context where" + 'updates are not being batched.');
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function (ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : _prodInvariant('126') : void 0;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function (_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : _prodInvariant('127') : void 0;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : _prodInvariant('128') : void 0;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : _prodInvariant('129') : void 0;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PooledClass = __webpack_require__(55);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	
	var CallbackQueue = function () {
	  function CallbackQueue(arg) {
	    _classCallCheck(this, CallbackQueue);
	
	    this._callbacks = null;
	    this._contexts = null;
	    this._arg = arg;
	  }
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.enqueue = function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._callbacks.push(callback);
	    this._contexts = this._contexts || [];
	    this._contexts.push(context);
	  };
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.notifyAll = function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    var arg = this._arg;
	    if (callbacks && contexts) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : _prodInvariant('24') : void 0;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i], arg);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  };
	
	  CallbackQueue.prototype.checkpoint = function checkpoint() {
	    return this._callbacks ? this._callbacks.length : 0;
	  };
	
	  CallbackQueue.prototype.rollback = function rollback(len) {
	    if (this._callbacks && this._contexts) {
	      this._callbacks.length = len;
	      this._contexts.length = len;
	    }
	  };
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	
	
	  CallbackQueue.prototype.reset = function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  };
	
	  /**
	   * `PooledClass` looks for this.
	   */
	
	
	  CallbackQueue.prototype.destructor = function destructor() {
	    this.reset();
	  };
	
	  return CallbackQueue;
	}();
	
	module.exports = PooledClass.addPoolingTo(CallbackQueue);
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 63 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactFeatureFlags = {
	  // When true, call console.time() before and .timeEnd() after each top-level
	  // render (both initial renders and updates). Useful when looking at prod-mode
	  // timeline profiles in Chrome, for example.
	  logTopLevelRenders: false
	};
	
	module.exports = ReactFeatureFlags;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(65);
	var ReactInstrumentation = __webpack_require__(67);
	
	var warning = __webpack_require__(8);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} the containing host component instance
	   * @param {?object} info about the host container
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) // 0 in production and for roots
	  {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
	      }
	    }
	    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
	      }
	    }
	    return markup;
	  },
	
	  /**
	   * Returns a value that can be passed to
	   * ReactComponentEnvironment.replaceNodeWithMarkup.
	   */
	  getHostNode: function (internalInstance) {
	    return internalInstance.getHostNode();
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (internalInstance, safely) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
	      }
	    }
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent(safely);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function (internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
	      }
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (internalInstance, transaction, updateBatchNumber) {
	    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
	      // The component's enqueued batch number should always be the current
	      // batch or the following one.
	      process.env.NODE_ENV !== 'production' ? warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber) : void 0;
	      return;
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
	      }
	    }
	    internalInstance.performUpdateIfNecessary(transaction);
	    if (process.env.NODE_ENV !== 'production') {
	      if (internalInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
	      }
	    }
	  }
	};
	
	module.exports = ReactReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(66);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevRef = null;
	  var prevOwner = null;
	  if (prevElement !== null && typeof prevElement === 'object') {
	    prevRef = prevElement.ref;
	    prevOwner = prevElement._owner;
	  }
	
	  var nextRef = null;
	  var nextOwner = null;
	  if (nextElement !== null && typeof nextElement === 'object') {
	    nextRef = nextElement.ref;
	    nextOwner = nextElement._owner;
	  }
	
	  return prevRef !== nextRef ||
	  // If owner changes but we have an unchanged function ref, don't update refs
	  typeof nextRef === 'string' && nextOwner !== prevOwner;
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || typeof element !== 'object') {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid owner.
	 * @final
	 */
	function isValidOwner(object) {
	  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	}
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might be adding a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('119') : void 0;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function (component, ref, owner) {
	    !isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might be removing a ref to a component that was not created inside a component\'s `render` method, or you have multiple copies of React loaded (details: https://fb.me/react-refs-must-have-owner).') : _prodInvariant('120') : void 0;
	    var ownerPublicInstance = owner.getPublicInstance();
	    // Check that `component`'s owner is still alive and that `component` is still the current ref
	    // because we do not want to detach the ref if another component stole it.
	    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	// Trust the developer to only use ReactInstrumentation with a __DEV__ check
	
	var debugTool = null;
	
	if (process.env.NODE_ENV !== 'production') {
	  var ReactDebugTool = __webpack_require__(68);
	  debugTool = ReactDebugTool;
	}
	
	module.exports = { debugTool: debugTool };
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactInvalidSetStateWarningHook = __webpack_require__(69);
	var ReactHostOperationHistoryHook = __webpack_require__(70);
	var ReactComponentTreeHook = __webpack_require__(24);
	var ExecutionEnvironment = __webpack_require__(53);
	
	var performanceNow = __webpack_require__(71);
	var warning = __webpack_require__(8);
	
	var hooks = [];
	var didHookThrowForEvent = {};
	
	function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
	  try {
	    fn.call(context, arg1, arg2, arg3, arg4, arg5);
	  } catch (e) {
	    process.env.NODE_ENV !== 'production' ? warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack) : void 0;
	    didHookThrowForEvent[event] = true;
	  }
	}
	
	function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
	  for (var i = 0; i < hooks.length; i++) {
	    var hook = hooks[i];
	    var fn = hook[event];
	    if (fn) {
	      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
	    }
	  }
	}
	
	var isProfiling = false;
	var flushHistory = [];
	var lifeCycleTimerStack = [];
	var currentFlushNesting = 0;
	var currentFlushMeasurements = [];
	var currentFlushStartTime = 0;
	var currentTimerDebugID = null;
	var currentTimerStartTime = 0;
	var currentTimerNestedFlushDuration = 0;
	var currentTimerType = null;
	
	var lifeCycleTimerHasWarned = false;
	
	function clearHistory() {
	  ReactComponentTreeHook.purgeUnmountedComponents();
	  ReactHostOperationHistoryHook.clearHistory();
	}
	
	function getTreeSnapshot(registeredIDs) {
	  return registeredIDs.reduce(function (tree, id) {
	    var ownerID = ReactComponentTreeHook.getOwnerID(id);
	    var parentID = ReactComponentTreeHook.getParentID(id);
	    tree[id] = {
	      displayName: ReactComponentTreeHook.getDisplayName(id),
	      text: ReactComponentTreeHook.getText(id),
	      updateCount: ReactComponentTreeHook.getUpdateCount(id),
	      childIDs: ReactComponentTreeHook.getChildIDs(id),
	      // Text nodes don't have owners but this is close enough.
	      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
	      parentID: parentID
	    };
	    return tree;
	  }, {});
	}
	
	function resetMeasurements() {
	  var previousStartTime = currentFlushStartTime;
	  var previousMeasurements = currentFlushMeasurements;
	  var previousOperations = ReactHostOperationHistoryHook.getHistory();
	
	  if (currentFlushNesting === 0) {
	    currentFlushStartTime = 0;
	    currentFlushMeasurements = [];
	    clearHistory();
	    return;
	  }
	
	  if (previousMeasurements.length || previousOperations.length) {
	    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
	    flushHistory.push({
	      duration: performanceNow() - previousStartTime,
	      measurements: previousMeasurements || [],
	      operations: previousOperations || [],
	      treeSnapshot: getTreeSnapshot(registeredIDs)
	    });
	  }
	
	  clearHistory();
	  currentFlushStartTime = performanceNow();
	  currentFlushMeasurements = [];
	}
	
	function checkDebugID(debugID) {
	  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	  if (allowRoot && debugID === 0) {
	    return;
	  }
	  if (!debugID) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDebugTool: debugID may not be empty.') : void 0;
	  }
	}
	
	function beginLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  currentTimerStartTime = performanceNow();
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	function endLifeCycleTimer(debugID, timerType) {
	  if (currentFlushNesting === 0) {
	    return;
	  }
	  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another') : void 0;
	    lifeCycleTimerHasWarned = true;
	  }
	  if (isProfiling) {
	    currentFlushMeasurements.push({
	      timerType: timerType,
	      instanceID: debugID,
	      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
	    });
	  }
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function pauseCurrentLifeCycleTimer() {
	  var currentTimer = {
	    startTime: currentTimerStartTime,
	    nestedFlushStartTime: performanceNow(),
	    debugID: currentTimerDebugID,
	    timerType: currentTimerType
	  };
	  lifeCycleTimerStack.push(currentTimer);
	  currentTimerStartTime = 0;
	  currentTimerNestedFlushDuration = 0;
	  currentTimerDebugID = null;
	  currentTimerType = null;
	}
	
	function resumeCurrentLifeCycleTimer() {
	  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
	      startTime = _lifeCycleTimerStack$.startTime,
	      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
	      debugID = _lifeCycleTimerStack$.debugID,
	      timerType = _lifeCycleTimerStack$.timerType;
	
	  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
	  currentTimerStartTime = startTime;
	  currentTimerNestedFlushDuration += nestedFlushDuration;
	  currentTimerDebugID = debugID;
	  currentTimerType = timerType;
	}
	
	var lastMarkTimeStamp = 0;
	var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';
	
	function shouldMark(debugID) {
	  if (!isProfiling || !canUsePerformanceMeasure) {
	    return false;
	  }
	  var element = ReactComponentTreeHook.getElement(debugID);
	  if (element == null || typeof element !== 'object') {
	    return false;
	  }
	  var isHostElement = typeof element.type === 'string';
	  if (isHostElement) {
	    return false;
	  }
	  return true;
	}
	
	function markBegin(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  lastMarkTimeStamp = performanceNow();
	  performance.mark(markName);
	}
	
	function markEnd(debugID, markType) {
	  if (!shouldMark(debugID)) {
	    return;
	  }
	
	  var markName = debugID + '::' + markType;
	  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
	
	  // Chrome has an issue of dropping markers recorded too fast:
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
	  // To work around this, we will not report very small measurements.
	  // I determined the magic number by tweaking it back and forth.
	  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
	  // When the bug is fixed, we can `measure()` unconditionally if we want to.
	  var timeStamp = performanceNow();
	  if (timeStamp - lastMarkTimeStamp > 0.1) {
	    var measurementName = displayName + ' [' + markType + ']';
	    performance.measure(measurementName, markName);
	  }
	
	  performance.clearMarks(markName);
	  if (measurementName) {
	    performance.clearMeasures(measurementName);
	  }
	}
	
	var ReactDebugTool = {
	  addHook: function (hook) {
	    hooks.push(hook);
	  },
	  removeHook: function (hook) {
	    for (var i = 0; i < hooks.length; i++) {
	      if (hooks[i] === hook) {
	        hooks.splice(i, 1);
	        i--;
	      }
	    }
	  },
	  isProfiling: function () {
	    return isProfiling;
	  },
	  beginProfiling: function () {
	    if (isProfiling) {
	      return;
	    }
	
	    isProfiling = true;
	    flushHistory.length = 0;
	    resetMeasurements();
	    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
	  },
	  endProfiling: function () {
	    if (!isProfiling) {
	      return;
	    }
	
	    isProfiling = false;
	    resetMeasurements();
	    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
	  },
	  getFlushHistory: function () {
	    return flushHistory;
	  },
	  onBeginFlush: function () {
	    currentFlushNesting++;
	    resetMeasurements();
	    pauseCurrentLifeCycleTimer();
	    emitEvent('onBeginFlush');
	  },
	  onEndFlush: function () {
	    resetMeasurements();
	    currentFlushNesting--;
	    resumeCurrentLifeCycleTimer();
	    emitEvent('onEndFlush');
	  },
	  onBeginLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
	    markBegin(debugID, timerType);
	    beginLifeCycleTimer(debugID, timerType);
	  },
	  onEndLifeCycleTimer: function (debugID, timerType) {
	    checkDebugID(debugID);
	    endLifeCycleTimer(debugID, timerType);
	    markEnd(debugID, timerType);
	    emitEvent('onEndLifeCycleTimer', debugID, timerType);
	  },
	  onBeginProcessingChildContext: function () {
	    emitEvent('onBeginProcessingChildContext');
	  },
	  onEndProcessingChildContext: function () {
	    emitEvent('onEndProcessingChildContext');
	  },
	  onHostOperation: function (operation) {
	    checkDebugID(operation.instanceID);
	    emitEvent('onHostOperation', operation);
	  },
	  onSetState: function () {
	    emitEvent('onSetState');
	  },
	  onSetChildren: function (debugID, childDebugIDs) {
	    checkDebugID(debugID);
	    childDebugIDs.forEach(checkDebugID);
	    emitEvent('onSetChildren', debugID, childDebugIDs);
	  },
	  onBeforeMountComponent: function (debugID, element, parentDebugID) {
	    checkDebugID(debugID);
	    checkDebugID(parentDebugID, true);
	    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
	    markBegin(debugID, 'mount');
	  },
	  onMountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'mount');
	    emitEvent('onMountComponent', debugID);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUpdateComponent', debugID, element);
	    markBegin(debugID, 'update');
	  },
	  onUpdateComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'update');
	    emitEvent('onUpdateComponent', debugID);
	  },
	  onBeforeUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    emitEvent('onBeforeUnmountComponent', debugID);
	    markBegin(debugID, 'unmount');
	  },
	  onUnmountComponent: function (debugID) {
	    checkDebugID(debugID);
	    markEnd(debugID, 'unmount');
	    emitEvent('onUnmountComponent', debugID);
	  },
	  onTestEvent: function () {
	    emitEvent('onTestEvent');
	  }
	};
	
	// TODO remove these when RN/www gets updated
	ReactDebugTool.addDevtool = ReactDebugTool.addHook;
	ReactDebugTool.removeDevtool = ReactDebugTool.removeHook;
	
	ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
	ReactDebugTool.addHook(ReactComponentTreeHook);
	var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	if (/[?&]react_perf\b/.test(url)) {
	  ReactDebugTool.beginProfiling();
	}
	
	module.exports = ReactDebugTool;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var warning = __webpack_require__(8);
	
	if (process.env.NODE_ENV !== 'production') {
	  var processingChildContext = false;
	
	  var warnInvalidSetState = function () {
	    process.env.NODE_ENV !== 'production' ? warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()') : void 0;
	  };
	}
	
	var ReactInvalidSetStateWarningHook = {
	  onBeginProcessingChildContext: function () {
	    processingChildContext = true;
	  },
	  onEndProcessingChildContext: function () {
	    processingChildContext = false;
	  },
	  onSetState: function () {
	    warnInvalidSetState();
	  }
	};
	
	module.exports = ReactInvalidSetStateWarningHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 70 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var history = [];
	
	var ReactHostOperationHistoryHook = {
	  onHostOperation: function (operation) {
	    history.push(operation);
	  },
	  clearHistory: function () {
	    if (ReactHostOperationHistoryHook._preventClearing) {
	      // Should only be used for tests.
	      return;
	    }
	
	    history = [];
	  },
	  getHistory: function () {
	    return history;
	  }
	};
	
	module.exports = ReactHostOperationHistoryHook;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var performance = __webpack_require__(72);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	var OBSERVED_ERROR = {};
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var TransactionImpl = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function () {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function () {
	    return !!this._isInTransaction;
	  },
	
	  /* eslint-disable space-before-function-paren */
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function (method, scope, a, b, c, d, e, f) {
	    /* eslint-enable space-before-function-paren */
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there is already an outstanding transaction.') : _prodInvariant('27') : void 0;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function (startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function (startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : _prodInvariant('28') : void 0;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	module.exports = TransactionImpl;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(39);
	
	function isCheckable(elem) {
	  var type = elem.type;
	  var nodeName = elem.nodeName;
	  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
	}
	
	function getTracker(inst) {
	  return inst._wrapperState.valueTracker;
	}
	
	function attachTracker(inst, tracker) {
	  inst._wrapperState.valueTracker = tracker;
	}
	
	function detachTracker(inst) {
	  inst._wrapperState.valueTracker = null;
	}
	
	function getValueFromNode(node) {
	  var value;
	  if (node) {
	    value = isCheckable(node) ? '' + node.checked : node.value;
	  }
	  return value;
	}
	
	var inputValueTracking = {
	  // exposed for testing
	  _getTrackerFromNode: function (node) {
	    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
	  },
	
	
	  track: function (inst) {
	    if (getTracker(inst)) {
	      return;
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var valueField = isCheckable(node) ? 'checked' : 'value';
	    var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
	
	    var currentValue = '' + node[valueField];
	
	    // if someone has already defined a value or Safari, then bail
	    // and don't track value will cause over reporting of changes,
	    // but it's better then a hard failure
	    // (needed for certain tests that spyOn input values and Safari)
	    if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
	      return;
	    }
	
	    Object.defineProperty(node, valueField, {
	      enumerable: descriptor.enumerable,
	      configurable: true,
	      get: function () {
	        return descriptor.get.call(this);
	      },
	      set: function (value) {
	        currentValue = '' + value;
	        descriptor.set.call(this, value);
	      }
	    });
	
	    attachTracker(inst, {
	      getValue: function () {
	        return currentValue;
	      },
	      setValue: function (value) {
	        currentValue = '' + value;
	      },
	      stopTracking: function () {
	        detachTracker(inst);
	        delete node[valueField];
	      }
	    });
	  },
	
	  updateValueIfChanged: function (inst) {
	    if (!inst) {
	      return false;
	    }
	    var tracker = getTracker(inst);
	
	    if (!tracker) {
	      inputValueTracking.track(inst);
	      return true;
	    }
	
	    var lastValue = tracker.getValue();
	    var nextValue = getValueFromNode(ReactDOMComponentTree.getNodeFromInstance(inst));
	
	    if (nextValue !== lastValue) {
	      tracker.setValue(nextValue);
	      return true;
	    }
	
	    return false;
	  },
	  stopTracking: function (inst) {
	    var tracker = getTracker(inst);
	    if (tracker) {
	      tracker.stopTracking();
	    }
	  }
	};
	
	module.exports = inputValueTracking;

/***/ }),
/* 75 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	
	  // Normalize SVG <use> element events #4963
	  if (target.correspondingUseElement) {
	    target = target.correspondingUseElement;
	  }
	
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  color: true,
	  date: true,
	  datetime: true,
	  'datetime-local': true,
	  email: true,
	  month: true,
	  number: true,
	  password: true,
	  range: true,
	  search: true,
	  tel: true,
	  text: true,
	  time: true,
	  url: true,
	  week: true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	
	  if (nodeName === 'input') {
	    return !!supportedInputTypes[elem.type];
	  }
	
	  if (nodeName === 'textarea') {
	    return true;
	  }
	
	  return false;
	}
	
	module.exports = isTextInputElement;

/***/ }),
/* 78 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	
	var DefaultEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
	
	module.exports = DefaultEventPluginOrder;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(46);
	var ReactDOMComponentTree = __webpack_require__(39);
	var SyntheticMouseEvent = __webpack_require__(80);
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: 'onMouseEnter',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  },
	  mouseLeave: {
	    registrationName: 'onMouseLeave',
	    dependencies: ['topMouseOut', 'topMouseOver']
	  }
	};
	
	var EnterLeaveEventPlugin = {
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   */
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (nativeEventTarget.window === nativeEventTarget) {
	      // `nativeEventTarget` is probably a window object.
	      win = nativeEventTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = nativeEventTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    if (topLevelType === 'topMouseOut') {
	      from = targetInst;
	      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
	      to = related ? ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
	    } else {
	      // Moving to a node from outside the window.
	      from = null;
	      to = targetInst;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var fromNode = from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
	    var toNode = to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = fromNode;
	    leave.relatedTarget = toNode;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = toNode;
	    enter.relatedTarget = fromNode;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, from, to);
	
	    return [leave, enter];
	  }
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(81);
	var ViewportMetrics = __webpack_require__(82);
	
	var getEventModifierState = __webpack_require__(83);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function (event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function (event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function (event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function (event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	var getEventTarget = __webpack_require__(75);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function (event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function (event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ }),
/* 82 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function (scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	};
	
	module.exports = ViewportMetrics;

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  Alt: 'altKey',
	  Control: 'ctrlKey',
	  Meta: 'metaKey',
	  Shift: 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(41);
	
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: 0,
	    acceptCharset: 0,
	    accessKey: 0,
	    action: 0,
	    allowFullScreen: HAS_BOOLEAN_VALUE,
	    allowTransparency: 0,
	    alt: 0,
	    // specifies target context for links with `preload` type
	    as: 0,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: 0,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: HAS_BOOLEAN_VALUE,
	    cellPadding: 0,
	    cellSpacing: 0,
	    charSet: 0,
	    challenge: 0,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    cite: 0,
	    classID: 0,
	    className: 0,
	    cols: HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: 0,
	    content: 0,
	    contentEditable: 0,
	    contextMenu: 0,
	    controls: HAS_BOOLEAN_VALUE,
	    controlsList: 0,
	    coords: 0,
	    crossOrigin: 0,
	    data: 0, // For `<object />` acts as `src`.
	    dateTime: 0,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: 0,
	    disabled: HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: 0,
	    encType: 0,
	    form: 0,
	    formAction: 0,
	    formEncType: 0,
	    formMethod: 0,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: 0,
	    frameBorder: 0,
	    headers: 0,
	    height: 0,
	    hidden: HAS_BOOLEAN_VALUE,
	    high: 0,
	    href: 0,
	    hrefLang: 0,
	    htmlFor: 0,
	    httpEquiv: 0,
	    icon: 0,
	    id: 0,
	    inputMode: 0,
	    integrity: 0,
	    is: 0,
	    keyParams: 0,
	    keyType: 0,
	    kind: 0,
	    label: 0,
	    lang: 0,
	    list: 0,
	    loop: HAS_BOOLEAN_VALUE,
	    low: 0,
	    manifest: 0,
	    marginHeight: 0,
	    marginWidth: 0,
	    max: 0,
	    maxLength: 0,
	    media: 0,
	    mediaGroup: 0,
	    method: 0,
	    min: 0,
	    minLength: 0,
	    // Caution; `option.selected` is not updated if `select.multiple` is
	    // disabled with `removeAttribute`.
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: 0,
	    nonce: 0,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: 0,
	    pattern: 0,
	    placeholder: 0,
	    playsInline: HAS_BOOLEAN_VALUE,
	    poster: 0,
	    preload: 0,
	    profile: 0,
	    radioGroup: 0,
	    readOnly: HAS_BOOLEAN_VALUE,
	    referrerPolicy: 0,
	    rel: 0,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: 0,
	    rows: HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: HAS_NUMERIC_VALUE,
	    sandbox: 0,
	    scope: 0,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: 0,
	    seamless: HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: 0,
	    size: HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: 0,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: 0,
	    src: 0,
	    srcDoc: 0,
	    srcLang: 0,
	    srcSet: 0,
	    start: HAS_NUMERIC_VALUE,
	    step: 0,
	    style: 0,
	    summary: 0,
	    tabIndex: 0,
	    target: 0,
	    title: 0,
	    // Setting .type throws on non-<input> tags
	    type: 0,
	    useMap: 0,
	    value: 0,
	    width: 0,
	    wmode: 0,
	    wrap: 0,
	
	    /**
	     * RDFa Properties
	     */
	    about: 0,
	    datatype: 0,
	    inlist: 0,
	    prefix: 0,
	    // property is also supported for OpenGraph in meta tags.
	    property: 0,
	    resource: 0,
	    'typeof': 0,
	    vocab: 0,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: 0,
	    autoCorrect: 0,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: 0,
	    // color is for Safari mask-icon link
	    color: 0,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: 0,
	    itemScope: HAS_BOOLEAN_VALUE,
	    itemType: 0,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: 0,
	    itemRef: 0,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: 0,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: 0,
	    // IE-only attribute that controls focus behavior
	    unselectable: 0
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {},
	  DOMMutationMethods: {
	    value: function (node, value) {
	      if (value == null) {
	        return node.removeAttribute('value');
	      }
	
	      // Number inputs get special treatment due to some edge cases in
	      // Chrome. Let everything else assign the value attribute as normal.
	      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
	      if (node.type !== 'number' || node.hasAttribute('value') === false) {
	        node.setAttribute('value', '' + value);
	      } else if (node.validity && !node.validity.badInput && node.ownerDocument.activeElement !== node) {
	        // Don't assign an attribute if validation reports bad
	        // input. Chrome will clear the value. Additionally, don't
	        // operate on inputs that have focus, otherwise Chrome might
	        // strip off trailing decimal places and cause the user's
	        // cursor position to jump to the beginning of the input.
	        //
	        // In ReactDOMInput, we have an onBlur event that will trigger
	        // this function again when focus is lost.
	        node.setAttribute('value', '' + value);
	      }
	    }
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(86);
	var ReactDOMIDOperations = __webpack_require__(97);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMLazyTree = __webpack_require__(87);
	var Danger = __webpack_require__(93);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactInstrumentation = __webpack_require__(67);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(90);
	var setInnerHTML = __webpack_require__(89);
	var setTextContent = __webpack_require__(91);
	
	function getNodeAfter(parentNode, node) {
	  // Special case for text components, which return [open, close] comments
	  // from getHostNode.
	  if (Array.isArray(node)) {
	    node = node[1];
	  }
	  return node ? node.nextSibling : parentNode.firstChild;
	}
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	var insertChildAt = createMicrosoftUnsafeLocalFunction(function (parentNode, childNode, referenceNode) {
	  // We rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
	  // we are careful to use `null`.)
	  parentNode.insertBefore(childNode, referenceNode);
	});
	
	function insertLazyTreeChildAt(parentNode, childTree, referenceNode) {
	  DOMLazyTree.insertTreeBefore(parentNode, childTree, referenceNode);
	}
	
	function moveChild(parentNode, childNode, referenceNode) {
	  if (Array.isArray(childNode)) {
	    moveDelimitedText(parentNode, childNode[0], childNode[1], referenceNode);
	  } else {
	    insertChildAt(parentNode, childNode, referenceNode);
	  }
	}
	
	function removeChild(parentNode, childNode) {
	  if (Array.isArray(childNode)) {
	    var closingComment = childNode[1];
	    childNode = childNode[0];
	    removeDelimitedText(parentNode, childNode, closingComment);
	    parentNode.removeChild(closingComment);
	  }
	  parentNode.removeChild(childNode);
	}
	
	function moveDelimitedText(parentNode, openingComment, closingComment, referenceNode) {
	  var node = openingComment;
	  while (true) {
	    var nextNode = node.nextSibling;
	    insertChildAt(parentNode, node, referenceNode);
	    if (node === closingComment) {
	      break;
	    }
	    node = nextNode;
	  }
	}
	
	function removeDelimitedText(parentNode, startNode, closingComment) {
	  while (true) {
	    var node = startNode.nextSibling;
	    if (node === closingComment) {
	      // The closing comment is removed by ReactMultiChild.
	      break;
	    } else {
	      parentNode.removeChild(node);
	    }
	  }
	}
	
	function replaceDelimitedText(openingComment, closingComment, stringText) {
	  var parentNode = openingComment.parentNode;
	  var nodeAfterComment = openingComment.nextSibling;
	  if (nodeAfterComment === closingComment) {
	    // There are no text nodes between the opening and closing comments; insert
	    // a new one if stringText isn't empty.
	    if (stringText) {
	      insertChildAt(parentNode, document.createTextNode(stringText), nodeAfterComment);
	    }
	  } else {
	    if (stringText) {
	      // Set the text content of the first node after the opening comment, and
	      // remove all following nodes up until the closing comment.
	      setTextContent(nodeAfterComment, stringText);
	      removeDelimitedText(parentNode, nodeAfterComment, closingComment);
	    } else {
	      removeDelimitedText(parentNode, openingComment, closingComment);
	    }
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onHostOperation({
	      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)._debugID,
	      type: 'replace text',
	      payload: stringText
	    });
	  }
	}
	
	var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
	if (process.env.NODE_ENV !== 'production') {
	  dangerouslyReplaceNodeWithMarkup = function (oldChild, markup, prevInstance) {
	    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
	    if (prevInstance._debugID !== 0) {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: prevInstance._debugID,
	        type: 'replace with',
	        payload: markup.toString()
	      });
	    } else {
	      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
	      if (nextInstance._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: nextInstance._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  };
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
	
	  replaceDelimitedText: replaceDelimitedText,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  processUpdates: function (parentNode, updates) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(parentNode)._debugID;
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      var update = updates[k];
	      switch (update.type) {
	        case 'INSERT_MARKUP':
	          insertLazyTreeChildAt(parentNode, update.content, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'insert child',
	              payload: {
	                toIndex: update.toIndex,
	                content: update.content.toString()
	              }
	            });
	          }
	          break;
	        case 'MOVE_EXISTING':
	          moveChild(parentNode, update.fromNode, getNodeAfter(parentNode, update.afterNode));
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'move child',
	              payload: { fromIndex: update.fromIndex, toIndex: update.toIndex }
	            });
	          }
	          break;
	        case 'SET_MARKUP':
	          setInnerHTML(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace children',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'TEXT_CONTENT':
	          setTextContent(parentNode, update.content);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'replace text',
	              payload: update.content.toString()
	            });
	          }
	          break;
	        case 'REMOVE_NODE':
	          removeChild(parentNode, update.fromNode);
	          if (process.env.NODE_ENV !== 'production') {
	            ReactInstrumentation.debugTool.onHostOperation({
	              instanceID: parentNodeDebugID,
	              type: 'remove child',
	              payload: { fromIndex: update.fromIndex }
	            });
	          }
	          break;
	      }
	    }
	  }
	};
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = __webpack_require__(88);
	var setInnerHTML = __webpack_require__(89);
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(90);
	var setTextContent = __webpack_require__(91);
	
	var ELEMENT_NODE_TYPE = 1;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * In IE (8-11) and Edge, appending nodes with no children is dramatically
	 * faster than appending a full subtree, so we essentially queue up the
	 * .appendChild calls here and apply them so each node is added to its parent
	 * before any children are added.
	 *
	 * In other browsers, doing so is slower or neutral compared to the other order
	 * (in Firefox, twice as slow) so we only do this inversion in IE.
	 *
	 * See https://github.com/spicyj/innerhtml-vs-createelement-vs-clonenode.
	 */
	var enableLazy = typeof document !== 'undefined' && typeof document.documentMode === 'number' || typeof navigator !== 'undefined' && typeof navigator.userAgent === 'string' && /\bEdge\/\d/.test(navigator.userAgent);
	
	function insertTreeChildren(tree) {
	  if (!enableLazy) {
	    return;
	  }
	  var node = tree.node;
	  var children = tree.children;
	  if (children.length) {
	    for (var i = 0; i < children.length; i++) {
	      insertTreeBefore(node, children[i], null);
	    }
	  } else if (tree.html != null) {
	    setInnerHTML(node, tree.html);
	  } else if (tree.text != null) {
	    setTextContent(node, tree.text);
	  }
	}
	
	var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function (parentNode, tree, referenceNode) {
	  // DocumentFragments aren't actually part of the DOM after insertion so
	  // appending children won't update the DOM. We need to ensure the fragment
	  // is properly populated first, breaking out of our lazy approach for just
	  // this level. Also, some <object> plugins (like Flash Player) will read
	  // <param> nodes immediately upon insertion into the DOM, so <object>
	  // must also be populated prior to insertion into the DOM.
	  if (tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE || tree.node.nodeType === ELEMENT_NODE_TYPE && tree.node.nodeName.toLowerCase() === 'object' && (tree.node.namespaceURI == null || tree.node.namespaceURI === DOMNamespaces.html)) {
	    insertTreeChildren(tree);
	    parentNode.insertBefore(tree.node, referenceNode);
	  } else {
	    parentNode.insertBefore(tree.node, referenceNode);
	    insertTreeChildren(tree);
	  }
	});
	
	function replaceChildWithTree(oldNode, newTree) {
	  oldNode.parentNode.replaceChild(newTree.node, oldNode);
	  insertTreeChildren(newTree);
	}
	
	function queueChild(parentTree, childTree) {
	  if (enableLazy) {
	    parentTree.children.push(childTree);
	  } else {
	    parentTree.node.appendChild(childTree.node);
	  }
	}
	
	function queueHTML(tree, html) {
	  if (enableLazy) {
	    tree.html = html;
	  } else {
	    setInnerHTML(tree.node, html);
	  }
	}
	
	function queueText(tree, text) {
	  if (enableLazy) {
	    tree.text = text;
	  } else {
	    setTextContent(tree.node, text);
	  }
	}
	
	function toString() {
	  return this.node.nodeName;
	}
	
	function DOMLazyTree(node) {
	  return {
	    node: node,
	    children: [],
	    html: null,
	    text: null,
	    toString: toString
	  };
	}
	
	DOMLazyTree.insertTreeBefore = insertTreeBefore;
	DOMLazyTree.replaceChildWithTree = replaceChildWithTree;
	DOMLazyTree.queueChild = queueChild;
	DOMLazyTree.queueHTML = queueHTML;
	DOMLazyTree.queueText = queueText;
	
	module.exports = DOMLazyTree;

/***/ }),
/* 88 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMNamespaces = {
	  html: 'http://www.w3.org/1999/xhtml',
	  mathml: 'http://www.w3.org/1998/Math/MathML',
	  svg: 'http://www.w3.org/2000/svg'
	};
	
	module.exports = DOMNamespaces;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	var DOMNamespaces = __webpack_require__(88);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	var createMicrosoftUnsafeLocalFunction = __webpack_require__(90);
	
	// SVG temp container for IE lacking innerHTML
	var reusableSVGContainer;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
	  // IE does not have innerHTML for SVG nodes, so instead we inject the
	  // new markup in a temp node and then move the child nodes across into
	  // the target node
	  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
	    reusableSVGContainer = reusableSVGContainer || document.createElement('div');
	    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
	    var svgNode = reusableSVGContainer.firstChild;
	    while (svgNode.firstChild) {
	      node.appendChild(svgNode.firstChild);
	    }
	  } else {
	    node.innerHTML = html;
	  }
	});
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function (node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xfeff) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	  testElement = null;
	}
	
	module.exports = setInnerHTML;

/***/ }),
/* 90 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	/**
	 * Create a function which has 'unsafe' privileges (required by windows8 apps)
	 */
	
	var createMicrosoftUnsafeLocalFunction = function (func) {
	  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	    return function (arg0, arg1, arg2, arg3) {
	      MSApp.execUnsafeLocalFunction(function () {
	        return func(arg0, arg1, arg2, arg3);
	      });
	    };
	  } else {
	    return func;
	  }
	};
	
	module.exports = createMicrosoftUnsafeLocalFunction;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	var escapeTextContentForBrowser = __webpack_require__(92);
	var setInnerHTML = __webpack_require__(89);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function (node, text) {
	  if (text) {
	    var firstChild = node.firstChild;
	
	    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
	      firstChild.nodeValue = text;
	      return;
	    }
	  }
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function (node, text) {
	      if (node.nodeType === 3) {
	        node.nodeValue = text;
	        return;
	      }
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ }),
/* 92 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2016-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * Based on the escape-html library, which is used under the MIT License below:
	 *
	 * Copyright (c) 2012-2013 TJ Holowaychuk
	 * Copyright (c) 2015 Andreas Lubbe
	 * Copyright (c) 2015 Tiancheng "Timothy" Gu
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining
	 * a copy of this software and associated documentation files (the
	 * 'Software'), to deal in the Software without restriction, including
	 * without limitation the rights to use, copy, modify, merge, publish,
	 * distribute, sublicense, and/or sell copies of the Software, and to
	 * permit persons to whom the Software is furnished to do so, subject to
	 * the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be
	 * included in all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
	 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
	 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
	 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
	 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
	 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 *
	 */
	
	'use strict';
	
	// code copied and modified from escape-html
	/**
	 * Module variables.
	 * @private
	 */
	
	var matchHtmlRegExp = /["'&<>]/;
	
	/**
	 * Escape special characters in the given string of html.
	 *
	 * @param  {string} string The string to escape for inserting into HTML
	 * @return {string}
	 * @public
	 */
	
	function escapeHtml(string) {
	  var str = '' + string;
	  var match = matchHtmlRegExp.exec(str);
	
	  if (!match) {
	    return str;
	  }
	
	  var escape;
	  var html = '';
	  var index = 0;
	  var lastIndex = 0;
	
	  for (index = match.index; index < str.length; index++) {
	    switch (str.charCodeAt(index)) {
	      case 34:
	        // "
	        escape = '&quot;';
	        break;
	      case 38:
	        // &
	        escape = '&amp;';
	        break;
	      case 39:
	        // '
	        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
	        break;
	      case 60:
	        // <
	        escape = '&lt;';
	        break;
	      case 62:
	        // >
	        escape = '&gt;';
	        break;
	      default:
	        continue;
	    }
	
	    if (lastIndex !== index) {
	      html += str.substring(lastIndex, index);
	    }
	
	    lastIndex = index + 1;
	    html += escape;
	  }
	
	  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
	}
	// end code copied and modified from escape-html
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  if (typeof text === 'boolean' || typeof text === 'number') {
	    // this shortcircuit helps perf for types that we know will never have
	    // special characters, especially given that this function is used often
	    // for numeric dom ids.
	    return '' + text;
	  }
	  return escapeHtml(text);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var DOMLazyTree = __webpack_require__(87);
	var ExecutionEnvironment = __webpack_require__(53);
	
	var createNodesFromMarkup = __webpack_require__(94);
	var emptyFunction = __webpack_require__(9);
	var invariant = __webpack_require__(12);
	
	var Danger = {
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function (oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a worker thread. Make sure `window` and `document` are available globally before requiring React when unit testing or use ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('56') : void 0;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : _prodInvariant('57') : void 0;
	    !(oldChild.nodeName !== 'HTML') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the <html> node. This is because browser quirks make this unreliable and/or slow. If you want to render to the root you must use server rendering. See ReactDOMServer.renderToString().') : _prodInvariant('58') : void 0;
	
	    if (typeof markup === 'string') {
	      var newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	      oldChild.parentNode.replaceChild(newChild, oldChild);
	    } else {
	      DOMLazyTree.replaceChildWithTree(oldChild, markup);
	    }
	  }
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var createArrayFromMixed = __webpack_require__(95);
	var getMarkupWrap = __webpack_require__(96);
	var invariant = __webpack_require__(12);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : void 0;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : void 0;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = Array.from(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browsers builtin objects can report typeof 'function' (e.g. NodeList
	  // in old versions of Safari).
	  !(!Array.isArray(obj) && (typeof obj === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : void 0;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : void 0;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : void 0;
	
	  !(typeof obj.callee !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object can\'t be `arguments`. Use rest params ' + '(function(...args) {}) or Array.from() instead.') : invariant(false) : void 0;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return (
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    typeof obj == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : void 0;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(86);
	var ReactDOMComponentTree = __webpack_require__(39);
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function (parentInst, updates) {
	    var node = ReactDOMComponentTree.getNodeFromInstance(parentInst);
	    DOMChildrenOperations.processUpdates(node, updates);
	  }
	};
	
	module.exports = ReactDOMIDOperations;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var AutoFocusUtils = __webpack_require__(99);
	var CSSPropertyOperations = __webpack_require__(101);
	var DOMLazyTree = __webpack_require__(87);
	var DOMNamespaces = __webpack_require__(88);
	var DOMProperty = __webpack_require__(41);
	var DOMPropertyOperations = __webpack_require__(109);
	var EventPluginHub = __webpack_require__(47);
	var EventPluginRegistry = __webpack_require__(48);
	var ReactBrowserEventEmitter = __webpack_require__(111);
	var ReactDOMComponentFlags = __webpack_require__(42);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactDOMInput = __webpack_require__(114);
	var ReactDOMOption = __webpack_require__(117);
	var ReactDOMSelect = __webpack_require__(118);
	var ReactDOMTextarea = __webpack_require__(119);
	var ReactInstrumentation = __webpack_require__(67);
	var ReactMultiChild = __webpack_require__(120);
	var ReactServerRenderingTransaction = __webpack_require__(139);
	
	var emptyFunction = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(92);
	var invariant = __webpack_require__(12);
	var isEventSupported = __webpack_require__(76);
	var shallowEqual = __webpack_require__(129);
	var inputValueTracking = __webpack_require__(74);
	var validateDOMNesting = __webpack_require__(142);
	var warning = __webpack_require__(8);
	
	var Flags = ReactDOMComponentFlags;
	var deleteListener = EventPluginHub.deleteListener;
	var getNode = ReactDOMComponentTree.getNodeFromInstance;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = EventPluginRegistry.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { string: true, number: true };
	
	var STYLE = 'style';
	var HTML = '__html';
	var RESERVED_PROPS = {
	  children: null,
	  dangerouslySetInnerHTML: null,
	  suppressContentEditableWarning: null
	};
	
	// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
	var DOC_FRAGMENT_TYPE = 11;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	function friendlyStringify(obj) {
	  if (typeof obj === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined because undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : void 0;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (voidElementTags[component._tag]) {
	    !(props.children == null && props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : _prodInvariant('137', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : void 0;
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : _prodInvariant('60') : void 0;
	    !(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : _prodInvariant('61') : void 0;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(props.onFocusIn == null && props.onFocusOut == null, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.') : void 0;
	  }
	  !(props.style == null || typeof props.style === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', getDeclarationErrorAddendum(component)) : _prodInvariant('62', getDeclarationErrorAddendum(component)) : void 0;
	}
	
	function enqueuePutListener(inst, registrationName, listener, transaction) {
	  if (transaction instanceof ReactServerRenderingTransaction) {
	    return;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), "This browser doesn't support the `onScroll` event") : void 0;
	  }
	  var containerInfo = inst._hostContainerInfo;
	  var isDocumentFragment = containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
	  var doc = isDocumentFragment ? containerInfo._node : containerInfo._ownerDocument;
	  listenTo(registrationName, doc);
	  transaction.getReactMountReady().enqueue(putListener, {
	    inst: inst,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  EventPluginHub.putListener(listenerToPut.inst, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	function inputPostMount() {
	  var inst = this;
	  ReactDOMInput.postMountWrapper(inst);
	}
	
	function textareaPostMount() {
	  var inst = this;
	  ReactDOMTextarea.postMountWrapper(inst);
	}
	
	function optionPostMount() {
	  var inst = this;
	  ReactDOMOption.postMountWrapper(inst);
	}
	
	var setAndValidateContentChildDev = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  setAndValidateContentChildDev = function (content) {
	    var hasExistingContent = this._contentDebugID != null;
	    var debugID = this._debugID;
	    // This ID represents the inlined child that has no backing instance:
	    var contentDebugID = -debugID;
	
	    if (content == null) {
	      if (hasExistingContent) {
	        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
	      }
	      this._contentDebugID = null;
	      return;
	    }
	
	    validateDOMNesting(null, String(content), this, this._ancestorInfo);
	    this._contentDebugID = contentDebugID;
	    if (hasExistingContent) {
	      ReactInstrumentation.debugTool.onBeforeUpdateComponent(contentDebugID, content);
	      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
	    } else {
	      ReactInstrumentation.debugTool.onBeforeMountComponent(contentDebugID, content, debugID);
	      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
	      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
	    }
	  };
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trackInputValue() {
	  inputValueTracking.track(this);
	}
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : _prodInvariant('63') : void 0;
	  var node = getNode(inst);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : _prodInvariant('64') : void 0;
	
	  switch (inst._tag) {
	    case 'iframe':
	    case 'object':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	      inst._wrapperState.listeners = [];
	      // Create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(event, mediaEvents[event], node));
	        }
	      }
	      break;
	    case 'source':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node)];
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node), ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node)];
	      break;
	    case 'input':
	    case 'select':
	    case 'textarea':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent('topInvalid', 'invalid', node)];
	      break;
	  }
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special-case tags.
	
	var omittedCloseTags = {
	  area: true,
	  base: true,
	  br: true,
	  col: true,
	  embed: true,
	  hr: true,
	  img: true,
	  input: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true
	  // NOTE: menuitem's close tag should be omitted, but that causes problems.
	};
	
	var newlineEatingTags = {
	  listing: true,
	  pre: true,
	  textarea: true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = _assign({
	  menuitem: true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : _prodInvariant('65', tag) : void 0;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	var globalIdCounter = 1;
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(element) {
	  var tag = element.type;
	  validateDangerousTag(tag);
	  this._currentElement = element;
	  this._tag = tag.toLowerCase();
	  this._namespaceURI = null;
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._hostNode = null;
	  this._hostParent = null;
	  this._rootNodeID = 0;
	  this._domID = 0;
	  this._hostContainerInfo = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._flags = 0;
	  if (process.env.NODE_ENV !== 'production') {
	    this._ancestorInfo = null;
	    setAndValidateContentChildDev.call(this, null);
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?ReactDOMComponent} the parent component instance
	   * @param {?object} info about the host container
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    this._rootNodeID = globalIdCounter++;
	    this._domID = hostContainerInfo._idCounter++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, hostParent);
	        props = ReactDOMInput.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, hostParent);
	        props = ReactDOMOption.getHostProps(this, props);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, hostParent);
	        props = ReactDOMSelect.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, hostParent);
	        props = ReactDOMTextarea.getHostProps(this, props);
	        transaction.getReactMountReady().enqueue(trackInputValue, this);
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	    }
	
	    assertValidProps(this, props);
	
	    // We create tags in the namespace of their parent container, except HTML
	    // tags get no namespace.
	    var namespaceURI;
	    var parentTag;
	    if (hostParent != null) {
	      namespaceURI = hostParent._namespaceURI;
	      parentTag = hostParent._tag;
	    } else if (hostContainerInfo._tag) {
	      namespaceURI = hostContainerInfo._namespaceURI;
	      parentTag = hostContainerInfo._tag;
	    }
	    if (namespaceURI == null || namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
	      namespaceURI = DOMNamespaces.html;
	    }
	    if (namespaceURI === DOMNamespaces.html) {
	      if (this._tag === 'svg') {
	        namespaceURI = DOMNamespaces.svg;
	      } else if (this._tag === 'math') {
	        namespaceURI = DOMNamespaces.mathml;
	      }
	    }
	    this._namespaceURI = namespaceURI;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo._tag) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(this._tag, null, this, parentInfo);
	      }
	      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var el;
	      if (namespaceURI === DOMNamespaces.html) {
	        if (this._tag === 'script') {
	          // Create the script via .innerHTML so its "parser-inserted" flag is
	          // set to true and it does not execute
	          var div = ownerDocument.createElement('div');
	          var type = this._currentElement.type;
	          div.innerHTML = '<' + type + '></' + type + '>';
	          el = div.removeChild(div.firstChild);
	        } else if (props.is) {
	          el = ownerDocument.createElement(this._currentElement.type, props.is);
	        } else {
	          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
	          // See discussion in https://github.com/facebook/react/pull/6896
	          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
	          el = ownerDocument.createElement(this._currentElement.type);
	        }
	      } else {
	        el = ownerDocument.createElementNS(namespaceURI, this._currentElement.type);
	      }
	      ReactDOMComponentTree.precacheNode(this, el);
	      this._flags |= Flags.hasCachedChildNodes;
	      if (!this._hostParent) {
	        DOMPropertyOperations.setAttributeForRoot(el);
	      }
	      this._updateDOMProperties(null, props, transaction);
	      var lazyTree = DOMLazyTree(el);
	      this._createInitialChildren(transaction, props, context, lazyTree);
	      mountImage = lazyTree;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(inputPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'textarea':
	        transaction.getReactMountReady().enqueue(textareaPostMount, this);
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'select':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'button':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	      case 'option':
	        transaction.getReactMountReady().enqueue(optionPostMount, this);
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function (transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = _assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    if (!this._hostParent) {
	      ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
	    }
	    ret += ' ' + DOMPropertyOperations.createMarkupForID(this._domID);
	    return ret;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function (transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function (transaction, props, context, lazyTree) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        DOMLazyTree.queueHTML(lazyTree, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[typeof props.children] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      // TODO: Validate that text is allowed as a child of this node
	      if (contentToUse != null) {
	        // Avoid setting textContent when the text is empty. In IE11 setting
	        // textContent on a text area will cause the placeholder to not
	        // show within the textarea until it has been focused and blurred again.
	        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
	        if (contentToUse !== '') {
	          if (process.env.NODE_ENV !== 'production') {
	            setAndValidateContentChildDev.call(this, contentToUse);
	          }
	          DOMLazyTree.queueText(lazyTree, contentToUse);
	        }
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          DOMLazyTree.queueChild(lazyTree, mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function (nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'input':
	        lastProps = ReactDOMInput.getHostProps(this, lastProps);
	        nextProps = ReactDOMInput.getHostProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getHostProps(this, lastProps);
	        nextProps = ReactDOMOption.getHostProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
	        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
	        break;
	      case 'textarea':
	        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
	        break;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    switch (this._tag) {
	      case 'input':
	        // Update the wrapper around inputs *after* updating props. This has to
	        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
	        // raise warnings and prevent the new value from being assigned.
	        ReactDOMInput.updateWrapper(this);
	
	        // We also check that we haven't missed a value update, such as a
	        // Radio group shifting the checked value to another named radio input.
	        inputValueTracking.updateValueIfChanged(this);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        break;
	      case 'select':
	        // <select> value update needs to occur after <option> children
	        // reconciliation
	        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	        break;
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function (lastProps, nextProps, transaction) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, lastProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps != null ? lastProps[propKey] : undefined;
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = _assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
	          DOMPropertyOperations.setValueForAttribute(getNode(this), propKey, nextProp);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        var node = getNode(this);
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertently setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      CSSPropertyOperations.setValueForStyles(getNode(this), styleUpdates, this);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function (lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	        if (process.env.NODE_ENV !== 'production') {
	          setAndValidateContentChildDev.call(this, nextContent);
	        }
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
	      }
	    } else if (nextChildren != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        setAndValidateContentChildDev.call(this, null);
	      }
	
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  getHostNode: function () {
	    return getNode(this);
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    switch (this._tag) {
	      case 'audio':
	      case 'form':
	      case 'iframe':
	      case 'img':
	      case 'link':
	      case 'object':
	      case 'source':
	      case 'video':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	      case 'textarea':
	        inputValueTracking.stopTracking(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is impossible to unmount some top-level components (eg <html>, <head>, and <body>) reliably and efficiently. To fix this, have a single top-level component that never unmounts render these elements.', this._tag) : _prodInvariant('66', this._tag) : void 0;
	        break;
	    }
	
	    this.unmountChildren(safely);
	    ReactDOMComponentTree.uncacheNode(this);
	    EventPluginHub.deleteAllListeners(this);
	    this._rootNodeID = 0;
	    this._domID = 0;
	    this._wrapperState = null;
	
	    if (process.env.NODE_ENV !== 'production') {
	      setAndValidateContentChildDev.call(this, null);
	    }
	  },
	
	  getPublicInstance: function () {
	    return getNode(this);
	  }
	};
	
	_assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactDOMComponentTree = __webpack_require__(39);
	
	var focusNode = __webpack_require__(100);
	
	var AutoFocusUtils = {
	  focusDOMComponent: function () {
	    focusNode(ReactDOMComponentTree.getNodeFromInstance(this));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(102);
	var ExecutionEnvironment = __webpack_require__(53);
	var ReactInstrumentation = __webpack_require__(67);
	
	var camelizeStyleName = __webpack_require__(103);
	var dangerousStyleValue = __webpack_require__(105);
	var hyphenateStyleName = __webpack_require__(106);
	var memoizeStringOnly = __webpack_require__(108);
	var warning = __webpack_require__(8);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	  var warnedForNaNValue = false;
	
	  var warnHyphenatedStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnBadVendoredStyleName = function (name, owner) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
	  };
	
	  var warnStyleValueWithSemicolon = function (name, value, owner) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, "Style property values shouldn't contain a semicolon.%s " + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
	  };
	
	  var warnStyleValueIsNaN = function (name, value, owner) {
	    if (warnedForNaNValue) {
	      return;
	    }
	
	    warnedForNaNValue = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
	  };
	
	  var checkRenderMessage = function (owner) {
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' Check the render method of `' + name + '`.';
	      }
	    }
	    return '';
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   * @param {ReactDOMComponent} component
	   */
	  var warnValidStyle = function (name, value, component) {
	    var owner;
	    if (component) {
	      owner = component._currentElement._owner;
	    }
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name, owner);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name, owner);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value, owner);
	    }
	
	    if (typeof value === 'number' && isNaN(value)) {
	      warnStyleValueIsNaN(name, value, owner);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   * @return {?string}
	   */
	  createMarkupForStyles: function (styles, component) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styleValue, component);
	        }
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue, component, isCustomProperty) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   * @param {ReactDOMComponent} component
	   */
	  setValueForStyles: function (node, styles, component) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: component._debugID,
	        type: 'update styles',
	        payload: styles
	      });
	    }
	
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var isCustomProperty = styleName.indexOf('--') === 0;
	      if (process.env.NODE_ENV !== 'production') {
	        if (!isCustomProperty) {
	          warnValidStyle(styleName, styles[styleName], component);
	        }
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName], component, isCustomProperty);
	      if (styleName === 'float' || styleName === 'cssFloat') {
	        styleName = styleFloatAccessor;
	      }
	      if (isCustomProperty) {
	        style.setProperty(styleName, styleValue);
	      } else if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	};
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 102 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  borderImageOutset: true,
	  borderImageSlice: true,
	  borderImageWidth: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  columns: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  gridRow: true,
	  gridRowEnd: true,
	  gridRowSpan: true,
	  gridRowStart: true,
	  gridColumn: true,
	  gridColumnEnd: true,
	  gridColumnSpan: true,
	  gridColumnStart: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  floodOpacity: true,
	  stopOpacity: true,
	  strokeDasharray: true,
	  strokeDashoffset: true,
	  strokeMiterlimit: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(104);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ }),
/* 104 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(102);
	var warning = __webpack_require__(8);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	var styleWarnings = {};
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @param {ReactDOMComponent} component
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value, component, isCustomProperty) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isCustomProperty || isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    if (process.env.NODE_ENV !== 'production') {
	      // Allow '0' to pass through without warning. 0 is already special and
	      // doesn't require units, so we don't need to warn about it.
	      if (component && value !== '0') {
	        var owner = component._currentElement._owner;
	        var ownerName = owner ? owner.getName() : null;
	        if (ownerName && !styleWarnings[ownerName]) {
	          styleWarnings[ownerName] = {};
	        }
	        var warned = false;
	        if (ownerName) {
	          var warnings = styleWarnings[ownerName];
	          warned = warnings[name];
	          if (!warned) {
	            warnings[name] = true;
	          }
	        }
	        if (!warned) {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
	        }
	      }
	    }
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(107);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ }),
/* 107 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ }),
/* 108 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(41);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactInstrumentation = __webpack_require__(67);
	
	var quoteAttributeValueForBrowser = __webpack_require__(110);
	var warning = __webpack_require__(8);
	
	var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : void 0;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function (id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function (node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  createMarkupForRoot: function () {
	    return DOMProperty.ROOT_ATTRIBUTE_NAME + '=""';
	  },
	
	  setAttributeForRoot: function (node) {
	    node.setAttribute(DOMProperty.ROOT_ATTRIBUTE_NAME, '');
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function (name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function (name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function (node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	        return;
	      } else if (propertyInfo.mustUseProperty) {
	        // Contrary to `setAttribute`, object properties are properly
	        // `toString`ed by IE8/9.
	        node[propertyInfo.propertyName] = value;
	      } else {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	      return;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  setValueForAttribute: function (node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var payload = {};
	      payload[name] = value;
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'update attribute',
	        payload: payload
	      });
	    }
	  },
	
	  /**
	   * Deletes an attributes from a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForAttribute: function (node, name) {
	    node.removeAttribute(name);
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function (node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseProperty) {
	        var propName = propertyInfo.propertyName;
	        if (propertyInfo.hasBooleanValue) {
	          node[propName] = false;
	        } else {
	          node[propName] = '';
	        }
	      } else {
	        node.removeAttribute(propertyInfo.attributeName);
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onHostOperation({
	        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
	        type: 'remove attribute',
	        payload: name
	      });
	    }
	  }
	};
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(92);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventPluginRegistry = __webpack_require__(48);
	var ReactEventEmitterMixin = __webpack_require__(112);
	var ViewportMetrics = __webpack_require__(82);
	
	var getVendorPrefixedEventName = __webpack_require__(113);
	var isEventSupported = __webpack_require__(76);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var hasEventPageXY;
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
	  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
	  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   EventPluginHub.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = _assign({}, ReactEventEmitterMixin, {
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function (ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function (enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function () {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function (registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === 'topWheel') {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topWheel', 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === 'topScroll') {
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topScroll', 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topScroll', 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topFocus', 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent('topBlur', 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topFocus', 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent('topBlur', 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening.topBlur = true;
	          isListening.topFocus = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function (topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Protect against document.createEvent() returning null
	   * Some popup blocker extensions appear to do this:
	   * https://github.com/facebook/react/issues/6887
	   */
	  supportsEventPageXY: function () {
	    if (!document.createEvent) {
	      return false;
	    }
	    var ev = document.createEvent('MouseEvent');
	    return ev != null && 'pageX' in ev;
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * ViewportMetrics is only used by SyntheticMouse/TouchEvent and only when
	   * pageX/pageY isn't supported (legacy browsers).
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function () {
	    if (hasEventPageXY === undefined) {
	      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
	    }
	    if (!hasEventPageXY && !isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  }
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(47);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   */
	  handleTopLevel: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	/**
	 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
	 *
	 * @param {string} styleProp
	 * @param {string} eventName
	 * @returns {object}
	 */
	function makePrefixMap(styleProp, eventName) {
	  var prefixes = {};
	
	  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
	  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
	  prefixes['Moz' + styleProp] = 'moz' + eventName;
	  prefixes['ms' + styleProp] = 'MS' + eventName;
	  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();
	
	  return prefixes;
	}
	
	/**
	 * A list of event names to a configurable list of vendor prefixes.
	 */
	var vendorPrefixes = {
	  animationend: makePrefixMap('Animation', 'AnimationEnd'),
	  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
	  animationstart: makePrefixMap('Animation', 'AnimationStart'),
	  transitionend: makePrefixMap('Transition', 'TransitionEnd')
	};
	
	/**
	 * Event names that have already been detected and prefixed (if applicable).
	 */
	var prefixedEventNames = {};
	
	/**
	 * Element to check for prefixes on.
	 */
	var style = {};
	
	/**
	 * Bootstrap if a DOM exists.
	 */
	if (ExecutionEnvironment.canUseDOM) {
	  style = document.createElement('div').style;
	
	  // On some platforms, in particular some releases of Android 4.x,
	  // the un-prefixed "animation" and "transition" properties are defined on the
	  // style object but the events that fire will still be prefixed, so we need
	  // to check if the un-prefixed events are usable, and if not remove them from the map.
	  if (!('AnimationEvent' in window)) {
	    delete vendorPrefixes.animationend.animation;
	    delete vendorPrefixes.animationiteration.animation;
	    delete vendorPrefixes.animationstart.animation;
	  }
	
	  // Same as above
	  if (!('TransitionEvent' in window)) {
	    delete vendorPrefixes.transitionend.transition;
	  }
	}
	
	/**
	 * Attempts to determine the correct vendor prefixed event name.
	 *
	 * @param {string} eventName
	 * @returns {string}
	 */
	function getVendorPrefixedEventName(eventName) {
	  if (prefixedEventNames[eventName]) {
	    return prefixedEventNames[eventName];
	  } else if (!vendorPrefixes[eventName]) {
	    return eventName;
	  }
	
	  var prefixMap = vendorPrefixes[eventName];
	
	  for (var styleProp in prefixMap) {
	    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
	      return prefixedEventNames[eventName] = prefixMap[styleProp];
	    }
	  }
	
	  return '';
	}
	
	module.exports = getVendorPrefixedEventName;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var DOMPropertyOperations = __webpack_require__(109);
	var LinkedValueUtils = __webpack_require__(115);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactUpdates = __webpack_require__(61);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	var didWarnValueLink = false;
	var didWarnCheckedLink = false;
	var didWarnValueDefaultValue = false;
	var didWarnCheckedDefaultChecked = false;
	var didWarnControlledToUncontrolled = false;
	var didWarnUncontrolledToControlled = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	function isControlled(props) {
	  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
	  return usesChecked ? props.checked != null : props.value != null;
	}
	
	/**
	 * Implements an <input> host component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getHostProps: function (inst, props) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var hostProps = _assign({
	      // Make sure we set .type before any other properties (setting .value
	      // before .type means .value is lost in IE11 and below)
	      type: undefined,
	      // Make sure we set .step before .value (setting .value before .step
	      // means .value is rounded on mount, based upon step precision)
	      step: undefined,
	      // Make sure we set .min & .max before .value (to ensure proper order
	      // in corner cases such as min or max deriving from value, e.g. Issue #7170)
	      min: undefined,
	      max: undefined
	    }, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	
	      var owner = inst._currentElement._owner;
	
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.checkedLink !== undefined && !didWarnCheckedLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnCheckedLink = true;
	      }
	      if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnCheckedDefaultChecked = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnValueDefaultValue = true;
	      }
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.checked != null ? props.checked : props.defaultChecked,
	      initialValue: props.value != null ? props.value : defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      controlled: isControlled(props)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    if (process.env.NODE_ENV !== 'production') {
	      var controlled = isControlled(props);
	      var owner = inst._currentElement._owner;
	
	      if (!inst._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnUncontrolledToControlled = true;
	      }
	      if (inst._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', owner && owner.getName() || 'A component', props.type) : void 0;
	        didWarnControlledToUncontrolled = true;
	      }
	    }
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      DOMPropertyOperations.setValueForProperty(ReactDOMComponentTree.getNodeFromInstance(inst), 'checked', checked || false);
	    }
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      if (value === 0 && node.value === '') {
	        node.value = '0';
	        // Note: IE9 reports a number inputs as 'text', so check props instead.
	      } else if (props.type === 'number') {
	        // Simulate `input.valueAsNumber`. IE9 does not support it
	        var valueAsNumber = parseFloat(node.value, 10) || 0;
	
	        if (
	        // eslint-disable-next-line
	        value != valueAsNumber ||
	        // eslint-disable-next-line
	        value == valueAsNumber && node.value != value) {
	          // Cast `value` to a string to ensure the value is set correctly. While
	          // browsers typically do this as necessary, jsdom doesn't.
	          node.value = '' + value;
	        }
	      } else if (node.value !== '' + value) {
	        // Cast `value` to a string to ensure the value is set correctly. While
	        // browsers typically do this as necessary, jsdom doesn't.
	        node.value = '' + value;
	      }
	    } else {
	      if (props.value == null && props.defaultValue != null) {
	        // In Chrome, assigning defaultValue to certain input types triggers input validation.
	        // For number inputs, the display value loses trailing decimal points. For email inputs,
	        // Chrome raises "The specified value <x> is not a valid email address".
	        //
	        // Here we check to see if the defaultValue has actually changed, avoiding these problems
	        // when the user is inputting text
	        //
	        // https://github.com/facebook/react/issues/7253
	        if (node.defaultValue !== '' + props.defaultValue) {
	          node.defaultValue = '' + props.defaultValue;
	        }
	      }
	      if (props.checked == null && props.defaultChecked != null) {
	        node.defaultChecked = !!props.defaultChecked;
	      }
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	
	    // Detach value from defaultValue. We won't do anything if we're working on
	    // submit or reset inputs as those values & defaultValues are linked. They
	    // are not resetable nodes so this operation doesn't matter and actually
	    // removes browser-default values (eg "Submit Query") when no value is
	    // provided.
	
	    switch (props.type) {
	      case 'submit':
	      case 'reset':
	        break;
	      case 'color':
	      case 'date':
	      case 'datetime':
	      case 'datetime-local':
	      case 'month':
	      case 'time':
	      case 'week':
	        // This fixes the no-show issue on iOS Safari and Android Chrome:
	        // https://github.com/facebook/react/issues/7233
	        node.value = '';
	        node.value = node.defaultValue;
	        break;
	      default:
	        node.value = node.value;
	        break;
	    }
	
	    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
	    // this is needed to work around a chrome bug where setting defaultChecked
	    // will sometimes influence the value of checked (even after detachment).
	    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
	    // We need to temporarily unset name to avoid disrupting radio button groups.
	    var name = node.name;
	    if (name !== '') {
	      node.name = '';
	    }
	    node.defaultChecked = !node.defaultChecked;
	    node.defaultChecked = !node.defaultChecked;
	    if (name !== '') {
	      node.name = name;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactDOMComponentTree.getNodeFromInstance(this);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React radio buttons with non-React ones.
	      var otherInstance = ReactDOMComponentTree.getInstanceFromNode(otherNode);
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : _prodInvariant('90') : void 0;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactPropTypesSecret = __webpack_require__(116);
	var propTypesFactory = __webpack_require__(29);
	
	var React = __webpack_require__(2);
	var PropTypes = propTypesFactory(React.isValidElement);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	var hasReadOnlyValue = {
	  button: true,
	  checkbox: true,
	  image: true,
	  hidden: true,
	  radio: true,
	  reset: true,
	  submit: true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use checkedLink, you probably don\'t want to use valueLink and vice versa.') : _prodInvariant('87') : void 0;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want to use value or onChange, you probably don\'t want to use valueLink.') : _prodInvariant('88') : void 0;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. If you want to use checked or onChange, you probably don\'t want to use checkedLink') : _prodInvariant('89') : void 0;
	}
	
	var propTypes = {
	  value: function (props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function (props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: PropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function (tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, 'prop', null, ReactPropTypesSecret);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : void 0;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function (inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function (inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function (inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 116 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactDOMSelect = __webpack_require__(118);
	
	var warning = __webpack_require__(8);
	var didWarnInvalidOptionChildren = false;
	
	function flattenChildren(children) {
	  var content = '';
	
	  // Flatten children and warn if they aren't strings or numbers;
	  // invalid types are ignored.
	  React.Children.forEach(children, function (child) {
	    if (child == null) {
	      return;
	    }
	    if (typeof child === 'string' || typeof child === 'number') {
	      content += child;
	    } else if (!didWarnInvalidOptionChildren) {
	      didWarnInvalidOptionChildren = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : void 0;
	    }
	  });
	
	  return content;
	}
	
	/**
	 * Implements an <option> host component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function (inst, props, hostParent) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : void 0;
	    }
	
	    // Look up whether this option is 'selected'
	    var selectValue = null;
	    if (hostParent != null) {
	      var selectParent = hostParent;
	
	      if (selectParent._tag === 'optgroup') {
	        selectParent = selectParent._hostParent;
	      }
	
	      if (selectParent != null && selectParent._tag === 'select') {
	        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
	      }
	    }
	
	    // If the value is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      var value;
	      if (props.value != null) {
	        value = props.value + '';
	      } else {
	        value = flattenChildren(props.children);
	      }
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  postMountWrapper: function (inst) {
	    // value="" should make a value attribute (#6219)
	    var props = inst._currentElement.props;
	    if (props.value != null) {
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      node.setAttribute('value', props.value);
	    }
	  },
	
	  getHostProps: function (inst, props) {
	    var hostProps = _assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      hostProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = flattenChildren(props.children);
	
	    if (content) {
	      hostProps.children = content;
	    }
	
	    return hostProps;
	  }
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(115);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactUpdates = __webpack_require__(61);
	
	var warning = __webpack_require__(8);
	
	var didWarnValueLink = false;
	var didWarnValueDefaultValue = false;
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  if (props.valueLink !== undefined && !didWarnValueLink) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.') : void 0;
	    didWarnValueLink = true;
	  }
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    var isArray = Array.isArray(props[propName]);
	    if (props.multiple && !isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    } else if (!props.multiple && isArray) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : void 0;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactDOMComponentTree.getNodeFromInstance(inst).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> host component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  getHostProps: function (inst, props) {
	    return _assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	
	    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	      didWarnValueDefaultValue = true;
	    }
	  },
	
	  getSelectValueContext: function (inst) {
	    // ReactDOMOption looks at this initial value so the initial generated
	    // markup has correct `selected` attributes
	    return inst._wrapperState.initialValue;
	  },
	
	  postUpdateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // this value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  if (this._rootNodeID) {
	    this._wrapperState.pendingUpdate = true;
	  }
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var LinkedValueUtils = __webpack_require__(115);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactUpdates = __webpack_require__(61);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	var didWarnValueLink = false;
	var didWarnValDefaultVal = false;
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> host component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getHostProps: function (inst, props) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : _prodInvariant('91') : void 0;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.  We could add a check in setTextContent
	    // to only set the value if/when the value differs from the node value (which would
	    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
	    // The value can be a boolean or object so that's why it's forced to be a string.
	    var hostProps = _assign({}, props, {
	      value: undefined,
	      defaultValue: undefined,
	      children: '' + inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return hostProps;
	  },
	
	  mountWrapper: function (inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	      if (props.valueLink !== undefined && !didWarnValueLink) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.') : void 0;
	        didWarnValueLink = true;
	      }
	      if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components') : void 0;
	        didWarnValDefaultVal = true;
	      }
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    var initialValue = value;
	
	    // Only bother fetching default value if we're going to use it
	    if (value == null) {
	      var defaultValue = props.defaultValue;
	      // TODO (yungsters): Remove support for children content in <textarea>.
	      var children = props.children;
	      if (children != null) {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : void 0;
	        }
	        !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : _prodInvariant('92') : void 0;
	        if (Array.isArray(children)) {
	          !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : _prodInvariant('93') : void 0;
	          children = children[0];
	        }
	
	        defaultValue = '' + children;
	      }
	      if (defaultValue == null) {
	        defaultValue = '';
	      }
	      initialValue = defaultValue;
	    }
	
	    inst._wrapperState = {
	      initialValue: '' + initialValue,
	      listeners: null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function (inst) {
	    var props = inst._currentElement.props;
	
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      var newValue = '' + value;
	
	      // To avoid side effects (such as losing text selection), only set value if changed
	      if (newValue !== node.value) {
	        node.value = newValue;
	      }
	      if (props.defaultValue == null) {
	        node.defaultValue = newValue;
	      }
	    }
	    if (props.defaultValue != null) {
	      node.defaultValue = props.defaultValue;
	    }
	  },
	
	  postMountWrapper: function (inst) {
	    // This is in postMount because we need access to the DOM node, which is not
	    // available until after the component has mounted.
	    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	    var textContent = node.textContent;
	
	    // Only set node.value if textContent is equal to the expected
	    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
	    // will populate textContent as well.
	    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
	    if (textContent === inst._wrapperState.initialValue) {
	      node.value = textContent;
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactComponentEnvironment = __webpack_require__(121);
	var ReactInstanceMap = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(67);
	
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactReconciler = __webpack_require__(64);
	var ReactChildReconciler = __webpack_require__(123);
	
	var emptyFunction = __webpack_require__(9);
	var flattenChildren = __webpack_require__(138);
	var invariant = __webpack_require__(12);
	
	/**
	 * Make an update for markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function makeInsertMarkup(markup, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'INSERT_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for moving an existing element to another index.
	 *
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function makeMove(child, afterNode, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'MOVE_EXISTING',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: ReactReconciler.getHostNode(child),
	    toIndex: toIndex,
	    afterNode: afterNode
	  };
	}
	
	/**
	 * Make an update for removing an element at an index.
	 *
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function makeRemove(child, node) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'REMOVE_NODE',
	    content: null,
	    fromIndex: child._mountIndex,
	    fromNode: node,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the markup of a node.
	 *
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function makeSetMarkup(markup) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'SET_MARKUP',
	    content: markup,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Make an update for setting the text content.
	 *
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function makeTextContent(textContent) {
	  // NOTE: Null values reduce hidden classes.
	  return {
	    type: 'TEXT_CONTENT',
	    content: textContent,
	    fromIndex: null,
	    fromNode: null,
	    toIndex: null,
	    afterNode: null
	  };
	}
	
	/**
	 * Push an update, if any, onto the queue. Creates a new queue if none is
	 * passed and always returns the queue. Mutative.
	 */
	function enqueue(queue, update) {
	  if (update) {
	    queue = queue || [];
	    queue.push(update);
	  }
	  return queue;
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue(inst, updateQueue) {
	  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
	}
	
	var setChildrenForInstrumentation = emptyFunction;
	if (process.env.NODE_ENV !== 'production') {
	  var getDebugID = function (inst) {
	    if (!inst._debugID) {
	      // Check for ART-like instances. TODO: This is silly/gross.
	      var internal;
	      if (internal = ReactInstanceMap.get(inst)) {
	        inst = internal;
	      }
	    }
	    return inst._debugID;
	  };
	  setChildrenForInstrumentation = function (children) {
	    var debugID = getDebugID(this);
	    // TODO: React Native empty components are also multichild.
	    // This means they still get into this method but don't have _debugID.
	    if (debugID !== 0) {
	      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
	        return children[key]._debugID;
	      }) : []);
	    }
	  };
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        var selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
	      var nextChildren;
	      var selfDebugID = 0;
	      if (process.env.NODE_ENV !== 'production') {
	        selfDebugID = getDebugID(this);
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          return nextChildren;
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
	      ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
	      return nextChildren;
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function (nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          var selfDebugID = 0;
	          if (process.env.NODE_ENV !== 'production') {
	            selfDebugID = getDebugID(this);
	          }
	          var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, children);
	      }
	
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function (nextContent) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      // Set new text content.
	      var updates = [makeTextContent(nextContent)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function (nextMarkup) {
	      var prevChildren = this._renderedChildren;
	      // Remove any rendered children.
	      ReactChildReconciler.unmountChildren(prevChildren, false);
	      for (var name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name)) {
	           true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updateTextContent called on non-empty component.') : _prodInvariant('118') : void 0;
	        }
	      }
	      var updates = [makeSetMarkup(nextMarkup)];
	      processQueue(this, updates);
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      // Hook used by React ART
	      this._updateChildren(nextNestedChildrenElements, transaction, context);
	    },
	
	    /**
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function (nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var removedNodes = {};
	      var mountImages = [];
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var updates = null;
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var nextIndex = 0;
	      var lastIndex = 0;
	      // `nextMountIndex` will increment for each newly mounted child.
	      var nextMountIndex = 0;
	      var lastPlacedNode = null;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            // The `removedNodes` loop below will actually remove the child.
	          }
	          // The child must be instantiated before it's mounted.
	          updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
	          nextMountIndex++;
	        }
	        nextIndex++;
	        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
	      }
	      // Remove children that are no longer present.
	      for (name in removedNodes) {
	        if (removedNodes.hasOwnProperty(name)) {
	          updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
	        }
	      }
	      if (updates) {
	        processQueue(this, updates);
	      }
	      this._renderedChildren = nextChildren;
	
	      if (process.env.NODE_ENV !== 'production') {
	        setChildrenForInstrumentation.call(this, nextChildren);
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted. It does not actually perform any
	     * backend operations.
	     *
	     * @internal
	     */
	    unmountChildren: function (safely) {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren, safely);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function (child, afterNode, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        return makeMove(child, afterNode, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function (child, afterNode, mountImage) {
	      return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function (child, node) {
	      return makeRemove(child, node);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildAtIndex: function (child, mountImage, afterNode, index, transaction, context) {
	      child._mountIndex = index;
	      return this.createChild(child, afterNode, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function (child, node) {
	      var update = this.removeChild(child, node);
	      child._mountIndex = null;
	      return update;
	    }
	  }
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkup: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function (environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : _prodInvariant('104') : void 0;
	      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 122 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function (key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function (key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function (key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function (key, value) {
	    key._reactInternalInstance = value;
	  }
	};
	
	module.exports = ReactInstanceMap;

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(64);
	
	var instantiateReactComponent = __webpack_require__(124);
	var KeyEscapeUtils = __webpack_require__(134);
	var shouldUpdateReactComponent = __webpack_require__(130);
	var traverseAllChildren = __webpack_require__(135);
	var warning = __webpack_require__(8);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(24);
	}
	
	function instantiateChild(childInstances, child, name, selfDebugID) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    if (!ReactComponentTreeHook) {
	      ReactComponentTreeHook = __webpack_require__(24);
	    }
	    if (!keyUnique) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	    }
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, true);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function (nestedChildNodes, transaction, context, selfDebugID) // 0 in production and for roots
	  {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	
	    if (process.env.NODE_ENV !== 'production') {
	      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
	        return instantiateChild(childInsts, child, name, selfDebugID);
	      }, childInstances);
	    } else {
	      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    }
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function (prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) // 0 in production and for roots
	  {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return;
	    }
	    var name;
	    var prevChild;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	          ReactReconciler.unmountComponent(prevChild, false);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, true);
	        nextChildren[name] = nextChildInstance;
	        // Creating mount image now ensures refs are resolved in right order
	        // (see https://github.com/facebook/react/pull/7101 for explanation).
	        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
	        mountImages.push(nextChildMountImage);
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        prevChild = prevChildren[name];
	        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
	        ReactReconciler.unmountComponent(prevChild, false);
	      }
	    }
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function (renderedChildren, safely) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild, safely);
	      }
	    }
	  }
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var ReactCompositeComponent = __webpack_require__(125);
	var ReactEmptyComponent = __webpack_require__(131);
	var ReactHostComponent = __webpack_require__(132);
	
	var getNextDebugID = __webpack_require__(133);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function (element) {
	  this.construct(element);
	};
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @param {boolean} shouldHaveDebugID
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node, shouldHaveDebugID) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = ReactEmptyComponent.create(instantiateReactComponent);
	  } else if (typeof node === 'object') {
	    var element = node;
	    var type = element.type;
	    if (typeof type !== 'function' && typeof type !== 'string') {
	      var info = '';
	      if (process.env.NODE_ENV !== 'production') {
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + "it's defined in.";
	        }
	      }
	      info += getDeclarationErrorAddendum(element._owner);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info) : _prodInvariant('130', type == null ? type : typeof type, info) : void 0;
	    }
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactHostComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	
	      // We renamed this. Allow the old name for compat. :(
	      if (!instance.getHostNode) {
	        instance.getHostNode = instance.getNativeNode;
	      }
	    } else {
	      instance = new ReactCompositeComponentWrapper(element);
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactHostComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node) : _prodInvariant('131', typeof node) : void 0;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : void 0;
	  }
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	_assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var React = __webpack_require__(2);
	var ReactComponentEnvironment = __webpack_require__(121);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactErrorUtils = __webpack_require__(50);
	var ReactInstanceMap = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(67);
	var ReactNodeTypes = __webpack_require__(126);
	var ReactReconciler = __webpack_require__(64);
	
	if (process.env.NODE_ENV !== 'production') {
	  var checkReactTypeSpec = __webpack_require__(127);
	}
	
	var emptyObject = __webpack_require__(11);
	var invariant = __webpack_require__(12);
	var shallowEqual = __webpack_require__(129);
	var shouldUpdateReactComponent = __webpack_require__(130);
	var warning = __webpack_require__(8);
	
	var CompositeTypes = {
	  ImpureClass: 0,
	  PureClass: 1,
	  StatelessFunctional: 2
	};
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  var element = Component(this.props, this.context, this.updater);
	  warnIfInvalidElement(Component, element);
	  return element;
	};
	
	function warnIfInvalidElement(Component, element) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : void 0;
	    process.env.NODE_ENV !== 'production' ? warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component') : void 0;
	  }
	}
	
	function shouldConstruct(Component) {
	  return !!(Component.prototype && Component.prototype.isReactComponent);
	}
	
	function isPureComponent(Component) {
	  return !!(Component.prototype && Component.prototype.isPureReactComponent);
	}
	
	// Separated into a function to contain deoptimizations caused by try/finally.
	function measureLifeCyclePerf(fn, debugID, timerType) {
	  if (debugID === 0) {
	    // Top-level wrappers (see ReactMount) and empty components (see
	    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
	    // Both are implementation details that should go away in the future.
	    return fn();
	  }
	
	  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
	  try {
	    return fn();
	  } finally {
	    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
	  }
	}
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponent = {
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function (element) {
	    this._currentElement = element;
	    this._rootNodeID = 0;
	    this._compositeType = null;
	    this._instance = null;
	    this._hostParent = null;
	    this._hostContainerInfo = null;
	
	    // See ReactUpdateQueue
	    this._updateBatchNumber = null;
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedNodeType = null;
	    this._renderedComponent = null;
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	
	    // ComponentWillUnmount shall only be called once
	    this._calledComponentWillUnmount = false;
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._warnedAboutRefsInRender = false;
	    }
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {?object} hostParent
	   * @param {?object} hostContainerInfo
	   * @param {?object} context
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var _this = this;
	
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var publicProps = this._currentElement.props;
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    var updateQueue = transaction.getUpdateQueue();
	
	    // Initialize the public class
	    var doConstruct = shouldConstruct(Component);
	    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
	    var renderedElement;
	
	    // Support functional components
	    if (!doConstruct && (inst == null || inst.render == null)) {
	      renderedElement = inst;
	      warnIfInvalidElement(Component, renderedElement);
	      !(inst === null || inst === false || React.isValidElement(inst)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component') : _prodInvariant('105', Component.displayName || Component.name || 'Component') : void 0;
	      inst = new StatelessComponent(Component);
	      this._compositeType = CompositeTypes.StatelessFunctional;
	    } else {
	      if (isPureComponent(Component)) {
	        this._compositeType = CompositeTypes.PureClass;
	      } else {
	        this._compositeType = CompositeTypes.ImpureClass;
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component') : void 0;
	      }
	
	      var propsMutated = inst.props !== publicProps;
	      var componentName = Component.displayName || Component.name || 'Component';
	
	      process.env.NODE_ENV !== 'production' ? warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", componentName, componentName) : void 0;
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = updateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : void 0;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : _prodInvariant('106', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    var markup;
	    if (inst.unstable_handleError) {
	      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } else {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	
	    if (inst.componentDidMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(function () {
	            return inst.componentDidMount();
	          }, _this._debugID, 'componentDidMount');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	      }
	    }
	
	    return markup;
	  },
	
	  _constructComponent: function (doConstruct, publicProps, publicContext, updateQueue) {
	    if (process.env.NODE_ENV !== 'production' && !doConstruct) {
	      ReactCurrentOwner.current = this;
	      try {
	        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
	    }
	  },
	
	  _constructComponentWithoutOwner: function (doConstruct, publicProps, publicContext, updateQueue) {
	    var Component = this._currentElement.type;
	
	    if (doConstruct) {
	      if (process.env.NODE_ENV !== 'production') {
	        return measureLifeCyclePerf(function () {
	          return new Component(publicProps, publicContext, updateQueue);
	        }, this._debugID, 'ctor');
	      } else {
	        return new Component(publicProps, publicContext, updateQueue);
	      }
	    }
	
	    // This can still be an instance in case of factory components
	    // but we'll count this as time spent rendering as the more common case.
	    if (process.env.NODE_ENV !== 'production') {
	      return measureLifeCyclePerf(function () {
	        return Component(publicProps, publicContext, updateQueue);
	      }, this._debugID, 'render');
	    } else {
	      return Component(publicProps, publicContext, updateQueue);
	    }
	  },
	
	  performInitialMountWithErrorHandling: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var markup;
	    var checkpoint = transaction.checkpoint();
	    try {
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    } catch (e) {
	      // Roll back to checkpoint, handle error (which may add items to the transaction), and take a new checkpoint
	      transaction.rollback(checkpoint);
	      this._instance.unstable_handleError(e);
	      if (this._pendingStateQueue) {
	        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
	      }
	      checkpoint = transaction.checkpoint();
	
	      this._renderedComponent.unmountComponent(true);
	      transaction.rollback(checkpoint);
	
	      // Try again - we've informed the component about the error, so they can render an error message this time.
	      // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
	      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
	    }
	    return markup;
	  },
	
	  performInitialMount: function (renderedElement, hostParent, hostContainerInfo, transaction, context) {
	    var inst = this._instance;
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (inst.componentWillMount) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillMount();
	        }, debugID, 'componentWillMount');
	      } else {
	        inst.componentWillMount();
	      }
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    var nodeType = ReactNodeTypes.getType(renderedElement);
	    this._renderedNodeType = nodeType;
	    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	    );
	    this._renderedComponent = child;
	
	    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (debugID !== 0) {
	        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	      }
	    }
	
	    return markup;
	  },
	
	  getHostNode: function () {
	    return ReactReconciler.getHostNode(this._renderedComponent);
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function (safely) {
	    if (!this._renderedComponent) {
	      return;
	    }
	
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
	      inst._calledComponentWillUnmount = true;
	
	      if (safely) {
	        var name = this.getName() + '.componentWillUnmount()';
	        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          measureLifeCyclePerf(function () {
	            return inst.componentWillUnmount();
	          }, this._debugID, 'componentWillUnmount');
	        } else {
	          inst.componentWillUnmount();
	        }
	      }
	    }
	
	    if (this._renderedComponent) {
	      ReactReconciler.unmountComponent(this._renderedComponent, safely);
	      this._renderedNodeType = null;
	      this._renderedComponent = null;
	      this._instance = null;
	    }
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = 0;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function (context) {
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    var maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function (context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function (currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext;
	
	    if (inst.getChildContext) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
	        try {
	          childContext = inst.getChildContext();
	        } finally {
	          ReactInstrumentation.debugTool.onEndProcessingChildContext();
	        }
	      } else {
	        childContext = inst.getChildContext();
	      }
	    }
	
	    if (childContext) {
	      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
	      }
	      return _assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Assert that the context types are valid
	   *
	   * @param {object} typeSpecs Map of context field to a ReactPropType
	   * @param {object} values Runtime values that need to be type-checked
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkContextTypes: function (typeSpecs, values, location) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
	    }
	  },
	
	  receiveComponent: function (nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function (transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
	    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    } else {
	      this._updateBatchNumber = null;
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function (transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Attempted to update component `%s` that has already been unmounted (or failed to mount).', this.getName() || 'ReactCompositeComponent') : _prodInvariant('136', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    var willReceive = false;
	    var nextContext;
	
	    // Determine if the context has changed or not
	    if (this._context === nextUnmaskedContext) {
	      nextContext = inst.context;
	    } else {
	      nextContext = this._processContext(nextUnmaskedContext);
	      willReceive = true;
	    }
	
	    var prevProps = prevParentElement.props;
	    var nextProps = nextParentElement.props;
	
	    // Not a simple state update but a props update
	    if (prevParentElement !== nextParentElement) {
	      willReceive = true;
	    }
	
	    // An update here will schedule an update but immediately set
	    // _pendingStateQueue which will ensure that any state updates gets
	    // immediately reconciled instead of waiting for the next batch.
	    if (willReceive && inst.componentWillReceiveProps) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillReceiveProps(nextProps, nextContext);
	        }, this._debugID, 'componentWillReceiveProps');
	      } else {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	    var shouldUpdate = true;
	
	    if (!this._pendingForceUpdate) {
	      if (inst.shouldComponentUpdate) {
	        if (process.env.NODE_ENV !== 'production') {
	          shouldUpdate = measureLifeCyclePerf(function () {
	            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	          }, this._debugID, 'shouldComponentUpdate');
	        } else {
	          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	        }
	      } else {
	        if (this._compositeType === CompositeTypes.PureClass) {
	          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
	        }
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : void 0;
	    }
	
	    this._updateBatchNumber = null;
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function (props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = _assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      _assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function (nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var _this2 = this;
	
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        measureLifeCyclePerf(function () {
	          return inst.componentWillUpdate(nextProps, nextState, nextContext);
	        }, this._debugID, 'componentWillUpdate');
	      } else {
	        inst.componentWillUpdate(nextProps, nextState, nextContext);
	      }
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      if (process.env.NODE_ENV !== 'production') {
	        transaction.getReactMountReady().enqueue(function () {
	          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
	        });
	      } else {
	        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	      }
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function (transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	
	    var debugID = 0;
	    if (process.env.NODE_ENV !== 'production') {
	      debugID = this._debugID;
	    }
	
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
	      ReactReconciler.unmountComponent(prevComponentInstance, false);
	
	      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
	      this._renderedNodeType = nodeType;
	      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */
	      );
	      this._renderedComponent = child;
	
	      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (debugID !== 0) {
	          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
	          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
	        }
	      }
	
	      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
	    }
	  },
	
	  /**
	   * Overridden in shallow rendering.
	   *
	   * @protected
	   */
	  _replaceNodeWithMarkup: function (oldHostNode, nextMarkup, prevInstance) {
	    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function () {
	    var inst = this._instance;
	    var renderedElement;
	
	    if (process.env.NODE_ENV !== 'production') {
	      renderedElement = measureLifeCyclePerf(function () {
	        return inst.render();
	      }, this._debugID, 'render');
	    } else {
	      renderedElement = inst.render();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (renderedElement === undefined && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedElement = null;
	      }
	    }
	
	    return renderedElement;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function () {
	    var renderedElement;
	    if (process.env.NODE_ENV !== 'production' || this._compositeType !== CompositeTypes.StatelessFunctional) {
	      ReactCurrentOwner.current = this;
	      try {
	        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	      } finally {
	        ReactCurrentOwner.current = null;
	      }
	    } else {
	      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedElement === null || renderedElement === false || React.isValidElement(renderedElement)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid React element (or null) must be returned. You may have returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : _prodInvariant('109', this.getName() || 'ReactCompositeComponent') : void 0;
	
	    return renderedElement;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function (ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : _prodInvariant('110') : void 0;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : void 0;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function (ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function () {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function () {
	    var inst = this._instance;
	    if (this._compositeType === CompositeTypes.StatelessFunctional) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var React = __webpack_require__(2);
	
	var invariant = __webpack_require__(12);
	
	var ReactNodeTypes = {
	  HOST: 0,
	  COMPOSITE: 1,
	  EMPTY: 2,
	
	  getType: function (node) {
	    if (node === null || node === false) {
	      return ReactNodeTypes.EMPTY;
	    } else if (React.isValidElement(node)) {
	      if (typeof node.type === 'function') {
	        return ReactNodeTypes.COMPOSITE;
	      } else {
	        return ReactNodeTypes.HOST;
	      }
	    }
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unexpected node: %s', node) : _prodInvariant('26', node) : void 0;
	  }
	};
	
	module.exports = ReactNodeTypes;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactPropTypeLocationNames = __webpack_require__(128);
	var ReactPropTypesSecret = __webpack_require__(116);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(24);
	}
	
	var loggedTypeFailures = {};
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var componentStackInfo = '';
	
	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(24);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }
	
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}
	
	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 129 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ }),
/* 130 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement;
	  var nextType = typeof nextElement;
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var emptyComponentFactory;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponentFactory: function (factory) {
	    emptyComponentFactory = factory;
	  }
	};
	
	var ReactEmptyComponent = {
	  create: function (instantiate) {
	    return emptyComponentFactory(instantiate);
	  }
	};
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	var genericComponentClass = null;
	var textComponentClass = null;
	
	var ReactHostComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function (componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function (componentClass) {
	    textComponentClass = componentClass;
	  }
	};
	
	/**
	 * Get a host internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : _prodInvariant('111', element.type) : void 0;
	  return new genericComponentClass(element);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactHostComponent = {
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactHostComponentInjection
	};
	
	module.exports = ReactHostComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 133 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var nextDebugID = 1;
	
	function getNextDebugID() {
	  return nextDebugID++;
	}
	
	module.exports = getNextDebugID;

/***/ }),
/* 134 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */
	
	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });
	
	  return '$' + escapedString;
	}
	
	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);
	
	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}
	
	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};
	
	module.exports = KeyEscapeUtils;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactCurrentOwner = __webpack_require__(17);
	var REACT_ELEMENT_TYPE = __webpack_require__(136);
	
	var getIteratorFn = __webpack_require__(137);
	var invariant = __webpack_require__(12);
	var KeyEscapeUtils = __webpack_require__(134);
	var warning = __webpack_require__(8);
	
	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';
	
	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var didWarnAboutMaps = false;
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = " It looks like you're using an element created by a different " + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 136 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 137 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var KeyEscapeUtils = __webpack_require__(134);
	var traverseAllChildren = __webpack_require__(135);
	var warning = __webpack_require__(8);
	
	var ReactComponentTreeHook;
	
	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(24);
	}
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 * @param {number=} selfDebugID Optional debugID of the current internal instance.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
	  // We found a component instance.
	  if (traverseContext && typeof traverseContext === 'object') {
	    var result = traverseContext;
	    var keyUnique = result[name] === undefined;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!ReactComponentTreeHook) {
	        ReactComponentTreeHook = __webpack_require__(24);
	      }
	      if (!keyUnique) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID)) : void 0;
	      }
	    }
	    if (keyUnique && child != null) {
	      result[name] = child;
	    }
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children, selfDebugID) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	
	  if (process.env.NODE_ENV !== 'production') {
	    traverseAllChildren(children, function (traverseContext, child, name) {
	      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
	    }, result);
	  } else {
	    traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  }
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var PooledClass = __webpack_require__(55);
	var Transaction = __webpack_require__(73);
	var ReactInstrumentation = __webpack_require__(67);
	var ReactServerUpdateQueue = __webpack_require__(140);
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	var noopCallbackQueue = {
	  enqueue: function () {}
	};
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.useCreateElement = false;
	  this.updateQueue = new ReactServerUpdateQueue(this);
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return noopCallbackQueue;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return this.updateQueue;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {},
	
	  checkpoint: function () {},
	
	  rollback: function () {}
	};
	
	_assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ReactUpdateQueue = __webpack_require__(141);
	
	var warning = __webpack_require__(8);
	
	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}
	
	/**
	 * This is the update queue used for server rendering.
	 * It delegates to ReactUpdateQueue while server rendering is in progress and
	 * switches to ReactNoopUpdateQueue after the transaction has completed.
	 * @class ReactServerUpdateQueue
	 * @param {Transaction} transaction
	 */
	
	var ReactServerUpdateQueue = function () {
	  function ReactServerUpdateQueue(transaction) {
	    _classCallCheck(this, ReactServerUpdateQueue);
	
	    this.transaction = transaction;
	  }
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	
	
	  ReactServerUpdateQueue.prototype.isMounted = function isMounted(publicInstance) {
	    return false;
	  };
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueCallback = function enqueueCallback(publicInstance, callback, callerName) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
	    }
	  };
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
	    } else {
	      warnNoop(publicInstance, 'forceUpdate');
	    }
	  };
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} completeState Next state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
	    } else {
	      warnNoop(publicInstance, 'replaceState');
	    }
	  };
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object|function} partialState Next partial state to be merged with state.
	   * @internal
	   */
	
	
	  ReactServerUpdateQueue.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState) {
	    if (this.transaction.isInTransaction()) {
	      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
	    } else {
	      warnNoop(publicInstance, 'setState');
	    }
	  };
	
	  return ReactServerUpdateQueue;
	}();
	
	module.exports = ReactServerUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactInstanceMap = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(67);
	var ReactUpdates = __webpack_require__(61);
	
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function formatUnexpectedArgument(arg) {
	  var type = typeof arg;
	  if (type !== 'object') {
	    return type;
	  }
	  var displayName = arg.constructor && arg.constructor.name || type;
	  var keys = Object.keys(arg);
	  if (keys.length > 0 && keys.length < 20) {
	    return displayName + ' (keys: ' + keys.join(', ') + ')';
	  }
	  return displayName;
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var ctor = publicInstance.constructor;
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass') : void 0;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + "within `render` or another component's constructor). Render methods " + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName) : void 0;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @param {string} callerName Name of the calling function in the public API.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback, callerName) {
	    ReactUpdateQueue.validateCallback(callback, callerName);
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function (internalInstance, callback) {
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState, callback) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    // Future-proof 15.5
	    if (callback !== undefined && callback !== null) {
	      ReactUpdateQueue.validateCallback(callback, 'replaceState');
	      if (internalInstance._pendingCallbacks) {
	        internalInstance._pendingCallbacks.push(callback);
	      } else {
	        internalInstance._pendingCallbacks = [callback];
	      }
	    }
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    if (process.env.NODE_ENV !== 'production') {
	      ReactInstrumentation.debugTool.onSetState();
	      process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : void 0;
	    }
	
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueElementInternal: function (internalInstance, nextElement, nextContext) {
	    internalInstance._pendingElement = nextElement;
	    // TODO: introduce _pendingContext instead of setting it directly.
	    internalInstance._context = nextContext;
	    enqueueUpdate(internalInstance);
	  },
	
	  validateCallback: function (callback, callerName) {
	    !(!callback || typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.', callerName, formatUnexpectedArgument(callback)) : _prodInvariant('122', callerName, formatUnexpectedArgument(callback)) : void 0;
	  }
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var emptyFunction = __webpack_require__(9);
	var warning = __webpack_require__(8);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    current: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function (oldInfo, tag, instance) {
	    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.current = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function (tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	      case '#document':
	        return tag === 'html';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'body':
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'html':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	      case 'pre':
	      case 'listing':
	      case 'table':
	      case 'hr':
	      case 'xmp':
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function (instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    do {
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function (childTag, childText, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    if (childText != null) {
	      process.env.NODE_ENV !== 'production' ? warning(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
	      childTag = '#text';
	    }
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      var tagDisplayName = childTag;
	      var whitespaceInfo = '';
	      if (childTag === '#text') {
	        if (/\S/.test(childText)) {
	          tagDisplayName = 'Text nodes';
	        } else {
	          tagDisplayName = 'Whitespace text nodes';
	          whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
	        }
	      } else {
	        tagDisplayName = '<' + childTag + '>';
	      }
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' + 'See %s.%s', tagDisplayName, ancestorTag, whitespaceInfo, ownerInfo, info) : void 0;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>. See %s.', tagDisplayName, ancestorTag, ownerInfo) : void 0;
	      }
	    }
	  };
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.current;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var DOMLazyTree = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(39);
	
	var ReactDOMEmptyComponent = function (instantiate) {
	  // ReactCompositeComponent uses this:
	  this._currentElement = null;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	  this._hostContainerInfo = null;
	  this._domID = 0;
	};
	_assign(ReactDOMEmptyComponent.prototype, {
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    var domID = hostContainerInfo._idCounter++;
	    this._domID = domID;
	    this._hostParent = hostParent;
	    this._hostContainerInfo = hostContainerInfo;
	
	    var nodeValue = ' react-empty: ' + this._domID + ' ';
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var node = ownerDocument.createComment(nodeValue);
	      ReactDOMComponentTree.precacheNode(this, node);
	      return DOMLazyTree(node);
	    } else {
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd insert a comment node, but since this is a situation
	        // where React won't take over (static pages), we can simply return
	        // nothing.
	        return '';
	      }
	      return '<!--' + nodeValue + '-->';
	    }
	  },
	  receiveComponent: function () {},
	  getHostNode: function () {
	    return ReactDOMComponentTree.getNodeFromInstance(this);
	  },
	  unmountComponent: function () {
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMEmptyComponent;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var invariant = __webpack_require__(12);
	
	/**
	 * Return the lowest common ancestor of A and B, or null if they are in
	 * different trees.
	 */
	function getLowestCommonAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNodeFromInstance: Invalid argument.') : _prodInvariant('33') : void 0;
	
	  var depthA = 0;
	  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
	    depthA++;
	  }
	  var depthB = 0;
	  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
	    depthB++;
	  }
	
	  // If A is deeper, crawl up.
	  while (depthA - depthB > 0) {
	    instA = instA._hostParent;
	    depthA--;
	  }
	
	  // If B is deeper, crawl up.
	  while (depthB - depthA > 0) {
	    instB = instB._hostParent;
	    depthB--;
	  }
	
	  // Walk in lockstep until we find a match.
	  var depth = depthA;
	  while (depth--) {
	    if (instA === instB) {
	      return instA;
	    }
	    instA = instA._hostParent;
	    instB = instB._hostParent;
	  }
	  return null;
	}
	
	/**
	 * Return if A is an ancestor of B.
	 */
	function isAncestor(instA, instB) {
	  !('_hostNode' in instA) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	  !('_hostNode' in instB) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'isAncestor: Invalid argument.') : _prodInvariant('35') : void 0;
	
	  while (instB) {
	    if (instB === instA) {
	      return true;
	    }
	    instB = instB._hostParent;
	  }
	  return false;
	}
	
	/**
	 * Return the parent instance of the passed-in instance.
	 */
	function getParentInstance(inst) {
	  !('_hostNode' in inst) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getParentInstance: Invalid argument.') : _prodInvariant('36') : void 0;
	
	  return inst._hostParent;
	}
	
	/**
	 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	 */
	function traverseTwoPhase(inst, fn, arg) {
	  var path = [];
	  while (inst) {
	    path.push(inst);
	    inst = inst._hostParent;
	  }
	  var i;
	  for (i = path.length; i-- > 0;) {
	    fn(path[i], 'captured', arg);
	  }
	  for (i = 0; i < path.length; i++) {
	    fn(path[i], 'bubbled', arg);
	  }
	}
	
	/**
	 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	 * should would receive a `mouseEnter` or `mouseLeave` event.
	 *
	 * Does not invoke the callback on the nearest common ancestor because nothing
	 * "entered" or "left" that element.
	 */
	function traverseEnterLeave(from, to, fn, argFrom, argTo) {
	  var common = from && to ? getLowestCommonAncestor(from, to) : null;
	  var pathFrom = [];
	  while (from && from !== common) {
	    pathFrom.push(from);
	    from = from._hostParent;
	  }
	  var pathTo = [];
	  while (to && to !== common) {
	    pathTo.push(to);
	    to = to._hostParent;
	  }
	  var i;
	  for (i = 0; i < pathFrom.length; i++) {
	    fn(pathFrom[i], 'bubbled', argFrom);
	  }
	  for (i = pathTo.length; i-- > 0;) {
	    fn(pathTo[i], 'captured', argTo);
	  }
	}
	
	module.exports = {
	  isAncestor: isAncestor,
	  getLowestCommonAncestor: getLowestCommonAncestor,
	  getParentInstance: getParentInstance,
	  traverseTwoPhase: traverseTwoPhase,
	  traverseEnterLeave: traverseEnterLeave
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40),
	    _assign = __webpack_require__(4);
	
	var DOMChildrenOperations = __webpack_require__(86);
	var DOMLazyTree = __webpack_require__(87);
	var ReactDOMComponentTree = __webpack_require__(39);
	
	var escapeTextContentForBrowser = __webpack_require__(92);
	var invariant = __webpack_require__(12);
	var validateDOMNesting = __webpack_require__(142);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings between comment nodes so that they
	 * can undergo the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function (text) {
	  // TODO: This is really a ReactText (ReactNode), not a ReactElement
	  this._currentElement = text;
	  this._stringText = '' + text;
	  // ReactDOMComponentTree uses these:
	  this._hostNode = null;
	  this._hostParent = null;
	
	  // Properties
	  this._domID = 0;
	  this._mountIndex = 0;
	  this._closingComment = null;
	  this._commentNodes = null;
	};
	
	_assign(ReactDOMTextComponent.prototype, {
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function (transaction, hostParent, hostContainerInfo, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      var parentInfo;
	      if (hostParent != null) {
	        parentInfo = hostParent._ancestorInfo;
	      } else if (hostContainerInfo != null) {
	        parentInfo = hostContainerInfo._ancestorInfo;
	      }
	      if (parentInfo) {
	        // parentInfo should always be present except for the top-level
	        // component when server rendering
	        validateDOMNesting(null, this._stringText, this, parentInfo);
	      }
	    }
	
	    var domID = hostContainerInfo._idCounter++;
	    var openingValue = ' react-text: ' + domID + ' ';
	    var closingValue = ' /react-text ';
	    this._domID = domID;
	    this._hostParent = hostParent;
	    if (transaction.useCreateElement) {
	      var ownerDocument = hostContainerInfo._ownerDocument;
	      var openingComment = ownerDocument.createComment(openingValue);
	      var closingComment = ownerDocument.createComment(closingValue);
	      var lazyTree = DOMLazyTree(ownerDocument.createDocumentFragment());
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(openingComment));
	      if (this._stringText) {
	        DOMLazyTree.queueChild(lazyTree, DOMLazyTree(ownerDocument.createTextNode(this._stringText)));
	      }
	      DOMLazyTree.queueChild(lazyTree, DOMLazyTree(closingComment));
	      ReactDOMComponentTree.precacheNode(this, openingComment);
	      this._closingComment = closingComment;
	      return lazyTree;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this between comment nodes for the reasons stated
	        // above, but since this is a situation where React won't take over
	        // (static pages), we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<!--' + openingValue + '-->' + escapedText + '<!--' + closingValue + '-->';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function (nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var commentNodes = this.getHostNode();
	        DOMChildrenOperations.replaceDelimitedText(commentNodes[0], commentNodes[1], nextStringText);
	      }
	    }
	  },
	
	  getHostNode: function () {
	    var hostNode = this._commentNodes;
	    if (hostNode) {
	      return hostNode;
	    }
	    if (!this._closingComment) {
	      var openingComment = ReactDOMComponentTree.getNodeFromInstance(this);
	      var node = openingComment.nextSibling;
	      while (true) {
	        !(node != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Missing closing comment for text component %s', this._domID) : _prodInvariant('67', this._domID) : void 0;
	        if (node.nodeType === 8 && node.nodeValue === ' /react-text ') {
	          this._closingComment = node;
	          break;
	        }
	        node = node.nextSibling;
	      }
	    }
	    hostNode = [this._hostNode, this._closingComment];
	    this._commentNodes = hostNode;
	    return hostNode;
	  },
	
	  unmountComponent: function () {
	    this._closingComment = null;
	    this._commentNodes = null;
	    ReactDOMComponentTree.uncacheNode(this);
	  }
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var ReactUpdates = __webpack_require__(61);
	var Transaction = __webpack_require__(73);
	
	var emptyFunction = __webpack_require__(9);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function () {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	_assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function (callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      return callback(a, b, c, d, e);
	    } else {
	      return transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var EventListener = __webpack_require__(148);
	var ExecutionEnvironment = __webpack_require__(53);
	var PooledClass = __webpack_require__(55);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactUpdates = __webpack_require__(61);
	
	var getEventTarget = __webpack_require__(75);
	var getUnboundedScrollPosition = __webpack_require__(149);
	
	/**
	 * Find the deepest React component completely containing the root of the
	 * passed-in instance (for use when entire React trees are nested within each
	 * other). If React trees are not nested, returns null.
	 */
	function findParent(inst) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  while (inst._hostParent) {
	    inst = inst._hostParent;
	  }
	  var rootNode = ReactDOMComponentTree.getNodeFromInstance(inst);
	  var container = rootNode.parentNode;
	  return ReactDOMComponentTree.getClosestInstanceFromNode(container);
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	_assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function () {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  var nativeEventTarget = getEventTarget(bookKeeping.nativeEvent);
	  var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(nativeEventTarget);
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = targetInst;
	  do {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = ancestor && findParent(ancestor);
	  } while (ancestor);
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    targetInst = bookKeeping.ancestors[i];
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function (handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function (enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function () {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} element Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function (topLevelType, handlerBaseName, element) {
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function (refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function (topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var emptyFunction = __webpack_require__(9);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable.Window && scrollable instanceof scrollable.Window) {
	    return {
	      x: scrollable.pageXOffset || scrollable.document.documentElement.scrollLeft,
	      y: scrollable.pageYOffset || scrollable.document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(41);
	var EventPluginHub = __webpack_require__(47);
	var EventPluginUtils = __webpack_require__(49);
	var ReactComponentEnvironment = __webpack_require__(121);
	var ReactEmptyComponent = __webpack_require__(131);
	var ReactBrowserEventEmitter = __webpack_require__(111);
	var ReactHostComponent = __webpack_require__(132);
	var ReactUpdates = __webpack_require__(61);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventPluginUtils: EventPluginUtils.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  HostComponent: ReactHostComponent.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _assign = __webpack_require__(4);
	
	var CallbackQueue = __webpack_require__(62);
	var PooledClass = __webpack_require__(55);
	var ReactBrowserEventEmitter = __webpack_require__(111);
	var ReactInputSelection = __webpack_require__(152);
	var ReactInstrumentation = __webpack_require__(67);
	var Transaction = __webpack_require__(73);
	var ReactUpdateQueue = __webpack_require__(141);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function () {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function (previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function () {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function () {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	if (process.env.NODE_ENV !== 'production') {
	  TRANSACTION_WRAPPERS.push({
	    initialize: ReactInstrumentation.debugTool.onBeginFlush,
	    close: ReactInstrumentation.debugTool.onEndFlush
	  });
	}
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(useCreateElement) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactDOMTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function () {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function () {
	    return this.reactMountReady;
	  },
	
	  /**
	   * @return {object} The queue to collect React async events.
	   */
	  getUpdateQueue: function () {
	    return ReactUpdateQueue;
	  },
	
	  /**
	   * Save current transaction state -- if the return value from this method is
	   * passed to `rollback`, the transaction will be reset to that state.
	   */
	  checkpoint: function () {
	    // reactMountReady is the our only stateful wrapper
	    return this.reactMountReady.checkpoint();
	  },
	
	  rollback: function (checkpoint) {
	    this.reactMountReady.rollback(checkpoint);
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function () {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	_assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(153);
	
	var containsNode = __webpack_require__(155);
	var focusNode = __webpack_require__(100);
	var getActiveElement = __webpack_require__(158);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	  hasSelectionCapabilities: function (elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function () {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function (priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function (input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function (input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (end === undefined) {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(53);
	
	var getNodeForCharacterOffset = __webpack_require__(154);
	var getTextContentAccessor = __webpack_require__(56);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (offsets.end === undefined) {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programmatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ }),
/* 154 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	var isTextNode = __webpack_require__(156);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 */
	function containsNode(outerNode, innerNode) {
	  if (!outerNode || !innerNode) {
	    return false;
	  } else if (outerNode === innerNode) {
	    return true;
	  } else if (isTextNode(outerNode)) {
	    return false;
	  } else if (isTextNode(innerNode)) {
	    return containsNode(outerNode, innerNode.parentNode);
	  } else if ('contains' in outerNode) {
	    return outerNode.contains(innerNode);
	  } else if (outerNode.compareDocumentPosition) {
	    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	  } else {
	    return false;
	  }
	}
	
	module.exports = containsNode;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	var isNode = __webpack_require__(157);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ }),
/* 157 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	function isNode(object) {
	  var doc = object ? object.ownerDocument || object : document;
	  var defaultView = doc.defaultView || window;
	  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ }),
/* 158 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 *
	 * @param {?DOMDocument} doc Defaults to current document.
	 * @return {?DOMElement}
	 */
	function getActiveElement(doc) /*?DOMElement*/{
	  doc = doc || (typeof document !== 'undefined' ? document : undefined);
	  if (typeof doc === 'undefined') {
	    return null;
	  }
	  try {
	    return doc.activeElement || doc.body;
	  } catch (e) {
	    return doc.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ }),
/* 159 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	// We use attributes for everything SVG so let's avoid some duplication and run
	// code instead.
	// The following are all specified in the HTML config already so we exclude here.
	// - class (as className)
	// - color
	// - height
	// - id
	// - lang
	// - max
	// - media
	// - method
	// - min
	// - name
	// - style
	// - target
	// - type
	// - width
	var ATTRS = {
	  accentHeight: 'accent-height',
	  accumulate: 0,
	  additive: 0,
	  alignmentBaseline: 'alignment-baseline',
	  allowReorder: 'allowReorder',
	  alphabetic: 0,
	  amplitude: 0,
	  arabicForm: 'arabic-form',
	  ascent: 0,
	  attributeName: 'attributeName',
	  attributeType: 'attributeType',
	  autoReverse: 'autoReverse',
	  azimuth: 0,
	  baseFrequency: 'baseFrequency',
	  baseProfile: 'baseProfile',
	  baselineShift: 'baseline-shift',
	  bbox: 0,
	  begin: 0,
	  bias: 0,
	  by: 0,
	  calcMode: 'calcMode',
	  capHeight: 'cap-height',
	  clip: 0,
	  clipPath: 'clip-path',
	  clipRule: 'clip-rule',
	  clipPathUnits: 'clipPathUnits',
	  colorInterpolation: 'color-interpolation',
	  colorInterpolationFilters: 'color-interpolation-filters',
	  colorProfile: 'color-profile',
	  colorRendering: 'color-rendering',
	  contentScriptType: 'contentScriptType',
	  contentStyleType: 'contentStyleType',
	  cursor: 0,
	  cx: 0,
	  cy: 0,
	  d: 0,
	  decelerate: 0,
	  descent: 0,
	  diffuseConstant: 'diffuseConstant',
	  direction: 0,
	  display: 0,
	  divisor: 0,
	  dominantBaseline: 'dominant-baseline',
	  dur: 0,
	  dx: 0,
	  dy: 0,
	  edgeMode: 'edgeMode',
	  elevation: 0,
	  enableBackground: 'enable-background',
	  end: 0,
	  exponent: 0,
	  externalResourcesRequired: 'externalResourcesRequired',
	  fill: 0,
	  fillOpacity: 'fill-opacity',
	  fillRule: 'fill-rule',
	  filter: 0,
	  filterRes: 'filterRes',
	  filterUnits: 'filterUnits',
	  floodColor: 'flood-color',
	  floodOpacity: 'flood-opacity',
	  focusable: 0,
	  fontFamily: 'font-family',
	  fontSize: 'font-size',
	  fontSizeAdjust: 'font-size-adjust',
	  fontStretch: 'font-stretch',
	  fontStyle: 'font-style',
	  fontVariant: 'font-variant',
	  fontWeight: 'font-weight',
	  format: 0,
	  from: 0,
	  fx: 0,
	  fy: 0,
	  g1: 0,
	  g2: 0,
	  glyphName: 'glyph-name',
	  glyphOrientationHorizontal: 'glyph-orientation-horizontal',
	  glyphOrientationVertical: 'glyph-orientation-vertical',
	  glyphRef: 'glyphRef',
	  gradientTransform: 'gradientTransform',
	  gradientUnits: 'gradientUnits',
	  hanging: 0,
	  horizAdvX: 'horiz-adv-x',
	  horizOriginX: 'horiz-origin-x',
	  ideographic: 0,
	  imageRendering: 'image-rendering',
	  'in': 0,
	  in2: 0,
	  intercept: 0,
	  k: 0,
	  k1: 0,
	  k2: 0,
	  k3: 0,
	  k4: 0,
	  kernelMatrix: 'kernelMatrix',
	  kernelUnitLength: 'kernelUnitLength',
	  kerning: 0,
	  keyPoints: 'keyPoints',
	  keySplines: 'keySplines',
	  keyTimes: 'keyTimes',
	  lengthAdjust: 'lengthAdjust',
	  letterSpacing: 'letter-spacing',
	  lightingColor: 'lighting-color',
	  limitingConeAngle: 'limitingConeAngle',
	  local: 0,
	  markerEnd: 'marker-end',
	  markerMid: 'marker-mid',
	  markerStart: 'marker-start',
	  markerHeight: 'markerHeight',
	  markerUnits: 'markerUnits',
	  markerWidth: 'markerWidth',
	  mask: 0,
	  maskContentUnits: 'maskContentUnits',
	  maskUnits: 'maskUnits',
	  mathematical: 0,
	  mode: 0,
	  numOctaves: 'numOctaves',
	  offset: 0,
	  opacity: 0,
	  operator: 0,
	  order: 0,
	  orient: 0,
	  orientation: 0,
	  origin: 0,
	  overflow: 0,
	  overlinePosition: 'overline-position',
	  overlineThickness: 'overline-thickness',
	  paintOrder: 'paint-order',
	  panose1: 'panose-1',
	  pathLength: 'pathLength',
	  patternContentUnits: 'patternContentUnits',
	  patternTransform: 'patternTransform',
	  patternUnits: 'patternUnits',
	  pointerEvents: 'pointer-events',
	  points: 0,
	  pointsAtX: 'pointsAtX',
	  pointsAtY: 'pointsAtY',
	  pointsAtZ: 'pointsAtZ',
	  preserveAlpha: 'preserveAlpha',
	  preserveAspectRatio: 'preserveAspectRatio',
	  primitiveUnits: 'primitiveUnits',
	  r: 0,
	  radius: 0,
	  refX: 'refX',
	  refY: 'refY',
	  renderingIntent: 'rendering-intent',
	  repeatCount: 'repeatCount',
	  repeatDur: 'repeatDur',
	  requiredExtensions: 'requiredExtensions',
	  requiredFeatures: 'requiredFeatures',
	  restart: 0,
	  result: 0,
	  rotate: 0,
	  rx: 0,
	  ry: 0,
	  scale: 0,
	  seed: 0,
	  shapeRendering: 'shape-rendering',
	  slope: 0,
	  spacing: 0,
	  specularConstant: 'specularConstant',
	  specularExponent: 'specularExponent',
	  speed: 0,
	  spreadMethod: 'spreadMethod',
	  startOffset: 'startOffset',
	  stdDeviation: 'stdDeviation',
	  stemh: 0,
	  stemv: 0,
	  stitchTiles: 'stitchTiles',
	  stopColor: 'stop-color',
	  stopOpacity: 'stop-opacity',
	  strikethroughPosition: 'strikethrough-position',
	  strikethroughThickness: 'strikethrough-thickness',
	  string: 0,
	  stroke: 0,
	  strokeDasharray: 'stroke-dasharray',
	  strokeDashoffset: 'stroke-dashoffset',
	  strokeLinecap: 'stroke-linecap',
	  strokeLinejoin: 'stroke-linejoin',
	  strokeMiterlimit: 'stroke-miterlimit',
	  strokeOpacity: 'stroke-opacity',
	  strokeWidth: 'stroke-width',
	  surfaceScale: 'surfaceScale',
	  systemLanguage: 'systemLanguage',
	  tableValues: 'tableValues',
	  targetX: 'targetX',
	  targetY: 'targetY',
	  textAnchor: 'text-anchor',
	  textDecoration: 'text-decoration',
	  textRendering: 'text-rendering',
	  textLength: 'textLength',
	  to: 0,
	  transform: 0,
	  u1: 0,
	  u2: 0,
	  underlinePosition: 'underline-position',
	  underlineThickness: 'underline-thickness',
	  unicode: 0,
	  unicodeBidi: 'unicode-bidi',
	  unicodeRange: 'unicode-range',
	  unitsPerEm: 'units-per-em',
	  vAlphabetic: 'v-alphabetic',
	  vHanging: 'v-hanging',
	  vIdeographic: 'v-ideographic',
	  vMathematical: 'v-mathematical',
	  values: 0,
	  vectorEffect: 'vector-effect',
	  version: 0,
	  vertAdvY: 'vert-adv-y',
	  vertOriginX: 'vert-origin-x',
	  vertOriginY: 'vert-origin-y',
	  viewBox: 'viewBox',
	  viewTarget: 'viewTarget',
	  visibility: 0,
	  widths: 0,
	  wordSpacing: 'word-spacing',
	  writingMode: 'writing-mode',
	  x: 0,
	  xHeight: 'x-height',
	  x1: 0,
	  x2: 0,
	  xChannelSelector: 'xChannelSelector',
	  xlinkActuate: 'xlink:actuate',
	  xlinkArcrole: 'xlink:arcrole',
	  xlinkHref: 'xlink:href',
	  xlinkRole: 'xlink:role',
	  xlinkShow: 'xlink:show',
	  xlinkTitle: 'xlink:title',
	  xlinkType: 'xlink:type',
	  xmlBase: 'xml:base',
	  xmlns: 0,
	  xmlnsXlink: 'xmlns:xlink',
	  xmlLang: 'xml:lang',
	  xmlSpace: 'xml:space',
	  y: 0,
	  y1: 0,
	  y2: 0,
	  yChannelSelector: 'yChannelSelector',
	  z: 0,
	  zoomAndPan: 'zoomAndPan'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {},
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {}
	};
	
	Object.keys(ATTRS).forEach(function (key) {
	  SVGDOMPropertyConfig.Properties[key] = 0;
	  if (ATTRS[key]) {
	    SVGDOMPropertyConfig.DOMAttributeNames[key] = ATTRS[key];
	  }
	});
	
	module.exports = SVGDOMPropertyConfig;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(46);
	var ExecutionEnvironment = __webpack_require__(53);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactInputSelection = __webpack_require__(152);
	var SyntheticEvent = __webpack_require__(58);
	
	var getActiveElement = __webpack_require__(158);
	var isTextInputElement = __webpack_require__(77);
	var shallowEqual = __webpack_require__(129);
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: 'onSelect',
	      captured: 'onSelectCapture'
	    },
	    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']
	  }
	};
	
	var activeElement = null;
	var activeElementInst = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events. See #3639.
	var hasListener = false;
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    var targetNode = targetInst ? ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case 'topFocus':
	        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
	          activeElement = targetNode;
	          activeElementInst = targetInst;
	          lastSelection = null;
	        }
	        break;
	      case 'topBlur':
	        activeElement = null;
	        activeElementInst = null;
	        lastSelection = null;
	        break;
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case 'topMouseDown':
	        mouseDown = true;
	        break;
	      case 'topContextMenu':
	      case 'topMouseUp':
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case 'topSelectionChange':
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case 'topKeyDown':
	      case 'topKeyUp':
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    if (registrationName === 'onSelect') {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var EventListener = __webpack_require__(148);
	var EventPropagators = __webpack_require__(46);
	var ReactDOMComponentTree = __webpack_require__(39);
	var SyntheticAnimationEvent = __webpack_require__(162);
	var SyntheticClipboardEvent = __webpack_require__(163);
	var SyntheticEvent = __webpack_require__(58);
	var SyntheticFocusEvent = __webpack_require__(164);
	var SyntheticKeyboardEvent = __webpack_require__(165);
	var SyntheticMouseEvent = __webpack_require__(80);
	var SyntheticDragEvent = __webpack_require__(168);
	var SyntheticTouchEvent = __webpack_require__(169);
	var SyntheticTransitionEvent = __webpack_require__(170);
	var SyntheticUIEvent = __webpack_require__(81);
	var SyntheticWheelEvent = __webpack_require__(171);
	
	var emptyFunction = __webpack_require__(9);
	var getEventCharCode = __webpack_require__(166);
	var invariant = __webpack_require__(12);
	
	/**
	 * Turns
	 * ['abort', ...]
	 * into
	 * eventTypes = {
	 *   'abort': {
	 *     phasedRegistrationNames: {
	 *       bubbled: 'onAbort',
	 *       captured: 'onAbortCapture',
	 *     },
	 *     dependencies: ['topAbort'],
	 *   },
	 *   ...
	 * };
	 * topLevelEventsToDispatchConfig = {
	 *   'topAbort': { sameConfig }
	 * };
	 */
	var eventTypes = {};
	var topLevelEventsToDispatchConfig = {};
	['abort', 'animationEnd', 'animationIteration', 'animationStart', 'blur', 'canPlay', 'canPlayThrough', 'click', 'contextMenu', 'copy', 'cut', 'doubleClick', 'drag', 'dragEnd', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'dragStart', 'drop', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseDown', 'mouseMove', 'mouseOut', 'mouseOver', 'mouseUp', 'paste', 'pause', 'play', 'playing', 'progress', 'rateChange', 'reset', 'scroll', 'seeked', 'seeking', 'stalled', 'submit', 'suspend', 'timeUpdate', 'touchCancel', 'touchEnd', 'touchMove', 'touchStart', 'transitionEnd', 'volumeChange', 'waiting', 'wheel'].forEach(function (event) {
	  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
	  var onEvent = 'on' + capitalizedEvent;
	  var topEvent = 'top' + capitalizedEvent;
	
	  var type = {
	    phasedRegistrationNames: {
	      bubbled: onEvent,
	      captured: onEvent + 'Capture'
	    },
	    dependencies: [topEvent]
	  };
	  eventTypes[event] = type;
	  topLevelEventsToDispatchConfig[topEvent] = type;
	});
	
	var onClickListeners = {};
	
	function getDictionaryKey(inst) {
	  // Prevents V8 performance issue:
	  // https://github.com/facebook/react/pull/7232
	  return '.' + inst._rootNodeID;
	}
	
	function isInteractive(tag) {
	  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
	}
	
	var SimpleEventPlugin = {
	  eventTypes: eventTypes,
	
	  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case 'topAbort':
	      case 'topCanPlay':
	      case 'topCanPlayThrough':
	      case 'topDurationChange':
	      case 'topEmptied':
	      case 'topEncrypted':
	      case 'topEnded':
	      case 'topError':
	      case 'topInput':
	      case 'topInvalid':
	      case 'topLoad':
	      case 'topLoadedData':
	      case 'topLoadedMetadata':
	      case 'topLoadStart':
	      case 'topPause':
	      case 'topPlay':
	      case 'topPlaying':
	      case 'topProgress':
	      case 'topRateChange':
	      case 'topReset':
	      case 'topSeeked':
	      case 'topSeeking':
	      case 'topStalled':
	      case 'topSubmit':
	      case 'topSuspend':
	      case 'topTimeUpdate':
	      case 'topVolumeChange':
	      case 'topWaiting':
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case 'topKeyPress':
	        // Firefox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case 'topKeyDown':
	      case 'topKeyUp':
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case 'topBlur':
	      case 'topFocus':
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case 'topClick':
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case 'topDoubleClick':
	      case 'topMouseDown':
	      case 'topMouseMove':
	      case 'topMouseUp':
	      // TODO: Disabled elements should not respond to mouse events
	      /* falls through */
	      case 'topMouseOut':
	      case 'topMouseOver':
	      case 'topContextMenu':
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case 'topDrag':
	      case 'topDragEnd':
	      case 'topDragEnter':
	      case 'topDragExit':
	      case 'topDragLeave':
	      case 'topDragOver':
	      case 'topDragStart':
	      case 'topDrop':
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case 'topTouchCancel':
	      case 'topTouchEnd':
	      case 'topTouchMove':
	      case 'topTouchStart':
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case 'topAnimationEnd':
	      case 'topAnimationIteration':
	      case 'topAnimationStart':
	        EventConstructor = SyntheticAnimationEvent;
	        break;
	      case 'topTransitionEnd':
	        EventConstructor = SyntheticTransitionEvent;
	        break;
	      case 'topScroll':
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case 'topWheel':
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case 'topCopy':
	      case 'topCut':
	      case 'topPaste':
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : _prodInvariant('86', topLevelType) : void 0;
	    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function (inst, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
	      if (!onClickListeners[key]) {
	        onClickListeners[key] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function (inst, registrationName) {
	    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
	      var key = getDictionaryKey(inst);
	      onClickListeners[key].remove();
	      delete onClickListeners[key];
	    }
	  }
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
	 */
	var AnimationEventInterface = {
	  animationName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticAnimationEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
	
	module.exports = SyntheticAnimationEvent;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function (event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(81);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(81);
	
	var getEventCharCode = __webpack_require__(166);
	var getEventKey = __webpack_require__(167);
	var getEventModifierState = __webpack_require__(83);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function (event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function (event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function (event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ }),
/* 166 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(166);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  Esc: 'Escape',
	  Spacebar: ' ',
	  Left: 'ArrowLeft',
	  Up: 'ArrowUp',
	  Right: 'ArrowRight',
	  Down: 'ArrowDown',
	  Del: 'Delete',
	  Win: 'OS',
	  Menu: 'ContextMenu',
	  Apps: 'ContextMenu',
	  Scroll: 'ScrollLock',
	  MozPrintableKey: 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1',
	  113: 'F2',
	  114: 'F3',
	  115: 'F4',
	  116: 'F5',
	  117: 'F6',
	  118: 'F7',
	  119: 'F8',
	  120: 'F9',
	  121: 'F10',
	  122: 'F11',
	  123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(80);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(81);
	
	var getEventModifierState = __webpack_require__(83);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(58);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
	 */
	var TransitionEventInterface = {
	  propertyName: null,
	  elapsedTime: null,
	  pseudoElement: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticTransitionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
	
	module.exports = SyntheticTransitionEvent;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(80);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function (event) {
	    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function (event) {
	    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var DOMLazyTree = __webpack_require__(87);
	var DOMProperty = __webpack_require__(41);
	var React = __webpack_require__(2);
	var ReactBrowserEventEmitter = __webpack_require__(111);
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactDOMContainerInfo = __webpack_require__(173);
	var ReactDOMFeatureFlags = __webpack_require__(174);
	var ReactFeatureFlags = __webpack_require__(63);
	var ReactInstanceMap = __webpack_require__(122);
	var ReactInstrumentation = __webpack_require__(67);
	var ReactMarkupChecksum = __webpack_require__(175);
	var ReactReconciler = __webpack_require__(64);
	var ReactUpdateQueue = __webpack_require__(141);
	var ReactUpdates = __webpack_require__(61);
	
	var emptyObject = __webpack_require__(11);
	var instantiateReactComponent = __webpack_require__(124);
	var invariant = __webpack_require__(12);
	var setInnerHTML = __webpack_require__(89);
	var shouldUpdateReactComponent = __webpack_require__(130);
	var warning = __webpack_require__(8);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var ROOT_ATTR_NAME = DOMProperty.ROOT_ATTRIBUTE_NAME;
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var instancesByReactRootID = {};
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(wrapperInstance, container, transaction, shouldReuseMarkup, context) {
	  var markerName;
	  if (ReactFeatureFlags.logTopLevelRenders) {
	    var wrappedElement = wrapperInstance._currentElement.props.child;
	    var type = wrappedElement.type;
	    markerName = 'React mount: ' + (typeof type === 'string' ? type : type.displayName || type.name);
	    console.time(markerName);
	  }
	
	  var markup = ReactReconciler.mountComponent(wrapperInstance, transaction, null, ReactDOMContainerInfo(wrapperInstance, container), context, 0 /* parentDebugID */
	  );
	
	  if (markerName) {
	    console.timeEnd(markerName);
	  }
	
	  wrapperInstance._renderedComponent._topLevelWrapper = wrapperInstance;
	  ReactMount._mountImageIntoNode(markup, container, wrapperInstance, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* useCreateElement */
	  !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container, safely) {
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onBeginFlush();
	  }
	  ReactReconciler.unmountComponent(instance, safely);
	  if (process.env.NODE_ENV !== 'production') {
	    ReactInstrumentation.debugTool.onEndFlush();
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  if (rootEl) {
	    var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
	    return !!(inst && inst._hostParent);
	  }
	}
	
	/**
	 * True if the supplied DOM node is a React DOM element and
	 * it has been rendered by another copy of React.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM has been rendered by another copy of React
	 * @internal
	 */
	function nodeIsRenderedByOtherInstance(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  return !!(rootEl && isReactNode(rootEl) && !ReactDOMComponentTree.getInstanceFromNode(rootEl));
	}
	
	/**
	 * True if the supplied DOM node is a valid node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid DOM node.
	 * @internal
	 */
	function isValidContainer(node) {
	  return !!(node && (node.nodeType === ELEMENT_NODE_TYPE || node.nodeType === DOC_NODE_TYPE || node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE));
	}
	
	/**
	 * True if the supplied DOM node is a valid React node element.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM is a valid React DOM node.
	 * @internal
	 */
	function isReactNode(node) {
	  return isValidContainer(node) && (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME));
	}
	
	function getHostRootInstanceInContainer(container) {
	  var rootEl = getReactRootElementInContainer(container);
	  var prevHostInstance = rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
	  return prevHostInstance && !prevHostInstance._hostParent ? prevHostInstance : null;
	}
	
	function getTopLevelWrapperInContainer(container) {
	  var root = getHostRootInstanceInContainer(container);
	  return root ? root._hostContainerInfo._topLevelWrapper : null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var topLevelRootCounter = 1;
	var TopLevelWrapper = function () {
	  this.rootID = topLevelRootCounter++;
	};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  return this.props.child;
	};
	TopLevelWrapper.isReactTopLevelWrapper = true;
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	  TopLevelWrapper: TopLevelWrapper,
	
	  /**
	   * Used by devtools. The keys are not important.
	   */
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function (container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function (prevComponent, nextElement, nextContext, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement, nextContext);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    return prevComponent;
	  },
	
	  /**
	   * Render a new component into the DOM. Hooked by hooks!
	   *
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function (nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : _prodInvariant('37') : void 0;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	    var componentInstance = instantiateReactComponent(nextElement, false);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, container, shouldReuseMarkup, context);
	
	    var wrapperID = componentInstance._instance.rootID;
	    instancesByReactRootID[wrapperID] = componentInstance;
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && ReactInstanceMap.has(parentComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : _prodInvariant('38') : void 0;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function (parentComponent, nextElement, container, callback) {
	    ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
	    !React.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : _prodInvariant('39', typeof nextElement === 'string' ? " Instead of passing a string like 'div', pass " + "React.createElement('div') or <div />." : typeof nextElement === 'function' ? ' Instead of passing a class like Foo, pass ' + 'React.createElement(Foo) or <Foo />.' : nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : void 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
	
	    var nextWrappedElement = React.createElement(TopLevelWrapper, {
	      child: nextElement
	    });
	
	    var nextContext;
	    if (parentComponent) {
	      var parentInst = ReactInstanceMap.get(parentComponent);
	      nextContext = parentInst._processChildContext(parentInst._context);
	    } else {
	      nextContext = emptyObject;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props.child;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, nextContext, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : void 0;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, nextContext)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function (nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function (container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : void 0;
	
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : _prodInvariant('40') : void 0;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!nodeIsRenderedByOtherInstance(container), "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
	    }
	
	    var prevComponent = getTopLevelWrapperInContainer(container);
	    if (!prevComponent) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var isContainerReactRoot = container.nodeType === 1 && container.hasAttribute(ROOT_ATTR_NAME);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
	      }
	
	      return false;
	    }
	    delete instancesByReactRootID[prevComponent._instance.rootID];
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, prevComponent, container, false);
	    return true;
	  },
	
	  _mountImageIntoNode: function (markup, container, instance, shouldReuseMarkup, transaction) {
	    !isValidContainer(container) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : _prodInvariant('41') : void 0;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        ReactDOMComponentTree.precacheNode(instance, rootElement);
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using server rendering but the checksum was invalid. This usually means you rendered a different component type or props on the client from the one on the server, or your render() methods are impure. React cannot handle this case due to cross-browser quirks by rendering at the document root. You should look for environment dependent code in your components and ensure the props are the same client and server side:\n%s', difference) : _prodInvariant('42', difference) : void 0;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : void 0;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but you didn\'t use server rendering. We can\'t do this without using server rendering due to cross-browser quirks. See ReactDOMServer.renderToString() for server rendering.') : _prodInvariant('43') : void 0;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      DOMLazyTree.insertTreeBefore(container, markup, null);
	    } else {
	      setInnerHTML(container, markup);
	      ReactDOMComponentTree.precacheNode(instance, container.firstChild);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      var hostNode = ReactDOMComponentTree.getInstanceFromNode(container.firstChild);
	      if (hostNode._debugID !== 0) {
	        ReactInstrumentation.debugTool.onHostOperation({
	          instanceID: hostNode._debugID,
	          type: 'mount',
	          payload: markup.toString()
	        });
	      }
	    }
	  }
	};
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var validateDOMNesting = __webpack_require__(142);
	
	var DOC_NODE_TYPE = 9;
	
	function ReactDOMContainerInfo(topLevelWrapper, node) {
	  var info = {
	    _topLevelWrapper: topLevelWrapper,
	    _idCounter: 1,
	    _ownerDocument: node ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument : null,
	    _node: node,
	    _tag: node ? node.nodeName.toLowerCase() : null,
	    _namespaceURI: node ? node.namespaceURI : null
	  };
	  if (process.env.NODE_ENV !== 'production') {
	    info._ancestorInfo = node ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
	  }
	  return info;
	}
	
	module.exports = ReactDOMContainerInfo;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: true,
	  useFiber: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(176);
	
	var TAG_END = /\/?>/;
	var COMMENT_START = /^<\!\-\-/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function (markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags, comments and self-closing tags)
	    if (COMMENT_START.test(markup)) {
	      return markup;
	    } else {
	      return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	    }
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function (markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ }),
/* 176 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    var n = Math.min(i + 4096, m);
	    for (; i < n; i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ }),
/* 177 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	module.exports = '15.6.2';

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var _prodInvariant = __webpack_require__(40);
	
	var ReactCurrentOwner = __webpack_require__(17);
	var ReactDOMComponentTree = __webpack_require__(39);
	var ReactInstanceMap = __webpack_require__(122);
	
	var getHostComponentFromComposite = __webpack_require__(179);
	var invariant = __webpack_require__(12);
	var warning = __webpack_require__(8);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : void 0;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	
	  var inst = ReactInstanceMap.get(componentOrElement);
	  if (inst) {
	    inst = getHostComponentFromComposite(inst);
	    return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
	  }
	
	  if (typeof componentOrElement.render === 'function') {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : _prodInvariant('44') : void 0;
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : _prodInvariant('45', Object.keys(componentOrElement)) : void 0;
	  }
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactNodeTypes = __webpack_require__(126);
	
	function getHostComponentFromComposite(inst) {
	  var type;
	
	  while ((type = inst._renderedNodeType) === ReactNodeTypes.COMPOSITE) {
	    inst = inst._renderedComponent;
	  }
	
	  if (type === ReactNodeTypes.HOST) {
	    return inst._renderedComponent;
	  } else if (type === ReactNodeTypes.EMPTY) {
	    return null;
	  }
	}
	
	module.exports = getHostComponentFromComposite;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(172);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(41);
	var EventPluginRegistry = __webpack_require__(48);
	var ReactComponentTreeHook = __webpack_require__(24);
	
	var warning = __webpack_require__(8);
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true,
	
	    autoFocus: true,
	    defaultValue: true,
	    valueLink: true,
	    defaultChecked: true,
	    checkedLink: true,
	    innerHTML: true,
	    suppressContentEditableWarning: true,
	    onFocusIn: true,
	    onFocusOut: true
	  };
	  var warnedProperties = {};
	
	  var validateProperty = function (tagName, name, debugID) {
	    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
	      return true;
	    }
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return true;
	    }
	    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
	      return true;
	    }
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;
	
	    if (standardName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown DOM property %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else if (registrationName != null) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown event handler property %s. Did you mean `%s`?%s', name, registrationName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      return true;
	    } else {
	      // We were unable to guess which prop the user intended.
	      // It is likely that the user was just blindly spreading/forwarding props
	      // Components should be careful to only render valid props/attributes.
	      // Warning will be invoked in warnUnknownProperties to allow grouping.
	      return false;
	    }
	  };
	}
	
	var warnUnknownProperties = function (debugID, element) {
	  var unknownProps = [];
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      unknownProps.push(key);
	    }
	  }
	
	  var unknownPropString = unknownProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (unknownProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown prop %s on <%s> tag. Remove this prop from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (unknownProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown props %s on <%s> tag. Remove these props from the element. ' + 'For details, see https://fb.me/react-unknown-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	};
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	  warnUnknownProperties(debugID, element);
	}
	
	var ReactDOMUnknownPropertyHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMUnknownPropertyHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var ReactComponentTreeHook = __webpack_require__(24);
	
	var warning = __webpack_require__(8);
	
	var didWarnValueNull = false;
	
	function handleElement(debugID, element) {
	  if (element == null) {
	    return;
	  }
	  if (element.type !== 'input' && element.type !== 'textarea' && element.type !== 'select') {
	    return;
	  }
	  if (element.props != null && element.props.value === null && !didWarnValueNull) {
	    process.env.NODE_ENV !== 'production' ? warning(false, '`value` prop on `%s` should not be null. ' + 'Consider using the empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	
	    didWarnValueNull = true;
	  }
	}
	
	var ReactDOMNullInputValuePropHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    handleElement(debugID, element);
	  }
	};
	
	module.exports = ReactDOMNullInputValuePropHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(41);
	var ReactComponentTreeHook = __webpack_require__(24);
	
	var warning = __webpack_require__(8);
	
	var warnedProperties = {};
	var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
	
	function validateProperty(tagName, name, debugID) {
	  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	    return true;
	  }
	
	  if (rARIA.test(name)) {
	    var lowerCasedName = name.toLowerCase();
	    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // If this is an aria-* attribute, but is not listed in the known DOM
	    // DOM properties, then it is an invalid aria-* attribute.
	    if (standardName == null) {
	      warnedProperties[name] = true;
	      return false;
	    }
	    // aria-* attributes should be lowercase; suggest the lowercase version.
	    if (name !== standardName) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Unknown ARIA attribute %s. Did you mean %s?%s', name, standardName, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	      warnedProperties[name] = true;
	      return true;
	    }
	  }
	
	  return true;
	}
	
	function warnInvalidARIAProps(debugID, element) {
	  var invalidProps = [];
	
	  for (var key in element.props) {
	    var isValid = validateProperty(element.type, key, debugID);
	    if (!isValid) {
	      invalidProps.push(key);
	    }
	  }
	
	  var unknownPropString = invalidProps.map(function (prop) {
	    return '`' + prop + '`';
	  }).join(', ');
	
	  if (invalidProps.length === 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  } else if (invalidProps.length > 1) {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, element.type, ReactComponentTreeHook.getStackAddendumByID(debugID)) : void 0;
	  }
	}
	
	function handleElement(debugID, element) {
	  if (element == null || typeof element.type !== 'string') {
	    return;
	  }
	  if (element.type.indexOf('-') >= 0 || element.props.is) {
	    return;
	  }
	
	  warnInvalidARIAProps(debugID, element);
	}
	
	var ReactDOMInvalidARIAHook = {
	  onBeforeMountComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  },
	  onBeforeUpdateComponent: function (debugID, element) {
	    if (process.env.NODE_ENV !== 'production') {
	      handleElement(debugID, element);
	    }
	  }
	};
	
	module.exports = ReactDOMInvalidARIAHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _drum_machine = __webpack_require__(185);
	
	var _drum_machine2 = _interopRequireDefault(_drum_machine);
	
	var _MuiThemeProvider = __webpack_require__(335);
	
	var _MuiThemeProvider2 = _interopRequireDefault(_MuiThemeProvider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Root = function Root() {
	  return _react2.default.createElement(
	    _MuiThemeProvider2.default,
	    null,
	    _react2.default.createElement(_drum_machine2.default, null)
	  );
	};
	
	exports.default = Root;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _sequencer = __webpack_require__(186);
	
	var _sequencer2 = _interopRequireDefault(_sequencer);
	
	var _effects = __webpack_require__(310);
	
	var _effects2 = _interopRequireDefault(_effects);
	
	var _visualizer = __webpack_require__(318);
	
	var _visualizer2 = _interopRequireDefault(_visualizer);
	
	var _footer = __webpack_require__(319);
	
	var _footer2 = _interopRequireDefault(_footer);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var DrumMachine = function (_React$Component) {
	  _inherits(DrumMachine, _React$Component);
	
	  function DrumMachine() {
	    _classCallCheck(this, DrumMachine);
	
	    return _possibleConstructorReturn(this, (DrumMachine.__proto__ || Object.getPrototypeOf(DrumMachine)).apply(this, arguments));
	  }
	
	  _createClass(DrumMachine, [{
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'div',
	        { className: 'drummachine' },
	        _react2.default.createElement(_sequencer2.default, null),
	        _react2.default.createElement(
	          'div',
	          { className: 'fx-visualizer' },
	          _react2.default.createElement(_effects2.default, null),
	          _react2.default.createElement(_visualizer2.default, null)
	        ),
	        _react2.default.createElement(_footer2.default, null)
	      );
	    }
	  }]);
	
	  return DrumMachine;
	}(_react2.default.Component);
	
	exports.default = DrumMachine;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tone = __webpack_require__(187);
	
	var _tone2 = _interopRequireDefault(_tone);
	
	var _classnames = __webpack_require__(188);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _transport_positions = __webpack_require__(189);
	
	var _sample_packs = __webpack_require__(190);
	
	var samplePacks = _interopRequireWildcard(_sample_packs);
	
	var _patterns = __webpack_require__(191);
	
	var _sampler_list = __webpack_require__(192);
	
	var _sampler_list2 = _interopRequireDefault(_sampler_list);
	
	var _Slider = __webpack_require__(193);
	
	var _Slider2 = _interopRequireDefault(_Slider);
	
	var _reactTapEventPlugin = __webpack_require__(303);
	
	var _reactTapEventPlugin2 = _interopRequireDefault(_reactTapEventPlugin);
	
	var _reactCanvasKnob = __webpack_require__(309);
	
	var _reactCanvasKnob2 = _interopRequireDefault(_reactCanvasKnob);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Sequencer = function (_React$Component) {
	  _inherits(Sequencer, _React$Component);
	
	  function Sequencer(props) {
	    _classCallCheck(this, Sequencer);
	
	    var _this = _possibleConstructorReturn(this, (Sequencer.__proto__ || Object.getPrototypeOf(Sequencer)).call(this, props));
	
	    _this.triggerSample = _this.triggerSample.bind(_this);
	    _this.startStop = _this.startStop.bind(_this);
	    _this.updateSequence = _this.updateSequence.bind(_this);
	    _this.changeTempo = _this.changeTempo.bind(_this);
	    _this.positionHighlight = _this.positionHighlight.bind(_this);
	    _this.changeVolume = _this.changeVolume.bind(_this);
	    _this.clearPattern = _this.clearPattern.bind(_this);
	    _this.changeSVolume = _this.changeSVolume.bind(_this);
	    _this.soloMuteButtons = _this.soloMuteButtons.bind(_this);
	    _this.soloSampler = _this.soloSampler.bind(_this);
	    _this.muteSampler = _this.muteSampler.bind(_this);
	    _this.samplePacks = samplePacks;
	    _this.preMuteVol = {};
	    _this.preSoloVol = {};
	
	    _this.state = {
	      bpm: 106,
	      position: 0,
	      volume: 0,
	      playing: false,
	      key: 0
	    };
	
	    for (var i = 1; i < 9; i++) {
	      _this['channel' + i] = _patterns.demoTrack[i - 1];
	      _this['sampler' + i] = new _tone2.default.Sampler(samplePacks.eightZeroEight[i - 1]).toMaster();
	      _this.state['s' + i + 'Volume'] = -5;
	      _this.state['sampler' + i + 'Solo'] = false;
	      _this.state['sampler' + i + 'Disable'] = false;
	      _this['sampler' + i].volume.value = _this.state['s' + i + 'Volume'];
	      _this['channelSequence' + i] = new _tone2.default.Sequence(_this.triggerSample.bind(_this, 'sampler' + i), _this['channel' + i], "16n").start(0);
	    }
	
	    _tone2.default.Transport.setLoopPoints(0, "1m");
	    _tone2.default.Transport.loop = true;
	    _tone2.default.Transport.scheduleRepeat(_this.positionHighlight, "16n");
	    _tone2.default.Transport.bpm.value = _this.state.bpm;
	    _tone2.default.Master.volume.value = _this.state.volume;
	    return _this;
	  }
	
	  _createClass(Sequencer, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      (0, _reactTapEventPlugin2.default)();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      document.addEventListener('keydown', function (e) {
	        var keyName = e.key;
	        if (keyName === " ") {
	          _this2.startStop();
	        }
	      });
	    }
	  }, {
	    key: 'triggerSample',
	    value: function triggerSample(sampler) {
	      this[sampler].triggerAttackRelease(0);
	    }
	  }, {
	    key: 'positionHighlight',
	    value: function positionHighlight() {
	      this.setState({ position: _transport_positions.TRANSPORT_POS[_tone2.default.Transport.position.slice(0, 5)] });
	    }
	  }, {
	    key: 'startStop',
	    value: function startStop() {
	      if (this.state.playing) {
	        _tone2.default.Transport.stop();
	        this.setState({ playing: false });
	      } else {
	        _tone2.default.Transport.start();
	        this.setState({ playing: true });
	      }
	    }
	  }, {
	    key: 'channelButtons',
	    value: function channelButtons(channel) {
	      var _this3 = this;
	
	      var buttonIdx = [];
	      for (var i = 0; i < 16; i++) {
	        buttonIdx.push(i);
	      }
	      var buttons = buttonIdx.map(function (idx) {
	        var stepClass = void 0;
	        if (_this3[channel][idx]) {
	          stepClass = (0, _classnames2.default)({
	            "step-button": true,
	            "step-on": true,
	            "step-off": false,
	            "step-on-active": idx === _this3.state.position,
	            "downbeat": idx % 4 === 0,
	            "muted-on": _this3.state['s' + channel[7] + 'Volume'] < -49
	          });
	        } else {
	          stepClass = (0, _classnames2.default)({
	            "step-button": true,
	            "step-on": false,
	            "step-off": true,
	            "step-off-active": idx === _this3.state.position,
	            "downbeat": idx % 4 === 0,
	            "muted-off": _this3.state['s' + channel[7] + 'Volume'] < -49
	          });
	        }
	        return _react2.default.createElement('div', {
	          'data-channel': channel,
	          'data-idx': idx,
	          key: idx,
	          className: stepClass,
	          onClick: _this3.updateSequence });
	      });
	      return buttons;
	    }
	  }, {
	    key: 'soloMuteButtons',
	    value: function soloMuteButtons() {
	      var volButtons = [];
	      for (var i = 1; i < 9; i++) {
	        var muteClass = (0, _classnames2.default)({
	          "mute": true,
	          "mute-active": this.state['s' + i + 'Volume'] < -49
	        });
	        var soloClass = (0, _classnames2.default)({
	          "solo": true,
	          "solo-active": this.state['sampler' + i + 'Solo']
	        });
	        volButtons.push(_react2.default.createElement(
	          'div',
	          { className: 'solo-mute', key: i },
	          _react2.default.createElement(
	            'button',
	            { className: soloClass, onClick: this.soloSampler.bind(this, 'sampler' + i), disabled: this.state['sampler' + i + 'Disable'] },
	            'S'
	          ),
	          _react2.default.createElement(
	            'button',
	            { className: muteClass, onClick: this.muteSampler.bind(this, 'sampler' + i) },
	            'M'
	          )
	        ));
	      }
	      return volButtons;
	    }
	  }, {
	    key: 'soloSampler',
	    value: function soloSampler(sampler, e) {
	      e.currentTarget.blur();
	      if (this.state[sampler + 'Solo']) {
	        for (var i = 0; i < 8; i++) {
	          if (sampler === _sampler_list2.default[i]) {
	            this.setState(_defineProperty({}, sampler + 'Solo', false));
	          } else {
	            var _setState2;
	
	            var preVolume = this.preSoloVol['sampler' + (i + 1)];
	            this.setState((_setState2 = {}, _defineProperty(_setState2, 's' + (i + 1) + 'Volume', preVolume), _defineProperty(_setState2, 'sampler' + (i + 1) + 'Disable', false), _setState2));
	            this['sampler' + (i + 1)].volume.value = preVolume;
	          }
	        }
	      } else {
	        for (var _i = 0; _i < 8; _i++) {
	          if (sampler === _sampler_list2.default[_i]) {
	            this.setState(_defineProperty({}, sampler + 'Solo', true));
	          } else {
	            var _setState4;
	
	            this.setState((_setState4 = {}, _defineProperty(_setState4, 'sampler' + (_i + 1) + 'Solo', false), _defineProperty(_setState4, 'sampler' + (_i + 1) + 'Disable', true), _setState4));
	            this.preSoloVol['sampler' + (_i + 1)] = this.state['s' + (_i + 1) + 'Volume'];
	            if (this.state['s' + (_i + 1) + 'Volume'] > -50) {
	              this.muteSampler('sampler' + (_i + 1), e);
	            }
	          }
	        }
	      }
	    }
	  }, {
	    key: 'muteSampler',
	    value: function muteSampler(sampler, e) {
	      e.currentTarget.focus();
	      e.currentTarget.blur();
	      if (this.state['s' + sampler[7] + 'Volume'] > -50) {
	        this.preMuteVol[sampler] = this.state['s' + sampler[7] + 'Volume'];
	        this.setState(_defineProperty({}, 's' + sampler[7] + 'Volume', -50));
	        this[sampler].volume.value = -10000;
	      } else {
	        var preVolume = this.preMuteVol[sampler];
	        this.setState(_defineProperty({}, 's' + sampler[7] + 'Volume', preVolume));
	        this[sampler].volume.value = preVolume;
	      }
	    }
	  }, {
	    key: 'updateSequence',
	    value: function updateSequence(e) {
	      var channel = e.currentTarget.dataset.channel;
	      var idx = parseInt(e.currentTarget.dataset.idx);
	      var oldSeq = this[channel];
	      if (oldSeq[idx]) {
	        oldSeq[idx] = null;
	        this['channelSequence' + channel[7]].remove(idx);
	      } else {
	        oldSeq[idx] = true;
	        this['channelSequence' + channel[7]].add(idx, true);
	      }
	      this[channel] = oldSeq;
	      this.setState({ key: Math.random() });
	    }
	  }, {
	    key: 'clearPattern',
	    value: function clearPattern() {
	      for (var i = 1; i < 9; i++) {
	        this['channel' + i] = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
	        for (var j = 0; j < 16; j++) {
	          this['channelSequence' + i].remove(j);
	        }
	      }
	      this.forceUpdate();
	    }
	  }, {
	    key: 'changeTempo',
	    value: function changeTempo(e) {
	      var newTempo = parseInt(e.currentTarget.value);
	      if (isNaN(newTempo)) {
	        newTempo = 1;
	      }
	      if (newTempo > 300) {
	        newTempo = 300;
	      }
	      _tone2.default.Transport.bpm.value = newTempo;
	      this.setState({ bpm: newTempo });
	    }
	  }, {
	    key: 'changeVolume',
	    value: function changeVolume(e, value) {
	      this.setState({ volume: value });
	      if (value < -39) {
	        value = -10000;
	      }
	      _tone2.default.Master.volume.value = value;
	    }
	  }, {
	    key: 'changeSVolume',
	    value: function changeSVolume(sampler, e) {
	      var stateVolume = sampler[0] + sampler[7] + 'Volume';
	      this.setState(_defineProperty({}, stateVolume, e));
	      if (e < -49) {
	        e = -10000;
	      }
	      this[sampler].volume.value = e;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var playPause = void 0;
	      if (this.state.playing) {
	        playPause = _react2.default.createElement('i', { className: 'fa fa-pause', 'aria-hidden': 'true' });
	      } else {
	        playPause = _react2.default.createElement('i', { className: 'fa fa-play', 'aria-hidden': 'true' });
	      }
	      var volumeIcon = void 0;
	      if (this.state.volume > -20) {
	        volumeIcon = _react2.default.createElement('i', { className: 'fa fa-volume-up', 'aria-hidden': 'true' });
	      } else if (this.state.volume > -40) {
	        volumeIcon = _react2.default.createElement('i', { className: 'fa fa-volume-down', 'aria-hidden': 'true' });
	      } else {
	        volumeIcon = _react2.default.createElement('i', { className: 'fa fa-volume-off', 'aria-hidden': 'true' });
	      }
	
	      var sequencerGrid = [];
	      var volumeKnobs = [];
	      for (var i = 1; i < 9; i++) {
	        sequencerGrid.push(_react2.default.createElement(
	          'div',
	          { className: 'channel-row', key: i },
	          this.channelButtons('channel' + i)
	        ));
	        volumeKnobs.push(_react2.default.createElement(
	          'div',
	          { className: 'volume-knob', key: i },
	          _react2.default.createElement(_reactCanvasKnob2.default, {
	            value: this.state['s' + i + 'Volume'],
	            width: 30,
	            height: 30,
	            max: 0,
	            min: -50,
	            thickness: 0.30,
	            displayInput: false,
	            onChange: this.changeSVolume.bind(this, 'sampler' + i) })
	        ));
	      }
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'sequencer' },
	        _react2.default.createElement(
	          'div',
	          { className: 'sequencer-header' },
	          _react2.default.createElement(
	            'div',
	            { className: 'transport-controls' },
	            _react2.default.createElement(
	              'div',
	              { className: 'start-stop', onClick: this.startStop },
	              playPause
	            ),
	            _react2.default.createElement('input', { type: 'number', className: 'tempo-input', onChange: this.changeTempo, value: this.state.bpm }),
	            _react2.default.createElement(
	              'div',
	              { className: 'volume-section' },
	              volumeIcon,
	              _react2.default.createElement(_Slider2.default, {
	                min: -40,
	                max: 0,
	                value: this.state.volume,
	                onChange: this.changeVolume,
	                className: 'master-volume' })
	            ),
	            _react2.default.createElement(
	              'div',
	              { className: 'clear-pattern', onClick: this.clearPattern },
	              'Clear'
	            )
	          ),
	          _react2.default.createElement(
	            'h2',
	            { className: 'sequencer-title' },
	            'react machine'
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'input-matrix' },
	          _react2.default.createElement(
	            'div',
	            { className: 'volume-knobs' },
	            volumeKnobs
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'solo-mute-buttons' },
	            this.soloMuteButtons()
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: 'sequencer-grid' },
	            sequencerGrid
	          )
	        )
	      );
	    }
	  }]);
	
	  return Sequencer;
	}(_react2.default.Component);
	
	exports.default = Sequencer;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function(root, factory){
	
		//UMD
		if ( true ) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return factory();
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module === "object") {
			module.exports = factory();
	 	} else {
			root.Tone = factory();
		}
	
	}(this, function(){
	
		"use strict";
		
		var Tone;
		//constructs the main Tone object
		function Main(func){
			Tone = func();
		}
		//invokes each of the modules with the main Tone object as the argument
		function Module(func){
			func(Tone);
		}	/**
		 *  Tone.js
		 *  @author Yotam Mann
		 *  @license http://opensource.org/licenses/MIT MIT License
		 *  @copyright 2014-2016 Yotam Mann
		 */
		Main(function () {
		    
		    //////////////////////////////////////////////////////////////////////////
		    //	WEB AUDIO CONTEXT
		    ///////////////////////////////////////////////////////////////////////////
		    function isUndef(val) {
		        return typeof val === 'undefined';
		    }
		    function isFunction(val) {
		        return typeof val === 'function';
		    }
		    var audioContext;
		    //polyfill for AudioContext and OfflineAudioContext
		    if (isUndef(window.AudioContext)) {
		        window.AudioContext = window.webkitAudioContext;
		    }
		    if (isUndef(window.OfflineAudioContext)) {
		        window.OfflineAudioContext = window.webkitOfflineAudioContext;
		    }
		    if (!isUndef(AudioContext)) {
		        audioContext = new AudioContext();
		    } else {
		        throw new Error('Web Audio is not supported in this browser');
		    }
		    //SHIMS////////////////////////////////////////////////////////////////////
		    if (!isFunction(AudioContext.prototype.createGain)) {
		        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
		    }
		    if (!isFunction(AudioContext.prototype.createDelay)) {
		        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
		    }
		    if (!isFunction(AudioContext.prototype.createPeriodicWave)) {
		        AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
		    }
		    if (!isFunction(AudioBufferSourceNode.prototype.start)) {
		        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;
		    }
		    if (!isFunction(AudioBufferSourceNode.prototype.stop)) {
		        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;
		    }
		    if (!isFunction(OscillatorNode.prototype.start)) {
		        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;
		    }
		    if (!isFunction(OscillatorNode.prototype.stop)) {
		        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;
		    }
		    if (!isFunction(OscillatorNode.prototype.setPeriodicWave)) {
		        OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
		    }
		    //extend the connect function to include Tones
		    if (isUndef(AudioNode.prototype._nativeConnect)) {
		        AudioNode.prototype._nativeConnect = AudioNode.prototype.connect;
		        AudioNode.prototype.connect = function (B, outNum, inNum) {
		            if (B.input) {
		                if (Array.isArray(B.input)) {
		                    if (isUndef(inNum)) {
		                        inNum = 0;
		                    }
		                    this.connect(B.input[inNum]);
		                } else {
		                    this.connect(B.input, outNum, inNum);
		                }
		            } else {
		                try {
		                    if (B instanceof AudioNode) {
		                        this._nativeConnect(B, outNum, inNum);
		                    } else {
		                        this._nativeConnect(B, outNum);
		                    }
		                } catch (e) {
		                    throw new Error('error connecting to node: ' + B);
		                }
		            }
		        };
		    }
		    ///////////////////////////////////////////////////////////////////////////
		    //	TONE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  @class  Tone is the base class of all other classes. It provides 
			 *          a lot of methods and functionality to all classes that extend
			 *          it. 
			 *  
			 *  @constructor
			 *  @alias Tone
			 *  @param {number} [inputs=1] the number of input nodes
			 *  @param {number} [outputs=1] the number of output nodes
			 */
		    var Tone = function (inputs, outputs) {
		        /**
				 *  the input node(s)
				 *  @type {GainNode|Array}
				 */
		        if (isUndef(inputs) || inputs === 1) {
		            this.input = this.context.createGain();
		        } else if (inputs > 1) {
		            this.input = new Array(inputs);
		        }
		        /**
				 *  the output node(s)
				 *  @type {GainNode|Array}
				 */
		        if (isUndef(outputs) || outputs === 1) {
		            this.output = this.context.createGain();
		        } else if (outputs > 1) {
		            this.output = new Array(inputs);
		        }
		    };
		    /**
			 *  Set the parameters at once. Either pass in an
			 *  object mapping parameters to values, or to set a
			 *  single parameter, by passing in a string and value.
			 *  The last argument is an optional ramp time which 
			 *  will ramp any signal values to their destination value
			 *  over the duration of the rampTime.
			 *  @param {Object|string} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone} this
			 *  @example
			 * //set values using an object
			 * filter.set({
			 * 	"frequency" : 300,
			 * 	"type" : highpass
			 * });
			 *  @example
			 * filter.set("type", "highpass");
			 *  @example
			 * //ramp to the value 220 over 3 seconds. 
			 * oscillator.set({
			 * 	"frequency" : 220
			 * }, 3);
			 */
		    Tone.prototype.set = function (params, value, rampTime) {
		        if (this.isObject(params)) {
		            rampTime = value;
		        } else if (this.isString(params)) {
		            var tmpObj = {};
		            tmpObj[params] = value;
		            params = tmpObj;
		        }
		        for (var attr in params) {
		            value = params[attr];
		            var parent = this;
		            if (attr.indexOf('.') !== -1) {
		                var attrSplit = attr.split('.');
		                for (var i = 0; i < attrSplit.length - 1; i++) {
		                    parent = parent[attrSplit[i]];
		                }
		                attr = attrSplit[attrSplit.length - 1];
		            }
		            var param = parent[attr];
		            if (isUndef(param)) {
		                continue;
		            }
		            if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
		                if (param.value !== value) {
		                    if (isUndef(rampTime)) {
		                        param.value = value;
		                    } else {
		                        param.rampTo(value, rampTime);
		                    }
		                }
		            } else if (param instanceof AudioParam) {
		                if (param.value !== value) {
		                    param.value = value;
		                }
		            } else if (param instanceof Tone) {
		                param.set(value);
		            } else if (param !== value) {
		                parent[attr] = value;
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the object's attributes. Given no arguments get
			 *  will return all available object properties and their corresponding
			 *  values. Pass in a single attribute to retrieve or an array
			 *  of attributes. The attribute strings can also include a "."
			 *  to access deeper properties.
			 *  @example
			 * osc.get();
			 * //returns {"type" : "sine", "frequency" : 440, ...etc}
			 *  @example
			 * osc.get("type");
			 * //returns { "type" : "sine"}
			 * @example
			 * //use dot notation to access deep properties
			 * synth.get(["envelope.attack", "envelope.release"]);
			 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
			 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return 
			 *  					                  all available.
			 *  @returns {Object}
			 */
		    Tone.prototype.get = function (params) {
		        if (isUndef(params)) {
		            params = this._collectDefaults(this.constructor);
		        } else if (this.isString(params)) {
		            params = [params];
		        }
		        var ret = {};
		        for (var i = 0; i < params.length; i++) {
		            var attr = params[i];
		            var parent = this;
		            var subRet = ret;
		            if (attr.indexOf('.') !== -1) {
		                var attrSplit = attr.split('.');
		                for (var j = 0; j < attrSplit.length - 1; j++) {
		                    var subAttr = attrSplit[j];
		                    subRet[subAttr] = subRet[subAttr] || {};
		                    subRet = subRet[subAttr];
		                    parent = parent[subAttr];
		                }
		                attr = attrSplit[attrSplit.length - 1];
		            }
		            var param = parent[attr];
		            if (this.isObject(params[attr])) {
		                subRet[attr] = param.get();
		            } else if (Tone.Signal && param instanceof Tone.Signal) {
		                subRet[attr] = param.value;
		            } else if (Tone.Param && param instanceof Tone.Param) {
		                subRet[attr] = param.value;
		            } else if (param instanceof AudioParam) {
		                subRet[attr] = param.value;
		            } else if (param instanceof Tone) {
		                subRet[attr] = param.get();
		            } else if (!isFunction(param) && !isUndef(param)) {
		                subRet[attr] = param;
		            }
		        }
		        return ret;
		    };
		    /**
			 *  collect all of the default attributes in one
			 *  @private
			 *  @param {function} constr the constructor to find the defaults from
			 *  @return {Array} all of the attributes which belong to the class
			 */
		    Tone.prototype._collectDefaults = function (constr) {
		        var ret = [];
		        if (!isUndef(constr.defaults)) {
		            ret = Object.keys(constr.defaults);
		        }
		        if (!isUndef(constr._super)) {
		            var superDefs = this._collectDefaults(constr._super);
		            //filter out repeats
		            for (var i = 0; i < superDefs.length; i++) {
		                if (ret.indexOf(superDefs[i]) === -1) {
		                    ret.push(superDefs[i]);
		                }
		            }
		        }
		        return ret;
		    };
		    /**
			 *  @returns {string} returns the name of the class as a string
			 */
		    Tone.prototype.toString = function () {
		        for (var className in Tone) {
		            var isLetter = className[0].match(/^[A-Z]$/);
		            var sameConstructor = Tone[className] === this.constructor;
		            if (isFunction(Tone[className]) && isLetter && sameConstructor) {
		                return className;
		            }
		        }
		        return 'Tone';
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	CLASS VARS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  A static pointer to the audio context accessible as Tone.context. 
			 *  @type {AudioContext}
			 */
		    Tone.context = audioContext;
		    /**
			 *  The audio context.
			 *  @type {AudioContext}
			 */
		    Tone.prototype.context = Tone.context;
		    /**
			 *  the default buffer size
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.bufferSize = 2048;
		    /**
			 *  The delay time of a single frame (128 samples according to the spec). 
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.blockTime = 128 / Tone.context.sampleRate;
		    /**
			 *  The time of a single sample
			 *  @type {number}
			 *  @static
			 *  @const
			 */
		    Tone.prototype.sampleTime = 1 / Tone.context.sampleRate;
		    ///////////////////////////////////////////////////////////////////////////
		    //	CONNECTIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  disconnect and dispose
			 *  @returns {Tone} this
			 */
		    Tone.prototype.dispose = function () {
		        if (!this.isUndef(this.input)) {
		            if (this.input instanceof AudioNode) {
		                this.input.disconnect();
		            }
		            this.input = null;
		        }
		        if (!this.isUndef(this.output)) {
		            if (this.output instanceof AudioNode) {
		                this.output.disconnect();
		            }
		            this.output = null;
		        }
		        return this;
		    };
		    /**
			 *  a silent connection to the DesinationNode
			 *  which will ensure that anything connected to it
			 *  will not be garbage collected
			 *  
			 *  @private
			 */
		    var _silentNode = null;
		    /**
			 *  makes a connection to ensure that the node will not be garbage collected
			 *  until 'dispose' is explicitly called
			 *
			 *  use carefully. circumvents JS and WebAudio's normal Garbage Collection behavior
			 *  @returns {Tone} this
			 */
		    Tone.prototype.noGC = function () {
		        this.output.connect(_silentNode);
		        return this;
		    };
		    AudioNode.prototype.noGC = function () {
		        this.connect(_silentNode);
		        return this;
		    };
		    /**
			 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
			 *  @param  {Tone | AudioParam | AudioNode} unit 
			 *  @param {number} [outputNum=0] optionally which output to connect from
			 *  @param {number} [inputNum=0] optionally which input to connect to
			 *  @returns {Tone} this
			 */
		    Tone.prototype.connect = function (unit, outputNum, inputNum) {
		        if (Array.isArray(this.output)) {
		            outputNum = this.defaultArg(outputNum, 0);
		            this.output[outputNum].connect(unit, 0, inputNum);
		        } else {
		            this.output.connect(unit, outputNum, inputNum);
		        }
		        return this;
		    };
		    /**
			 *  disconnect the output
			 *  @param {Number|AudioNode} output Either the output index to disconnect
			 *                                   if the output is an array, or the
			 *                                   node to disconnect from.
			 *  @returns {Tone} this
			 */
		    Tone.prototype.disconnect = function (output) {
		        if (Array.isArray(this.output)) {
		            output = this.defaultArg(output, 0);
		            this.output[output].disconnect();
		        } else if (!this.isUndef(output)) {
		            this.output.disconnect(output);
		        } else {
		            this.output.disconnect();
		        }
		        return this;
		    };
		    /**
			 *  connect together all of the arguments in series
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.connectSeries = function () {
		        if (arguments.length > 1) {
		            var currentUnit = arguments[0];
		            for (var i = 1; i < arguments.length; i++) {
		                var toUnit = arguments[i];
		                currentUnit.connect(toUnit);
		                currentUnit = toUnit;
		            }
		        }
		        return this;
		    };
		    /**
			 *  Connect the output of this node to the rest of the nodes in series.
			 *  @example
			 *  //connect a node to an effect, panVol and then to the master output
			 *  node.chain(effect, panVol, Tone.Master);
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.chain = function () {
		        if (arguments.length > 0) {
		            var currentUnit = this;
		            for (var i = 0; i < arguments.length; i++) {
		                var toUnit = arguments[i];
		                currentUnit.connect(toUnit);
		                currentUnit = toUnit;
		            }
		        }
		        return this;
		    };
		    /**
			 *  connect the output of this node to the rest of the nodes in parallel.
			 *  @param {...AudioParam|Tone|AudioNode} nodes
			 *  @returns {Tone} this
			 */
		    Tone.prototype.fan = function () {
		        if (arguments.length > 0) {
		            for (var i = 0; i < arguments.length; i++) {
		                this.connect(arguments[i]);
		            }
		        }
		        return this;
		    };
		    //give native nodes chain and fan methods
		    AudioNode.prototype.chain = Tone.prototype.chain;
		    AudioNode.prototype.fan = Tone.prototype.fan;
		    ///////////////////////////////////////////////////////////////////////////
		    //	UTILITIES / HELPERS / MATHS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  If the `given` parameter is undefined, use the `fallback`. 
			 *  If both `given` and `fallback` are object literals, it will
			 *  return a deep copy which includes all of the parameters from both 
			 *  objects. If a parameter is undefined in given, it will return
			 *  the fallback property. 
			 *  <br><br>
			 *  WARNING: if object is self referential, it will go into an an 
			 *  infinite recursive loop.
			 *  
			 *  @param  {*} given    
			 *  @param  {*} fallback 
			 *  @return {*}          
			 */
		    Tone.prototype.defaultArg = function (given, fallback) {
		        if (this.isObject(given) && this.isObject(fallback)) {
		            var ret = {};
		            //make a deep copy of the given object
		            for (var givenProp in given) {
		                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);
		            }
		            for (var fallbackProp in fallback) {
		                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);
		            }
		            return ret;
		        } else {
		            return isUndef(given) ? fallback : given;
		        }
		    };
		    /**
			 *  returns the args as an options object with given arguments
			 *  mapped to the names provided. 
			 *
			 *  if the args given is an array containing only one object, it is assumed
			 *  that that's already the options object and will just return it. 
			 *  
			 *  @param  {Array} values  the 'arguments' object of the function
			 *  @param  {Array} keys the names of the arguments as they
			 *                                 should appear in the options object
			 *  @param {Object=} defaults optional defaults to mixin to the returned 
			 *                            options object                              
			 *  @return {Object}       the options object with the names mapped to the arguments
			 */
		    Tone.prototype.optionsObject = function (values, keys, defaults) {
		        var options = {};
		        if (values.length === 1 && this.isObject(values[0])) {
		            options = values[0];
		        } else {
		            for (var i = 0; i < keys.length; i++) {
		                options[keys[i]] = values[i];
		            }
		        }
		        if (!this.isUndef(defaults)) {
		            return this.defaultArg(options, defaults);
		        } else {
		            return options;
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // TYPE CHECKING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  test if the arg is undefined
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is undefined
			 *  @function
			 */
		    Tone.prototype.isUndef = isUndef;
		    /**
			 *  test if the arg is a function
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a function
			 *  @function
			 */
		    Tone.prototype.isFunction = isFunction;
		    /**
			 *  Test if the argument is a number.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a number
			 */
		    Tone.prototype.isNumber = function (arg) {
		        return typeof arg === 'number';
		    };
		    /**
			 *  Test if the given argument is an object literal (i.e. `{}`);
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is an object literal.
			 */
		    Tone.prototype.isObject = function (arg) {
		        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;
		    };
		    /**
			 *  Test if the argument is a boolean.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a boolean
			 */
		    Tone.prototype.isBoolean = function (arg) {
		        return typeof arg === 'boolean';
		    };
		    /**
			 *  Test if the argument is an Array
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is an array
			 */
		    Tone.prototype.isArray = function (arg) {
		        return Array.isArray(arg);
		    };
		    /**
			 *  Test if the argument is a string.
			 *  @param {*} arg the argument to test
			 *  @returns {boolean} true if the arg is a string
			 */
		    Tone.prototype.isString = function (arg) {
		        return typeof arg === 'string';
		    };
		    /**
			 *  An empty function.
			 *  @static
			 */
		    Tone.noOp = function () {
		    };
		    /**
			 *  Make the property not writable. Internal use only. 
			 *  @private
			 *  @param  {string}  property  the property to make not writable
			 */
		    Tone.prototype._readOnly = function (property) {
		        if (Array.isArray(property)) {
		            for (var i = 0; i < property.length; i++) {
		                this._readOnly(property[i]);
		            }
		        } else {
		            Object.defineProperty(this, property, {
		                writable: false,
		                enumerable: true
		            });
		        }
		    };
		    /**
			 *  Make an attribute writeable. Interal use only. 
			 *  @private
			 *  @param  {string}  property  the property to make writable
			 */
		    Tone.prototype._writable = function (property) {
		        if (Array.isArray(property)) {
		            for (var i = 0; i < property.length; i++) {
		                this._writable(property[i]);
		            }
		        } else {
		            Object.defineProperty(this, property, { writable: true });
		        }
		    };
		    /**
			 * Possible play states. 
			 * @enum {string}
			 */
		    Tone.State = {
		        Started: 'started',
		        Stopped: 'stopped',
		        Paused: 'paused'
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // GAIN CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Equal power gain scale. Good for cross-fading.
			 *  @param  {NormalRange} percent (0-1)
			 *  @return {Number}         output gain (0-1)
			 */
		    Tone.prototype.equalPowerScale = function (percent) {
		        var piFactor = 0.5 * Math.PI;
		        return Math.sin(percent * piFactor);
		    };
		    /**
			 *  Convert decibels into gain.
			 *  @param  {Decibels} db
			 *  @return {Number}   
			 */
		    Tone.prototype.dbToGain = function (db) {
		        return Math.pow(2, db / 6);
		    };
		    /**
			 *  Convert gain to decibels.
			 *  @param  {Number} gain (0-1)
			 *  @return {Decibels}   
			 */
		    Tone.prototype.gainToDb = function (gain) {
		        return 20 * (Math.log(gain) / Math.LN10);
		    };
		    /**
			 *  Convert an interval (in semitones) to a frequency ratio.
			 *  @param  {Interval} interval the number of semitones above the base note
			 *  @return {number}          the frequency ratio
			 *  @example
			 * tone.intervalToFrequencyRatio(0); // 1
			 * tone.intervalToFrequencyRatio(12); // 2
			 * tone.intervalToFrequencyRatio(-12); // 0.5
			 */
		    Tone.prototype.intervalToFrequencyRatio = function (interval) {
		        return Math.pow(2, interval / 12);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	TIMING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Return the current time of the AudioContext clock.
			 *  @return {Number} the currentTime from the AudioContext
			 */
		    Tone.prototype.now = function () {
		        return this.context.currentTime;
		    };
		    /**
			 *  Return the current time of the AudioContext clock.
			 *  @return {Number} the currentTime from the AudioContext
			 *  @static
			 */
		    Tone.now = function () {
		        return Tone.context.currentTime;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	INHERITANCE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  have a child inherit all of Tone's (or a parent's) prototype
			 *  to inherit the parent's properties, make sure to call 
			 *  Parent.call(this) in the child's constructor
			 *
			 *  based on closure library's inherit function
			 *
			 *  @static
			 *  @param  {function} 	child  
			 *  @param  {function=} parent (optional) parent to inherit from
			 *                             if no parent is supplied, the child
			 *                             will inherit from Tone
			 */
		    Tone.extend = function (child, parent) {
		        if (isUndef(parent)) {
		            parent = Tone;
		        }
		        function TempConstructor() {
		        }
		        TempConstructor.prototype = parent.prototype;
		        child.prototype = new TempConstructor();
		        /** @override */
		        child.prototype.constructor = child;
		        child._super = parent;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	CONTEXT
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  array of callbacks to be invoked when a new context is added
			 *  @private 
			 *  @private
			 */
		    var newContextCallbacks = [];
		    /**
			 *  invoke this callback when a new context is added
			 *  will be invoked initially with the first context
			 *  @private 
			 *  @static
			 *  @param {function(AudioContext)} callback the callback to be invoked
			 *                                           with the audio context
			 */
		    Tone._initAudioContext = function (callback) {
		        //invoke the callback with the existing AudioContext
		        callback(Tone.context);
		        //add it to the array
		        newContextCallbacks.push(callback);
		    };
		    /**
			 *  Tone automatically creates a context on init, but if you are working
			 *  with other libraries which also create an AudioContext, it can be
			 *  useful to set your own. If you are going to set your own context, 
			 *  be sure to do it at the start of your code, before creating any objects.
			 *  @static
			 *  @param {AudioContext} ctx The new audio context to set
			 */
		    Tone.setContext = function (ctx) {
		        //set the prototypes
		        Tone.prototype.context = ctx;
		        Tone.context = ctx;
		        //invoke all the callbacks
		        for (var i = 0; i < newContextCallbacks.length; i++) {
		            newContextCallbacks[i](ctx);
		        }
		    };
		    //setup the context
		    Tone._initAudioContext(function (audioContext) {
		        //set the blockTime
		        Tone.prototype.blockTime = 128 / audioContext.sampleRate;
		        Tone.prototype.sampleTime = 1 / audioContext.sampleRate;
		        _silentNode = audioContext.createGain();
		        _silentNode.gain.value = 0;
		        _silentNode.connect(audioContext.destination);
		    });
		    Tone.version = 'r8';
		    // allow optional silencing of this log
		    if (!window.TONE_SILENCE_VERSION_LOGGING) {
		        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');
		    }
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base class for all Signals. Used Internally. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 */
		    Tone.SignalBase = function () {
		    };
		    Tone.extend(Tone.SignalBase);
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.SignalBase} this
			 */
		    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
		        //zero it out so that the signal can have full control
		        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {
		            //cancel changes
		            node._param.cancelScheduledValues(0);
		            //reset the value
		            node._param.value = 0;
		            //mark the value as overridden
		            node.overridden = true;
		        } else if (node instanceof AudioParam) {
		            node.cancelScheduledValues(0);
		            node.value = 0;
		        }
		        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);
		        return this;
		    };
		    return Tone.SignalBase;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Wraps the native Web Audio API 
			 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {function|Array|Number} mapping The function used to define the values. 
			 *                                    The mapping function should take two arguments: 
			 *                                    the first is the value at the current position 
			 *                                    and the second is the array position. 
			 *                                    If the argument is an array, that array will be
			 *                                    set as the wave shaping function. The input
			 *                                    signal is an AudioRange [-1, 1] value and the output
			 *                                    signal can take on any numerical values. 
			 *                                    
			 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
			 *  @example
			 * var timesTwo = new Tone.WaveShaper(function(val){
			 * 	return val * 2;
			 * }, 2048);
			 *  @example
			 * //a waveshaper can also be constructed with an array of values
			 * var invert = new Tone.WaveShaper([1, -1]);
			 */
		    Tone.WaveShaper = function (mapping, bufferLen) {
		        /**
				 *  the waveshaper
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._shaper = this.input = this.output = this.context.createWaveShaper();
		        /**
				 *  the waveshapers curve
				 *  @type {Float32Array}
				 *  @private
				 */
		        this._curve = null;
		        if (Array.isArray(mapping)) {
		            this.curve = mapping;
		        } else if (isFinite(mapping) || this.isUndef(mapping)) {
		            this._curve = new Float32Array(this.defaultArg(mapping, 1024));
		        } else if (this.isFunction(mapping)) {
		            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));
		            this.setMap(mapping);
		        }
		    };
		    Tone.extend(Tone.WaveShaper, Tone.SignalBase);
		    /**
			 *  Uses a mapping function to set the value of the curve. 
			 *  @param {function} mapping The function used to define the values. 
			 *                            The mapping function take two arguments: 
			 *                            the first is the value at the current position 
			 *                            which goes from -1 to 1 over the number of elements
			 *                            in the curve array. The second argument is the array position. 
			 *  @returns {Tone.WaveShaper} this
			 *  @example
			 * //map the input signal from [-1, 1] to [0, 10]
			 * shaper.setMap(function(val, index){
			 * 	return (val + 1) * 5;
			 * })
			 */
		    Tone.WaveShaper.prototype.setMap = function (mapping) {
		        for (var i = 0, len = this._curve.length; i < len; i++) {
		            var normalized = i / (len - 1) * 2 - 1;
		            this._curve[i] = mapping(normalized, i);
		        }
		        this._shaper.curve = this._curve;
		        return this;
		    };
		    /**
			 * The array to set as the waveshaper curve. For linear curves
			 * array length does not make much difference, but for complex curves
			 * longer arrays will provide smoother interpolation. 
			 * @memberOf Tone.WaveShaper#
			 * @type {Array}
			 * @name curve
			 */
		    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {
		        get: function () {
		            return this._shaper.curve;
		        },
		        set: function (mapping) {
		            this._curve = new Float32Array(mapping);
		            this._shaper.curve = this._curve;
		        }
		    });
		    /**
			 * Specifies what type of oversampling (if any) should be used when 
			 * applying the shaping curve. Can either be "none", "2x" or "4x". 
			 * @memberOf Tone.WaveShaper#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            if ([
		                    'none',
		                    '2x',
		                    '4x'
		                ].indexOf(oversampling) !== -1) {
		                this._shaper.oversample = oversampling;
		            } else {
		                throw new RangeError('Tone.WaveShaper: oversampling must be either \'none\', \'2x\', or \'4x\'');
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.WaveShaper} this
			 */
		    Tone.WaveShaper.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._shaper.disconnect();
		        this._shaper = null;
		        this._curve = null;
		        return this;
		    };
		    return Tone.WaveShaper;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.TimeBase is a flexible encoding of time
			 *         which can be evaluated to and from a string.
			 *         Parsing code modified from https://code.google.com/p/tapdigit/
			 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
			 *  @extends {Tone}
			 *  @param  {Time}  val    The time value as a number or string
			 *  @param  {String=}  units  Unit values
			 *  @example
			 * Tone.TimeBase(4, "n")
			 * Tone.TimeBase(2, "t")
			 * Tone.TimeBase("2t").add("1m")
			 * Tone.TimeBase("2t + 1m");
			 */
		    Tone.TimeBase = function (val, units) {
		        //allows it to be constructed with or without 'new'
		        if (this instanceof Tone.TimeBase) {
		            /**
					 *  Any expressions parsed from the Time
					 *  @type  {Array}
					 *  @private
					 */
		            this._expr = this._noOp;
		            if (val instanceof Tone.TimeBase) {
		                this.copy(val);
		            } else if (!this.isUndef(units) || this.isNumber(val)) {
		                //default units
		                units = this.defaultArg(units, this._defaultUnits);
		                var method = this._primaryExpressions[units].method;
		                this._expr = method.bind(this, val);
		            } else if (this.isString(val)) {
		                this.set(val);
		            } else if (this.isUndef(val)) {
		                //default expression
		                this._expr = this._defaultExpr();
		            }
		        } else {
		            return new Tone.TimeBase(val, units);
		        }
		    };
		    Tone.extend(Tone.TimeBase);
		    /**
			 *  Repalce the current time value with the value
			 *  given by the expression string.
			 *  @param  {String}  exprString
			 *  @return {Tone.TimeBase} this
			 */
		    Tone.TimeBase.prototype.set = function (exprString) {
		        this._expr = this._parseExprString(exprString);
		        return this;
		    };
		    /**
			 *  Return a clone of the TimeBase object.
			 *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase
			 */
		    Tone.TimeBase.prototype.clone = function () {
		        var instance = new this.constructor();
		        instance.copy(this);
		        return instance;
		    };
		    /**
			 *  Copies the value of time to this Time
			 *  @param {Tone.TimeBase} time
			 *  @return  {TimeBase}
			 */
		    Tone.TimeBase.prototype.copy = function (time) {
		        var val = time._expr();
		        return this.set(val);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	ABSTRACT SYNTAX TREE PARSER
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  All the primary expressions.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._primaryExpressions = {
		        'n': {
		            regexp: /^(\d+)n/i,
		            method: function (value) {
		                value = parseInt(value);
		                if (value === 1) {
		                    return this._beatsToUnits(this._timeSignature());
		                } else {
		                    return this._beatsToUnits(4 / value);
		                }
		            }
		        },
		        't': {
		            regexp: /^(\d+)t/i,
		            method: function (value) {
		                value = parseInt(value);
		                return this._beatsToUnits(8 / (parseInt(value) * 3));
		            }
		        },
		        'm': {
		            regexp: /^(\d+)m/i,
		            method: function (value) {
		                return this._beatsToUnits(parseInt(value) * this._timeSignature());
		            }
		        },
		        'i': {
		            regexp: /^(\d+)i/i,
		            method: function (value) {
		                return this._ticksToUnits(parseInt(value));
		            }
		        },
		        'hz': {
		            regexp: /^(\d+(?:\.\d+)?)hz/i,
		            method: function (value) {
		                return this._frequencyToUnits(parseFloat(value));
		            }
		        },
		        'tr': {
		            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
		            method: function (m, q, s) {
		                var total = 0;
		                if (m && m !== '0') {
		                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));
		                }
		                if (q && q !== '0') {
		                    total += this._beatsToUnits(parseFloat(q));
		                }
		                if (s && s !== '0') {
		                    total += this._beatsToUnits(parseFloat(s) / 4);
		                }
		                return total;
		            }
		        },
		        's': {
		            regexp: /^(\d+(?:\.\d+)?s)/,
		            method: function (value) {
		                return this._secondsToUnits(parseFloat(value));
		            }
		        },
		        'samples': {
		            regexp: /^(\d+)samples/,
		            method: function (value) {
		                return parseInt(value) / this.context.sampleRate;
		            }
		        },
		        'default': {
		            regexp: /^(\d+(?:\.\d+)?)/,
		            method: function (value) {
		                return this._primaryExpressions[this._defaultUnits].method.call(this, value);
		            }
		        }
		    };
		    /**
			 *  All the binary expressions that TimeBase can accept.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._binaryExpressions = {
		        '+': {
		            regexp: /^\+/,
		            precedence: 2,
		            method: function (lh, rh) {
		                return lh() + rh();
		            }
		        },
		        '-': {
		            regexp: /^\-/,
		            precedence: 2,
		            method: function (lh, rh) {
		                return lh() - rh();
		            }
		        },
		        '*': {
		            regexp: /^\*/,
		            precedence: 1,
		            method: function (lh, rh) {
		                return lh() * rh();
		            }
		        },
		        '/': {
		            regexp: /^\//,
		            precedence: 1,
		            method: function (lh, rh) {
		                return lh() / rh();
		            }
		        }
		    };
		    /**
			 *  All the unary expressions.
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._unaryExpressions = {
		        'neg': {
		            regexp: /^\-/,
		            method: function (lh) {
		                return -lh();
		            }
		        }
		    };
		    /**
			 *  Syntactic glue which holds expressions together
			 *  @private
			 *  @type  {Object}
			 */
		    Tone.TimeBase.prototype._syntaxGlue = {
		        '(': { regexp: /^\(/ },
		        ')': { regexp: /^\)/ }
		    };
		    /**
			 *  tokenize the expression based on the Expressions object
			 *  @param   {string} expr 
			 *  @return  {Object}      returns two methods on the tokenized list, next and peek
			 *  @private
			 */
		    Tone.TimeBase.prototype._tokenize = function (expr) {
		        var position = -1;
		        var tokens = [];
		        while (expr.length > 0) {
		            expr = expr.trim();
		            var token = getNextToken(expr, this);
		            tokens.push(token);
		            expr = expr.substr(token.value.length);
		        }
		        function getNextToken(expr, context) {
		            var expressions = [
		                '_binaryExpressions',
		                '_unaryExpressions',
		                '_primaryExpressions',
		                '_syntaxGlue'
		            ];
		            for (var i = 0; i < expressions.length; i++) {
		                var group = context[expressions[i]];
		                for (var opName in group) {
		                    var op = group[opName];
		                    var reg = op.regexp;
		                    var match = expr.match(reg);
		                    if (match !== null) {
		                        return {
		                            method: op.method,
		                            precedence: op.precedence,
		                            regexp: op.regexp,
		                            value: match[0]
		                        };
		                    }
		                }
		            }
		            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);
		        }
		        return {
		            next: function () {
		                return tokens[++position];
		            },
		            peek: function () {
		                return tokens[position + 1];
		            }
		        };
		    };
		    /**
			 *  Given a token, find the value within the groupName
			 *  @param {Object} token
			 *  @param {String} groupName
			 *  @param {Number} precedence
			 *  @private
			 */
		    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {
		        var ret = false;
		        if (!this.isUndef(token)) {
		            for (var opName in group) {
		                var op = group[opName];
		                if (op.regexp.test(token.value)) {
		                    if (!this.isUndef(prec)) {
		                        if (op.precedence === prec) {
		                            return op;
		                        }
		                    } else {
		                        return op;
		                    }
		                }
		            }
		        }
		        return ret;
		    };
		    /**
			 *  Match a binary expression given the token and the precedence
			 *  @param {Lexer} lexer
			 *  @param {Number} precedence
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {
		        if (this.isUndef(precedence)) {
		            precedence = 2;
		        }
		        var expr;
		        if (precedence < 0) {
		            expr = this._parseUnary(lexer);
		        } else {
		            expr = this._parseBinary(lexer, precedence - 1);
		        }
		        var token = lexer.peek();
		        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {
		            token = lexer.next();
		            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));
		            token = lexer.peek();
		        }
		        return expr;
		    };
		    /**
			 *  Match a unary expression.
			 *  @param {Lexer} lexer
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseUnary = function (lexer) {
		        var token, expr;
		        token = lexer.peek();
		        var op = this._matchGroup(token, this._unaryExpressions);
		        if (op) {
		            token = lexer.next();
		            expr = this._parseUnary(lexer);
		            return op.method.bind(this, expr);
		        }
		        return this._parsePrimary(lexer);
		    };
		    /**
			 *  Match a primary expression (a value).
			 *  @param {Lexer} lexer
			 *  @private
			 */
		    Tone.TimeBase.prototype._parsePrimary = function (lexer) {
		        var token, expr;
		        token = lexer.peek();
		        if (this.isUndef(token)) {
		            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');
		        }
		        if (this._matchGroup(token, this._primaryExpressions)) {
		            token = lexer.next();
		            var matching = token.value.match(token.regexp);
		            return token.method.bind(this, matching[1], matching[2], matching[3]);
		        }
		        if (token && token.value === '(') {
		            lexer.next();
		            expr = this._parseBinary(lexer);
		            token = lexer.next();
		            if (!(token && token.value === ')')) {
		                throw new SyntaxError('Expected )');
		            }
		            return expr;
		        }
		        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);
		    };
		    /**
			 *  Recursively parse the string expression into a syntax tree.
			 *  @param   {string} expr 
			 *  @return  {Function} the bound method to be evaluated later
			 *  @private
			 */
		    Tone.TimeBase.prototype._parseExprString = function (exprString) {
		        if (!this.isString(exprString)) {
		            exprString = exprString.toString();
		        }
		        var lexer = this._tokenize(exprString);
		        var tree = this._parseBinary(lexer);
		        return tree;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	DEFAULTS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  The initial expression value
			 *  @return  {Number}  The initial value 0
			 *  @private
			 */
		    Tone.TimeBase.prototype._noOp = function () {
		        return 0;
		    };
		    /**
			 *  The default expression value if no arguments are given
			 *  @private
			 */
		    Tone.TimeBase.prototype._defaultExpr = function () {
		        return this._noOp;
		    };
		    /**
			 *  The default units if none are given.
			 *  @private
			 */
		    Tone.TimeBase.prototype._defaultUnits = 's';
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value of a frequency in the current units
			 *  @param {Frequency} freq
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {
		        return 1 / freq;
		    };
		    /**
			 *  Return the value of the beats in the current units
			 *  @param {Number} beats
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._beatsToUnits = function (beats) {
		        return 60 / Tone.Transport.bpm.value * beats;
		    };
		    /**
			 *  Returns the value of a second in the current units
			 *  @param {Seconds} seconds
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {
		        return seconds;
		    };
		    /**
			 *  Returns the value of a tick in the current time units
			 *  @param {Ticks} ticks
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {
		        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);
		    };
		    /**
			 *  Return the time signature.
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.TimeBase.prototype._timeSignature = function () {
		        return Tone.Transport.timeSignature;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Push an expression onto the expression list
			 *  @param  {Time}  val
			 *  @param  {String}  type
			 *  @param  {String}  units
			 *  @return  {Tone.TimeBase} 
			 *  @private
			 */
		    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {
		        //create the expression
		        if (!(val instanceof Tone.TimeBase)) {
		            val = new this.constructor(val, units);
		        }
		        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);
		        return this;
		    };
		    /**
			 *  Add to the current value.
			 *  @param  {Time}  val    The value to add
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").add("1m"); //"3m"
			 */
		    Tone.TimeBase.prototype.add = function (val, units) {
		        return this._pushExpr(val, '+', units);
		    };
		    /**
			 *  Subtract the value from the current time.
			 *  @param  {Time}  val    The value to subtract
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").sub("1m"); //"1m"
			 */
		    Tone.TimeBase.prototype.sub = function (val, units) {
		        return this._pushExpr(val, '-', units);
		    };
		    /**
			 *  Multiply the current value by the given time.
			 *  @param  {Time}  val    The value to multiply
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").mult("2"); //"4m"
			 */
		    Tone.TimeBase.prototype.mult = function (val, units) {
		        return this._pushExpr(val, '*', units);
		    };
		    /**
			 *  Divide the current value by the given time.
			 *  @param  {Time}  val    The value to divide by
			 *  @param  {String=}  units  Optional units to use with the value.
			 *  @return  {Tone.TimeBase}  this
			 *  @example
			 * Tone.TimeBase("2m").div(2); //"1m"
			 */
		    Tone.TimeBase.prototype.div = function (val, units) {
		        return this._pushExpr(val, '/', units);
		    };
		    /**
			 *  Evaluate the time value. Returns the time
			 *  in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.TimeBase.prototype.eval = function () {
		        return this._expr();
		    };
		    /**
			 *  Clean up
			 *  @return {Tone.TimeBase} this
			 */
		    Tone.TimeBase.prototype.dispose = function () {
		        this._expr = null;
		    };
		    return Tone.TimeBase;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Time is a primitive type for encoding Time values. 
			 *         Eventually all time values are evaluated to seconds
			 *         using the `eval` method. Tone.Time can be constructed
			 *         with or without the `new` keyword. Tone.Time can be passed
			 *         into the parameter of any method which takes time as an argument. 
			 *  @constructor
			 *  @extends {Tone.TimeBase}
			 *  @param  {String|Number}  val    The time value.
			 *  @param  {String=}  units  The units of the value.
			 *  @example
			 * var t = Tone.Time("4n");//encodes a quarter note
			 * t.mult(4); // multiply that value by 4
			 * t.toNotation(); //returns "1m"
			 */
		    Tone.Time = function (val, units) {
		        if (this instanceof Tone.Time) {
		            /**
					 *  If the current clock time should
					 *  be added to the output
					 *  @type  {Boolean}
					 *  @private
					 */
		            this._plusNow = false;
		            Tone.TimeBase.call(this, val, units);
		        } else {
		            return new Tone.Time(val, units);
		        }
		    };
		    Tone.extend(Tone.Time, Tone.TimeBase);
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);
		    /*
			 *  Adds an additional unary expression
			 *  which quantizes values to the next subdivision
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Time.prototype._unaryExpressions.quantize = {
		        regexp: /^@/,
		        method: function (rh) {
		            return Tone.Transport.nextSubdivision(rh());
		        }
		    };
		    /*
			 *  Adds an additional unary expression
			 *  which adds the current clock time.
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Time.prototype._unaryExpressions.now = {
		        regexp: /^\+/,
		        method: function (lh) {
		            this._plusNow = true;
		            return lh();
		        }
		    };
		    /**
			 *  Quantize the time by the given subdivision. Optionally add a
			 *  percentage which will move the time value towards the ideal
			 *  quantized value by that percentage. 
			 *  @param  {Number|Time}  val    The subdivision to quantize to
			 *  @param  {NormalRange}  [percent=1]  Move the time value
			 *                                   towards the quantized value by
			 *                                   a percentage.
			 *  @return  {Tone.Time}  this
			 *  @example
			 * Tone.Time(21).quantize(2).eval() //returns 22
			 * Tone.Time(0.6).quantize("4n", 0.5).eval() //returns 0.55
			 */
		    Tone.Time.prototype.quantize = function (subdiv, percent) {
		        percent = this.defaultArg(percent, 1);
		        this._expr = function (expr, subdivision, percent) {
		            expr = expr();
		            subdivision = subdivision.toSeconds();
		            var multiple = Math.round(expr / subdivision);
		            var ideal = multiple * subdivision;
		            var diff = ideal - expr;
		            return expr + diff * percent;
		        }.bind(this, this._expr, new this.constructor(subdiv), percent);
		        return this;
		    };
		    /**
			 *  Adds the clock time to the time expression at the 
			 *  moment of evaluation. 
			 *  @return  {Tone.Time}  this
			 */
		    Tone.Time.prototype.addNow = function () {
		        this._plusNow = true;
		        return this;
		    };
		    /**
			 *  @override
			 *  Override the default value return when no arguments are passed in.
			 *  The default value is 'now'
			 *  @private
			 */
		    Tone.Time.prototype._defaultExpr = function () {
		        this._plusNow = true;
		        return this._noOp;
		    };
		    /**
			 *  Copies the value of time to this Time
			 *  @param {Tone.Time} time
			 *  @return  {Time}
			 */
		    Tone.Time.prototype.copy = function (time) {
		        Tone.TimeBase.prototype.copy.call(this, time);
		        this._plusNow = time._plusNow;
		        return this;
		    };
		    //CONVERSIONS//////////////////////////////////////////////////////////////
		    /**
			 *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. 
			 *  @return {Notation} 
			 *  @example
			 * //if the Transport is at 120bpm:
			 * Tone.Time(2).toNotation();//returns "1m"
			 */
		    Tone.Time.prototype.toNotation = function () {
		        var time = this.toSeconds();
		        var testNotations = [
		            '1m',
		            '2n',
		            '4n',
		            '8n',
		            '16n',
		            '32n',
		            '64n',
		            '128n'
		        ];
		        var retNotation = this._toNotationHelper(time, testNotations);
		        //try the same thing but with tripelets
		        var testTripletNotations = [
		            '1m',
		            '2n',
		            '2t',
		            '4n',
		            '4t',
		            '8n',
		            '8t',
		            '16n',
		            '16t',
		            '32n',
		            '32t',
		            '64n',
		            '64t',
		            '128n'
		        ];
		        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);
		        //choose the simpler expression of the two
		        if (retTripletNotation.split('+').length < retNotation.split('+').length) {
		            return retTripletNotation;
		        } else {
		            return retNotation;
		        }
		    };
		    /**
			 *  Helper method for Tone.toNotation
			 *  @param {Number} units 
			 *  @param {Array} testNotations
			 *  @return {String}
			 *  @private
			 */
		    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {
		        //the threshold is the last value in the array
		        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);
		        var retNotation = '';
		        for (var i = 0; i < testNotations.length; i++) {
		            var notationTime = this._notationToUnits(testNotations[i]);
		            //account for floating point errors (i.e. round up if the value is 0.999999)
		            var multiple = units / notationTime;
		            var floatingPointError = 0.000001;
		            if (1 - multiple % 1 < floatingPointError) {
		                multiple += floatingPointError;
		            }
		            multiple = Math.floor(multiple);
		            if (multiple > 0) {
		                if (multiple === 1) {
		                    retNotation += testNotations[i];
		                } else {
		                    retNotation += multiple.toString() + '*' + testNotations[i];
		                }
		                units -= multiple * notationTime;
		                if (units < threshold) {
		                    break;
		                } else {
		                    retNotation += ' + ';
		                }
		            }
		        }
		        if (retNotation === '') {
		            retNotation = '0';
		        }
		        return retNotation;
		    };
		    /**
			 *  Convert a notation value to the current units
			 *  @param  {Notation}  notation 
			 *  @return  {Number} 
			 *  @private
			 */
		    Tone.Time.prototype._notationToUnits = function (notation) {
		        var primaryExprs = this._primaryExpressions;
		        var notationExprs = [
		            primaryExprs.n,
		            primaryExprs.t,
		            primaryExprs.m
		        ];
		        for (var i = 0; i < notationExprs.length; i++) {
		            var expr = notationExprs[i];
		            var match = notation.match(expr.regexp);
		            if (match) {
		                return expr.method.call(this, match[1]);
		            }
		        }
		    };
		    /**
			 *  Return the time encoded as Bars:Beats:Sixteenths.
			 *  @return  {BarsBeatsSixteenths}
			 */
		    Tone.Time.prototype.toBarsBeatsSixteenths = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.toSeconds() / quarterTime;
		        var measures = Math.floor(quarters / this._timeSignature());
		        var sixteenths = quarters % 1 * 4;
		        quarters = Math.floor(quarters) % this._timeSignature();
		        sixteenths = sixteenths.toString();
		        if (sixteenths.length > 3) {
		            sixteenths = parseFloat(sixteenths).toFixed(3);
		        }
		        var progress = [
		            measures,
		            quarters,
		            sixteenths
		        ];
		        return progress.join(':');
		    };
		    /**
			 *  Return the time in ticks.
			 *  @return  {Ticks}
			 */
		    Tone.Time.prototype.toTicks = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.eval() / quarterTime;
		        return Math.floor(quarters * Tone.Transport.PPQ);
		    };
		    /**
			 *  Return the time in samples
			 *  @return  {Samples}  
			 */
		    Tone.Time.prototype.toSamples = function () {
		        return this.toSeconds() * this.context.sampleRate;
		    };
		    /**
			 *  Return the time as a frequency value
			 *  @return  {Frequency} 
			 *  @example
			 * Tone.Time(2).toFrequency(); //0.5
			 */
		    Tone.Time.prototype.toFrequency = function () {
		        return 1 / this.toSeconds();
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.Time.prototype.toSeconds = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the time in milliseconds.
			 *  @return  {Milliseconds} 
			 */
		    Tone.Time.prototype.toMilliseconds = function () {
		        return this.toSeconds() * 1000;
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds} 
			 */
		    Tone.Time.prototype.eval = function () {
		        var val = this._expr();
		        return val + (this._plusNow ? this.now() : 0);
		    };
		    return Tone.Time;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Frequency is a primitive type for encoding Frequency values. 
			 *         Eventually all time values are evaluated to hertz
			 *         using the `eval` method. 
			 *  @constructor
			 *  @extends {Tone.TimeBase}
			 *  @param  {String|Number}  val    The time value.
			 *  @param  {String=}  units  The units of the value.
			 *  @example
			 * Tone.Frequency("C3").eval() // 261
			 * Tone.Frequency(38, "midi").eval() //
			 * Tone.Frequency("C3").transpose(4).eval();
			 */
		    Tone.Frequency = function (val, units) {
		        if (this instanceof Tone.Frequency) {
		            Tone.TimeBase.call(this, val, units);
		        } else {
		            return new Tone.Frequency(val, units);
		        }
		    };
		    Tone.extend(Tone.Frequency, Tone.TimeBase);
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUGMENT BASE EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);
		    /*
			 *  midi type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.midi = {
		        regexp: /^(\d+(?:\.\d+)?midi)/,
		        method: function (value) {
		            return this.midiToFrequency(value);
		        }
		    };
		    /*
			 *  note type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.note = {
		        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
		        method: function (pitch, octave) {
		            var index = noteToScaleIndex[pitch.toLowerCase()];
		            var noteNumber = index + (parseInt(octave) + 1) * 12;
		            return this.midiToFrequency(noteNumber);
		        }
		    };
		    /*
			 *  BeatsBarsSixteenths type primary expression
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Frequency.prototype._primaryExpressions.tr = {
		        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
		        method: function (m, q, s) {
		            var total = 1;
		            if (m && m !== '0') {
		                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));
		            }
		            if (q && q !== '0') {
		                total *= this._beatsToUnits(parseFloat(q));
		            }
		            if (s && s !== '0') {
		                total *= this._beatsToUnits(parseFloat(s) / 4);
		            }
		            return total;
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	EXPRESSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Transposes the frequency by the given number of semitones.
			 *  @param  {Interval}  interval
			 *  @return  {Tone.Frequency} this
			 *  @example
			 * Tone.Frequency("A4").transpose(3); //"C5"
			 */
		    Tone.Frequency.prototype.transpose = function (interval) {
		        this._expr = function (expr, interval) {
		            var val = expr();
		            return val * this.intervalToFrequencyRatio(interval);
		        }.bind(this, this._expr, interval);
		        return this;
		    };
		    /**
			 *  Takes an array of semitone intervals and returns
			 *  an array of frequencies transposed by those intervals.
			 *  @param  {Array}  intervals
			 *  @return  {Tone.Frequency} this
			 *  @example
			 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
			 */
		    Tone.Frequency.prototype.harmonize = function (intervals) {
		        this._expr = function (expr, intervals) {
		            var val = expr();
		            var ret = [];
		            for (var i = 0; i < intervals.length; i++) {
		                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);
		            }
		            return ret;
		        }.bind(this, this._expr, intervals);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Return the value of the frequency as a MIDI note
			 *  @return  {MIDI}
			 *  @example
			 * Tone.Frequency("C4").toMidi(); //60
			 */
		    Tone.Frequency.prototype.toMidi = function () {
		        return this.frequencyToMidi(this.eval());
		    };
		    /**
			 *  Return the value of the frequency in Scientific Pitch Notation
			 *  @return  {Note}
			 *  @example
			 * Tone.Frequency(69, "midi").toNote(); //"A4"
			 */
		    Tone.Frequency.prototype.toNote = function () {
		        var freq = this.eval();
		        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;
		        var noteNumber = Math.round(12 * log) + 57;
		        var octave = Math.floor(noteNumber / 12);
		        if (octave < 0) {
		            noteNumber += -12 * octave;
		        }
		        var noteName = scaleIndexToNote[noteNumber % 12];
		        return noteName + octave.toString();
		    };
		    /**
			 *  Return the duration of one cycle in seconds.
			 *  @return  {Seconds}
			 */
		    Tone.Frequency.prototype.toSeconds = function () {
		        return 1 / this.eval();
		    };
		    /**
			 *  Return the value in Hertz
			 *  @return  {Frequency}
			 */
		    Tone.Frequency.prototype.toFrequency = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the duration of one cycle in ticks
			 *  @return  {Ticks}
			 */
		    Tone.Frequency.prototype.toTicks = function () {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = this.eval() / quarterTime;
		        return Math.floor(quarters * Tone.Transport.PPQ);
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	UNIT CONVERSIONS HELPERS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value of a frequency in the current units
			 *  @param {Frequency} freq
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._frequencyToUnits = function (freq) {
		        return freq;
		    };
		    /**
			 *  Returns the value of a tick in the current time units
			 *  @param {Ticks} ticks
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._ticksToUnits = function (ticks) {
		        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));
		    };
		    /**
			 *  Return the value of the beats in the current units
			 *  @param {Number} beats
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._beatsToUnits = function (beats) {
		        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);
		    };
		    /**
			 *  Returns the value of a second in the current units
			 *  @param {Seconds} seconds
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.Frequency.prototype._secondsToUnits = function (seconds) {
		        return 1 / seconds;
		    };
		    /**
			 *  The default units if none are given.
			 *  @private
			 */
		    Tone.Frequency.prototype._defaultUnits = 'hz';
		    ///////////////////////////////////////////////////////////////////////////
		    //	FREQUENCY CONVERSIONS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Note to scale index
			 *  @type  {Object}
			 */
		    var noteToScaleIndex = {
		        'cbb': -2,
		        'cb': -1,
		        'c': 0,
		        'c#': 1,
		        'cx': 2,
		        'dbb': 0,
		        'db': 1,
		        'd': 2,
		        'd#': 3,
		        'dx': 4,
		        'ebb': 2,
		        'eb': 3,
		        'e': 4,
		        'e#': 5,
		        'ex': 6,
		        'fbb': 3,
		        'fb': 4,
		        'f': 5,
		        'f#': 6,
		        'fx': 7,
		        'gbb': 5,
		        'gb': 6,
		        'g': 7,
		        'g#': 8,
		        'gx': 9,
		        'abb': 7,
		        'ab': 8,
		        'a': 9,
		        'a#': 10,
		        'ax': 11,
		        'bbb': 9,
		        'bb': 10,
		        'b': 11,
		        'b#': 12,
		        'bx': 13
		    };
		    /**
			 *  scale index to note (sharps)
			 *  @type  {Array}
			 */
		    var scaleIndexToNote = [
		        'C',
		        'C#',
		        'D',
		        'D#',
		        'E',
		        'F',
		        'F#',
		        'G',
		        'G#',
		        'A',
		        'A#',
		        'B'
		    ];
		    /**
			 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
			 *  A4's values in Hertz. 
			 *  @type {Frequency}
			 *  @static
			 */
		    Tone.Frequency.A4 = 440;
		    /**
			 *  Convert a MIDI note to frequency value. 
			 *  @param  {MIDI} midi The midi number to convert.
			 *  @return {Frequency} the corresponding frequency value
			 *  @example
			 * tone.midiToFrequency(69); // returns 440
			 */
		    Tone.Frequency.prototype.midiToFrequency = function (midi) {
		        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);
		    };
		    /**
			 *  Convert a frequency value to a MIDI note.
			 *  @param {Frequency} frequency The value to frequency value to convert.
			 *  @returns  {MIDI}
			 *  @example
			 * tone.midiToFrequency(440); // returns 69
			 */
		    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {
		        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;
		    };
		    return Tone.Frequency;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.TransportTime is a the time along the Transport's
			 *         timeline. It is similar to Tone.Time, but instead of evaluating
			 *         against the AudioContext's clock, it is evaluated against
			 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
			 *  @constructor
			 *  @param  {Time}  val    The time value as a number or string
			 *  @param  {String=}  units  Unit values
			 *  @extends {Tone.Time}
			 */
		    Tone.TransportTime = function (val, units) {
		        if (this instanceof Tone.TransportTime) {
		            Tone.Time.call(this, val, units);
		        } else {
		            return new Tone.TransportTime(val, units);
		        }
		    };
		    Tone.extend(Tone.TransportTime, Tone.Time);
		    //clone the expressions so that 
		    //we can add more without modifying the original
		    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);
		    /**
			 *  Adds an additional unary expression
			 *  which quantizes values to the next subdivision
			 *  @type {Object}
			 *  @private
			 */
		    Tone.TransportTime.prototype._unaryExpressions.quantize = {
		        regexp: /^@/,
		        method: function (rh) {
		            var subdivision = this._secondsToTicks(rh());
		            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);
		            return this._ticksToUnits(multiple * subdivision);
		        }
		    };
		    /**
			 *  Convert seconds into ticks
			 *  @param {Seconds} seconds
			 *  @return  {Ticks}
			 *  @private
			 */
		    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {
		        var quarterTime = this._beatsToUnits(1);
		        var quarters = seconds / quarterTime;
		        return Math.round(quarters * Tone.Transport.PPQ);
		    };
		    /**
			 *  Evaluate the time expression. Returns values in ticks
			 *  @return {Ticks}
			 */
		    Tone.TransportTime.prototype.eval = function () {
		        var val = this._secondsToTicks(this._expr());
		        return val + (this._plusNow ? Tone.Transport.ticks : 0);
		    };
		    /**
			 *  Return the time in ticks.
			 *  @return  {Ticks}
			 */
		    Tone.TransportTime.prototype.toTicks = function () {
		        return this.eval();
		    };
		    /**
			 *  Return the time in seconds.
			 *  @return  {Seconds}
			 */
		    Tone.TransportTime.prototype.toSeconds = function () {
		        var val = this._expr();
		        return val + (this._plusNow ? Tone.Transport.seconds : 0);
		    };
		    /**
			 *  Return the time as a frequency value
			 *  @return  {Frequency} 
			 */
		    Tone.TransportTime.prototype.toFrequency = function () {
		        return 1 / this.toSeconds();
		    };
		    return Tone.TransportTime;
		});
		Module(function (Tone) {
		    ///////////////////////////////////////////////////////////////////////////
		    //	TYPES
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 * Units which a value can take on.
			 * @enum {String}
			 */
		    Tone.Type = {
		        /** 
				 *  Default units
				 *  @typedef {Default}
				 */
		        Default: 'number',
		        /**
				 *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
				 *
				 *  <ul>
				 *  <li>Numbers, which will be taken literally as the time (in seconds).</li>
				 *  <li>Notation, ("4n", "8t") describes time in BPM and time signature relative values.</li>
				 *  <li>TransportTime, ("4:3:2") will also provide tempo and time signature relative times 
				 *  in the form BARS:QUARTERS:SIXTEENTHS.</li>
				 *  <li>Frequency, ("8hz") is converted to the length of the cycle in seconds.</li>
				 *  <li>Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as 
				 *  "the current time plus whatever expression follows".</li>
				 *  <li>Expressions, ("3:0 + 2 - (1m / 7)") any of the above can also be combined 
				 *  into a mathematical expression which will be evaluated to compute the desired time.</li>
				 *  <li>No Argument, for methods which accept time, no argument will be interpreted as 
				 *  "now" (i.e. the currentTime).</li>
				 *  </ul>
				 *  
				 *  @typedef {Time}
				 */
		        Time: 'time',
		        /**
				 *  Frequency can be described similar to time, except ultimately the
				 *  values are converted to frequency instead of seconds. A number
				 *  is taken literally as the value in hertz. Additionally any of the 
				 *  Time encodings can be used. Note names in the form
				 *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
				 *  frequency value. 
				 *  @typedef {Frequency}
				 */
		        Frequency: 'frequency',
		        /**
				 *  TransportTime describes a position along the Transport's timeline. It is
				 *  similar to Time in that it uses all the same encodings, but TransportTime specifically
				 *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. 
				 *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
				 *  @typedef {TransportTime}
				 */
		        TransportTime: 'transportTime',
		        /** 
				 *  Ticks are the basic subunit of the Transport. They are
				 *  the smallest unit of time that the Transport supports.
				 *  @typedef {Ticks}
				 */
		        Ticks: 'ticks',
		        /** 
				 *  Normal values are within the range [0, 1].
				 *  @typedef {NormalRange}
				 */
		        NormalRange: 'normalRange',
		        /** 
				 *  AudioRange values are between [-1, 1].
				 *  @typedef {AudioRange}
				 */
		        AudioRange: 'audioRange',
		        /** 
				 *  Decibels are a logarithmic unit of measurement which is useful for volume
				 *  because of the logarithmic way that we perceive loudness. 0 decibels 
				 *  means no change in volume. -10db is approximately half as loud and 10db 
				 *  is twice is loud. 
				 *  @typedef {Decibels}
				 */
		        Decibels: 'db',
		        /** 
				 *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
				 *  @typedef {Interval}
				 */
		        Interval: 'interval',
		        /** 
				 *  Beats per minute. 
				 *  @typedef {BPM}
				 */
		        BPM: 'bpm',
		        /** 
				 *  The value must be greater than or equal to 0.
				 *  @typedef {Positive}
				 */
		        Positive: 'positive',
		        /** 
				 *  A cent is a hundredth of a semitone. 
				 *  @typedef {Cents}
				 */
		        Cents: 'cents',
		        /** 
				 *  Angle between 0 and 360. 
				 *  @typedef {Degrees}
				 */
		        Degrees: 'degrees',
		        /** 
				 *  A number representing a midi note.
				 *  @typedef {MIDI}
				 */
		        MIDI: 'midi',
		        /** 
				 *  A colon-separated representation of time in the form of
				 *  Bars:Beats:Sixteenths. 
				 *  @typedef {BarsBeatsSixteenths}
				 */
		        BarsBeatsSixteenths: 'barsBeatsSixteenths',
		        /** 
				 *  Sampling is the reduction of a continuous signal to a discrete signal.
				 *  Audio is typically sampled 44100 times per second. 
				 *  @typedef {Samples}
				 */
		        Samples: 'samples',
		        /** 
				 *  Hertz are a frequency representation defined as one cycle per second.
				 *  @typedef {Hertz}
				 */
		        Hertz: 'hertz',
		        /** 
				 *  A frequency represented by a letter name, 
				 *  accidental and octave. This system is known as
				 *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
				 *  @typedef {Note}
				 */
		        Note: 'note',
		        /** 
				 *  One millisecond is a thousandth of a second. 
				 *  @typedef {Milliseconds}
				 */
		        Milliseconds: 'milliseconds',
		        /** 
				 *  Seconds are the time unit of the AudioContext. In the end, 
				 *  all values need to be evaluated to seconds. 
				 *  @typedef {Seconds}
				 */
		        Seconds: 'seconds',
		        /** 
				 *  A string representing a duration relative to a measure. 
				 *  <ul>
				 *  	<li>"4n" = quarter note</li>
				 *   	<li>"2m" = two measures</li>
				 *    	<li>"8t" = eighth-note triplet</li>
				 *  </ul>
				 *  @typedef {Notation}
				 */
		        Notation: 'notation'
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // AUGMENT TONE's PROTOTYPE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Convert Time into seconds.
			 *  
			 *  Unlike the method which it overrides, this takes into account 
			 *  transporttime and musical notation.
			 *
			 *  Time : 1.40
			 *  Notation: 4n|1m|2t
			 *  Now Relative: +3n
			 *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)
			 *
			 *  @param  {Time} time 
			 *  @return {Seconds} 
			 */
		    Tone.prototype.toSeconds = function (time) {
		        if (this.isNumber(time)) {
		            return time;
		        } else if (this.isUndef(time)) {
		            return this.now();
		        } else if (this.isString(time)) {
		            return new Tone.Time(time).toSeconds();
		        } else if (time instanceof Tone.TimeBase) {
		            return time.toSeconds();
		        }
		    };
		    /**
			 *  Convert a frequency representation into a number.
			 *  @param  {Frequency} freq 
			 *  @return {Hertz}      the frequency in hertz
			 */
		    Tone.prototype.toFrequency = function (freq) {
		        if (this.isNumber(freq)) {
		            return freq;
		        } else if (this.isString(freq) || this.isUndef(freq)) {
		            return new Tone.Frequency(freq).eval();
		        } else if (freq instanceof Tone.TimeBase) {
		            return freq.toFrequency();
		        }
		    };
		    /**
			 *  Convert a time representation into ticks.
			 *  @param  {Time} time
			 *  @return {Ticks}  the time in ticks
			 */
		    Tone.prototype.toTicks = function (time) {
		        if (this.isNumber(time) || this.isString(time)) {
		            return new Tone.TransportTime(time).toTicks();
		        } else if (this.isUndef(time)) {
		            return Tone.Transport.ticks;
		        } else if (time instanceof Tone.TimeBase) {
		            return time.toTicks();
		        }
		    };
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
			 *         additional unit conversion functionality. It also
			 *         serves as a base-class for classes which have a single,
			 *         automatable parameter. 
			 *  @extends {Tone}
			 *  @param  {AudioParam}  param  The parameter to wrap.
			 *  @param  {Tone.Type} units The units of the audio param.
			 *  @param  {Boolean} convert If the param should be converted.
			 */
		    Tone.Param = function () {
		        var options = this.optionsObject(arguments, [
		            'param',
		            'units',
		            'convert'
		        ], Tone.Param.defaults);
		        /**
				 *  The native parameter to control
				 *  @type  {AudioParam}
				 *  @private
				 */
		        this._param = this.input = options.param;
		        /**
				 *  The units of the parameter
				 *  @type {Tone.Type}
				 */
		        this.units = options.units;
		        /**
				 *  If the value should be converted or not
				 *  @type {Boolean}
				 */
		        this.convert = options.convert;
		        /**
				 *  True if the signal value is being overridden by 
				 *  a connected signal.
				 *  @readOnly
				 *  @type  {boolean}
				 *  @private
				 */
		        this.overridden = false;
		        /**
				 *  If there is an LFO, this is where it is held.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfo = null;
		        if (this.isObject(options.lfo)) {
		            this.value = options.lfo;
		        } else if (!this.isUndef(options.value)) {
		            this.value = options.value;
		        }
		    };
		    Tone.extend(Tone.Param);
		    /**
			 *  Defaults
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Param.defaults = {
		        'units': Tone.Type.Default,
		        'convert': true,
		        'param': undefined
		    };
		    /**
			 * The current value of the parameter. 
			 * @memberOf Tone.Param#
			 * @type {Number}
			 * @name value
			 */
		    Object.defineProperty(Tone.Param.prototype, 'value', {
		        get: function () {
		            return this._toUnits(this._param.value);
		        },
		        set: function (value) {
		            if (this.isObject(value)) {
		                //throw an error if the LFO needs to be included
		                if (this.isUndef(Tone.LFO)) {
		                    throw new Error('Include \'Tone.LFO\' to use an LFO as a Param value.');
		                }
		                //remove the old one
		                if (this._lfo) {
		                    this._lfo.dispose();
		                }
		                this._lfo = new Tone.LFO(value).start();
		                this._lfo.connect(this.input);
		            } else {
		                var convertedVal = this._fromUnits(value);
		                this._param.cancelScheduledValues(0);
		                this._param.value = convertedVal;
		            }
		        }
		    });
		    /**
			 *  Convert the given value from the type specified by Tone.Param.units
			 *  into the destination value (such as Gain or Frequency).
			 *  @private
			 *  @param  {*} val the value to convert
			 *  @return {number}     the number which the value should be set to
			 */
		    Tone.Param.prototype._fromUnits = function (val) {
		        if (this.convert || this.isUndef(this.convert)) {
		            switch (this.units) {
		            case Tone.Type.Time:
		                return this.toSeconds(val);
		            case Tone.Type.Frequency:
		                return this.toFrequency(val);
		            case Tone.Type.Decibels:
		                return this.dbToGain(val);
		            case Tone.Type.NormalRange:
		                return Math.min(Math.max(val, 0), 1);
		            case Tone.Type.AudioRange:
		                return Math.min(Math.max(val, -1), 1);
		            case Tone.Type.Positive:
		                return Math.max(val, 0);
		            default:
		                return val;
		            }
		        } else {
		            return val;
		        }
		    };
		    /**
			 * Convert the parameters value into the units specified by Tone.Param.units.
			 * @private
			 * @param  {number} val the value to convert
			 * @return {number}
			 */
		    Tone.Param.prototype._toUnits = function (val) {
		        if (this.convert || this.isUndef(this.convert)) {
		            switch (this.units) {
		            case Tone.Type.Decibels:
		                return this.gainToDb(val);
		            default:
		                return val;
		            }
		        } else {
		            return val;
		        }
		    };
		    /**
			 *  the minimum output value
			 *  @type {Number}
			 *  @private
			 */
		    Tone.Param.prototype._minOutput = 0.00001;
		    /**
			 *  Schedules a parameter value change at the given time.
			 *  @param {*}	value The value to set the signal.
			 *  @param {Time}  time The time when the change should occur.
			 *  @returns {Tone.Param} this
			 *  @example
			 * //set the frequency to "G4" in exactly 1 second from now. 
			 * freq.setValueAtTime("G4", "+1");
			 */
		    Tone.Param.prototype.setValueAtTime = function (value, time) {
		        value = this._fromUnits(value);
		        time = this.toSeconds(time);
		        if (time <= this.now() + this.blockTime) {
		            this._param.value = value;
		        } else {
		            this._param.setValueAtTime(value, time);
		        }
		        return this;
		    };
		    /**
			 *  Creates a schedule point with the current value at the current time.
			 *  This is useful for creating an automation anchor point in order to 
			 *  schedule changes from the current value. 
			 *
			 *  @param {number=} now (Optionally) pass the now value in. 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.setRampPoint = function (now) {
		        now = this.defaultArg(now, this.now());
		        var currentVal = this._param.value;
		        // exponentialRampToValueAt cannot ever ramp from or to 0
		        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2
		        if (currentVal === 0) {
		            currentVal = this._minOutput;
		        }
		        this._param.setValueAtTime(currentVal, now);
		        return this;
		    };
		    /**
			 *  Schedules a linear continuous change in parameter value from the 
			 *  previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        value = Math.max(this._minOutput, value);
		        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the current time and current value to the given value over the 
			 *  duration of the rampTime.
			 *  
			 *  @param  {number} value   The value to ramp to.
			 *  @param  {Time} rampTime the time that it takes the 
			 *                               value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //exponentially ramp to the value 2 over 4 seconds. 
			 * signal.exponentialRampToValue(2, 4);
			 */
		    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {
		        startTime = this.toSeconds(startTime);
		        this.setRampPoint(startTime);
		        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
		        return this;
		    };
		    /**
			 *  Schedules an linear continuous change in parameter value from 
			 *  the current time and current value to the given value over the 
			 *  duration of the rampTime.
			 *  
			 *  @param  {number} value   The value to ramp to.
			 *  @param  {Time} rampTime the time that it takes the 
			 *                               value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //linearly ramp to the value 4 over 3 seconds. 
			 * signal.linearRampToValue(4, 3);
			 */
		    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {
		        startTime = this.toSeconds(startTime);
		        this.setRampPoint(startTime);
		        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
		        return this;
		    };
		    /**
			 *  Start exponentially approaching the target value at the given time with
			 *  a rate having the given time constant.
			 *  @param {number} value        
			 *  @param {Time} startTime    
			 *  @param {number} timeConstant 
			 *  @returns {Tone.Param} this 
			 */
		    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
		        value = this._fromUnits(value);
		        // The value will never be able to approach without timeConstant > 0.
		        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation
		        // is described. 0 results in a division by 0.
		        value = Math.max(this._minOutput, value);
		        timeConstant = Math.max(this._minOutput, timeConstant);
		        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);
		        return this;
		    };
		    /**
			 *  Sets an array of arbitrary parameter values starting at the given time
			 *  for the given duration.
			 *  	
			 *  @param {Array} values    
			 *  @param {Time} startTime 
			 *  @param {Time} duration  
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {
		        for (var i = 0; i < values.length; i++) {
		            values[i] = this._fromUnits(values[i]);
		        }
		        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));
		        return this;
		    };
		    /**
			 *  Cancels all scheduled parameter changes with times greater than or 
			 *  equal to startTime.
			 *  
			 *  @param  {Time} startTime
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.cancelScheduledValues = function (startTime) {
		        this._param.cancelScheduledValues(this.toSeconds(startTime));
		        return this;
		    };
		    /**
			 *  Ramps to the given value over the duration of the rampTime. 
			 *  Automatically selects the best ramp type (exponential or linear)
			 *  depending on the `units` of the signal
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} rampTime 	The time that it takes the 
			 *                              value to ramp from it's current value
			 *  @param {Time}	[startTime=now] 	When the ramp should start. 
			 *  @returns {Tone.Param} this
			 *  @example
			 * //ramp to the value either linearly or exponentially 
			 * //depending on the "units" value of the signal
			 * signal.rampTo(0, 10);
			 *  @example
			 * //schedule it to ramp starting at a specific time
			 * signal.rampTo(0, 10, 5)
			 */
		    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {
		        rampTime = this.defaultArg(rampTime, 0);
		        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM) {
		            this.exponentialRampToValue(value, rampTime, startTime);
		        } else {
		            this.linearRampToValue(value, rampTime, startTime);
		        }
		        return this;
		    };
		    /**
			 *  The LFO created by the signal instance. If none
			 *  was created, this is null.
			 *  @type {Tone.LFO}
			 *  @readOnly
			 *  @memberOf Tone.Param#
			 *  @name lfo
			 */
		    Object.defineProperty(Tone.Param.prototype, 'lfo', {
		        get: function () {
		            return this._lfo;
		        }
		    });
		    /**
			 *  Clean up
			 *  @returns {Tone.Param} this
			 */
		    Tone.Param.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._param = null;
		        if (this._lfo) {
		            this._lfo.dispose();
		            this._lfo = null;
		        }
		        return this;
		    };
		    return Tone.Param;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A thin wrapper around the Native Web Audio GainNode.
			 *         The GainNode is a basic building block of the Web Audio
			 *         API and is useful for routing audio and adjusting gains. 
			 *  @extends {Tone}
			 *  @param  {Number=}  gain  The initial gain of the GainNode
			 *  @param {Tone.Type=} units The units of the gain parameter. 
			 */
		    Tone.Gain = function () {
		        var options = this.optionsObject(arguments, [
		            'gain',
		            'units'
		        ], Tone.Gain.defaults);
		        /**
				 *  The GainNode
				 *  @type  {GainNode}
				 *  @private
				 */
		        this.input = this.output = this._gainNode = this.context.createGain();
		        /**
				 *  The gain parameter of the gain node.
				 *  @type {Tone.Param}
				 *  @signal
				 */
		        this.gain = new Tone.Param({
		            'param': this._gainNode.gain,
		            'units': options.units,
		            'value': options.gain,
		            'convert': options.convert
		        });
		        this._readOnly('gain');
		    };
		    Tone.extend(Tone.Gain);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Gain.defaults = {
		        'gain': 1,
		        'convert': true
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Gain}  this
			 */
		    Tone.Gain.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._gainNode.disconnect();
		        this._gainNode = null;
		        this._writable('gain');
		        this.gain.dispose();
		        this.gain = null;
		    };
		    //STATIC///////////////////////////////////////////////////////////////////
		    /**
			 *  Create input and outputs for this object.
			 *  @param  {Number}  input   The number of inputs
			 *  @param  {Number=}  outputs  The number of outputs
			 *  @return  {Tone}  this
			 *  @internal
			 */
		    Tone.prototype.createInsOuts = function (inputs, outputs) {
		        if (inputs === 1) {
		            this.input = new Tone.Gain();
		        } else if (inputs > 1) {
		            this.input = new Array(inputs);
		        }
		        if (outputs === 1) {
		            this.output = new Tone.Gain();
		        } else if (outputs > 1) {
		            this.output = new Array(inputs);
		        }
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    return Tone.Gain;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
			 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
			 *          has all of the methods available to native Web Audio 
			 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
			 *          as well as additional conveniences. Read more about working with signals 
			 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
			 *
			 *  @constructor
			 *  @extends {Tone.Param}
			 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
			 *                                     is passed in, that parameter will be wrapped
			 *                                     and controlled by the Signal. 
			 *  @param {string} [units=Number] unit The units the signal is in. 
			 *  @example
			 * var signal = new Tone.Signal(10);
			 */
		    Tone.Signal = function () {
		        var options = this.optionsObject(arguments, [
		            'value',
		            'units'
		        ], Tone.Signal.defaults);
		        /**
				 * The node where the constant signal value is scaled.
				 * @type {GainNode}
				 * @private
				 */
		        this.output = this._gain = this.context.createGain();
		        options.param = this._gain.gain;
		        Tone.Param.call(this, options);
		        /**
				 * The node where the value is set.
				 * @type {Tone.Param}
				 * @private
				 */
		        this.input = this._param = this._gain.gain;
		        //connect the const output to the node output
		        Tone.Signal._constant.chain(this._gain);
		    };
		    Tone.extend(Tone.Signal, Tone.Param);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @static
			 *  @const
			 */
		    Tone.Signal.defaults = {
		        'value': 0,
		        'units': Tone.Type.Default,
		        'convert': true
		    };
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.SignalBase} this
			 *  @method
			 */
		    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;
		    /**
			 *  dispose and disconnect
			 *  @returns {Tone.Signal} this
			 */
		    Tone.Signal.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._param = null;
		        this._gain.disconnect();
		        this._gain = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	STATIC
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Generates a constant output of 1.
			 *  @static
			 *  @private
			 *  @const
			 *  @type {AudioBufferSourceNode}
			 */
		    Tone.Signal._constant = null;
		    /**
			 *  initializer function
			 */
		    Tone._initAudioContext(function (audioContext) {
		        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
		        var arr = buffer.getChannelData(0);
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = 1;
		        }
		        Tone.Signal._constant = audioContext.createBufferSource();
		        Tone.Signal._constant.channelCount = 1;
		        Tone.Signal._constant.channelCountMode = 'explicit';
		        Tone.Signal._constant.buffer = buffer;
		        Tone.Signal._constant.loop = true;
		        Tone.Signal._constant.start(0);
		        Tone.Signal._constant.noGC();
		    });
		    return Tone.Signal;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A Timeline class for scheduling and maintaining state
			 *         along a timeline. All events must have a "time" property. 
			 *         Internally, events are stored in time order for fast 
			 *         retrieval.
			 *  @extends {Tone}
			 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
			 */
		    Tone.Timeline = function () {
		        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);
		        /**
				 *  The array of scheduled timeline events
				 *  @type  {Array}
				 *  @private
				 */
		        this._timeline = [];
		        /**
				 *  An array of items to remove from the list. 
				 *  @type {Array}
				 *  @private
				 */
		        this._toRemove = [];
		        /**
				 *  Flag if the tieline is mid iteration
				 *  @private
				 *  @type {Boolean}
				 */
		        this._iterating = false;
		        /**
				 *  The memory of the timeline, i.e.
				 *  how many events in the past it will retain
				 *  @type {Positive}
				 */
		        this.memory = options.memory;
		    };
		    Tone.extend(Tone.Timeline);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 */
		    Tone.Timeline.defaults = { 'memory': Infinity };
		    /**
			 *  The number of items in the timeline.
			 *  @type {Number}
			 *  @memberOf Tone.Timeline#
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Timeline.prototype, 'length', {
		        get: function () {
		            return this._timeline.length;
		        }
		    });
		    /**
			 *  Insert an event object onto the timeline. Events must have a "time" attribute.
			 *  @param  {Object}  event  The event object to insert into the 
			 *                           timeline. 
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.addEvent = function (event) {
		        //the event needs to have a time attribute
		        if (this.isUndef(event.time)) {
		            throw new Error('Tone.Timeline: events must have a time attribute');
		        }
		        if (this._timeline.length) {
		            var index = this._search(event.time);
		            this._timeline.splice(index + 1, 0, event);
		        } else {
		            this._timeline.push(event);
		        }
		        //if the length is more than the memory, remove the previous ones
		        if (this.length > this.memory) {
		            var diff = this.length - this.memory;
		            this._timeline.splice(0, diff);
		        }
		        return this;
		    };
		    /**
			 *  Remove an event from the timeline.
			 *  @param  {Object}  event  The event object to remove from the list.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.removeEvent = function (event) {
		        if (this._iterating) {
		            this._toRemove.push(event);
		        } else {
		            var index = this._timeline.indexOf(event);
		            if (index !== -1) {
		                this._timeline.splice(index, 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the nearest event whose time is less than or equal to the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object set after that time.
			 */
		    Tone.Timeline.prototype.getEvent = function (time) {
		        var index = this._search(time);
		        if (index !== -1) {
		            return this._timeline[index];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Get the event which is scheduled after the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object after the given time
			 */
		    Tone.Timeline.prototype.getEventAfter = function (time) {
		        var index = this._search(time);
		        if (index + 1 < this._timeline.length) {
		            return this._timeline[index + 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Get the event before the event at the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Object} The event object before the given time
			 */
		    Tone.Timeline.prototype.getEventBefore = function (time) {
		        var len = this._timeline.length;
		        //if it's after the last item, return the last item
		        if (len > 0 && this._timeline[len - 1].time < time) {
		            return this._timeline[len - 1];
		        }
		        var index = this._search(time);
		        if (index - 1 >= 0) {
		            return this._timeline[index - 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Cancel events after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.cancel = function (after) {
		        if (this._timeline.length > 1) {
		            var index = this._search(after);
		            if (index >= 0) {
		                if (this._timeline[index].time === after) {
		                    //get the first item with that time
		                    for (var i = index; i >= 0; i--) {
		                        if (this._timeline[i].time === after) {
		                            index = i;
		                        } else {
		                            break;
		                        }
		                    }
		                    this._timeline = this._timeline.slice(0, index);
		                } else {
		                    this._timeline = this._timeline.slice(0, index + 1);
		                }
		            } else {
		                this._timeline = [];
		            }
		        } else if (this._timeline.length === 1) {
		            //the first item's time
		            if (this._timeline[0].time >= after) {
		                this._timeline = [];
		            }
		        }
		        return this;
		    };
		    /**
			 *  Cancel events before or equal to the given time.
			 *  @param  {Number}  time  The time to cancel before.
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.cancelBefore = function (time) {
		        if (this._timeline.length) {
		            var index = this._search(time);
		            if (index >= 0) {
		                this._timeline = this._timeline.slice(index + 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Does a binary serach on the timeline array and returns the 
			 *  nearest event index whose time is after or equal to the given time.
			 *  If a time is searched before the first index in the timeline, -1 is returned.
			 *  If the time is after the end, the index of the last item is returned.
			 *  @param  {Number}  time  
			 *  @return  {Number} the index in the timeline array 
			 *  @private
			 */
		    Tone.Timeline.prototype._search = function (time) {
		        var beginning = 0;
		        var len = this._timeline.length;
		        var end = len;
		        if (len > 0 && this._timeline[len - 1].time <= time) {
		            return len - 1;
		        }
		        while (beginning < end) {
		            // calculate the midpoint for roughly equal partition
		            var midPoint = Math.floor(beginning + (end - beginning) / 2);
		            var event = this._timeline[midPoint];
		            var nextEvent = this._timeline[midPoint + 1];
		            if (event.time === time) {
		                //choose the last one that has the same time
		                for (var i = midPoint; i < this._timeline.length; i++) {
		                    var testEvent = this._timeline[i];
		                    if (testEvent.time === time) {
		                        midPoint = i;
		                    }
		                }
		                return midPoint;
		            } else if (event.time < time && nextEvent.time > time) {
		                return midPoint;
		            } else if (event.time > time) {
		                //search lower
		                end = midPoint;
		            } else if (event.time < time) {
		                //search upper
		                beginning = midPoint + 1;
		            }
		        }
		        return -1;
		    };
		    /**
			 *  Internal iterator. Applies extra safety checks for 
			 *  removing items from the array. 
			 *  @param  {Function}  callback 
			 *  @param  {Number=}    lowerBound     
			 *  @param  {Number=}    upperBound    
			 *  @private
			 */
		    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
		        this._iterating = true;
		        lowerBound = this.defaultArg(lowerBound, 0);
		        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);
		        for (var i = lowerBound; i <= upperBound; i++) {
		            callback(this._timeline[i]);
		        }
		        this._iterating = false;
		        if (this._toRemove.length > 0) {
		            for (var j = 0; j < this._toRemove.length; j++) {
		                var index = this._timeline.indexOf(this._toRemove[j]);
		                if (index !== -1) {
		                    this._timeline.splice(index, 1);
		                }
		            }
		            this._toRemove = [];
		        }
		    };
		    /**
			 *  Iterate over everything in the array
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEach = function (callback) {
		        this._iterate(callback);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at or before the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachBefore = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var upperBound = this._search(time);
		        if (upperBound !== -1) {
		            this._iterate(callback, 0, upperBound);
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array after the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachAfter = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var lowerBound = this._search(time);
		        this._iterate(callback, lowerBound + 1);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at or after the given time. Similar to 
			 *  forEachAfter, but includes the item(s) at the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachFrom = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var lowerBound = this._search(time);
		        //work backwards until the event time is less than time
		        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
		            lowerBound--;
		        }
		        this._iterate(callback, lowerBound + 1);
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array at the given time
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.Timeline} this
			 */
		    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {
		        //iterate over the items in reverse so that removing an item doesn't break things
		        var upperBound = this._search(time);
		        if (upperBound !== -1) {
		            this._iterate(function (event) {
		                if (event.time === time) {
		                    callback(event);
		                }
		            }, 0, upperBound);
		        }
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Timeline}  this
			 */
		    Tone.Timeline.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._timeline = null;
		        this._toRemove = null;
		    };
		    return Tone.Timeline;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A signal which adds the method getValueAtTime. 
			 *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline
			 *  @extends {Tone.Param}
			 *  @param {Number=} value The initial value of the signal
			 *  @param {String=} units The conversion units of the signal.
			 */
		    Tone.TimelineSignal = function () {
		        var options = this.optionsObject(arguments, [
		            'value',
		            'units'
		        ], Tone.Signal.defaults);
		        /**
				 *  The scheduled events
				 *  @type {Tone.Timeline}
				 *  @private
				 */
		        this._events = new Tone.Timeline(10);
		        //constructors
		        Tone.Signal.apply(this, options);
		        options.param = this._param;
		        Tone.Param.call(this, options);
		        /**
				 *  The initial scheduled value
				 *  @type {Number}
				 *  @private
				 */
		        this._initial = this._fromUnits(this._param.value);
		    };
		    Tone.extend(Tone.TimelineSignal, Tone.Param);
		    /**
			 *  The event types of a schedulable signal.
			 *  @enum {String}
			 *  @private
			 */
		    Tone.TimelineSignal.Type = {
		        Linear: 'linear',
		        Exponential: 'exponential',
		        Target: 'target',
		        Curve: 'curve',
		        Set: 'set'
		    };
		    /**
			 * The current value of the signal. 
			 * @memberOf Tone.TimelineSignal#
			 * @type {Number}
			 * @name value
			 */
		    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {
		        get: function () {
		            var now = this.now();
		            var val = this.getValueAtTime(now);
		            return this._toUnits(val);
		        },
		        set: function (value) {
		            var convertedVal = this._fromUnits(value);
		            this._initial = convertedVal;
		            this.cancelScheduledValues();
		            this._param.value = convertedVal;
		        }
		    });
		    ///////////////////////////////////////////////////////////////////////////
		    //	SCHEDULING
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Schedules a parameter value change at the given time.
			 *  @param {*}	value The value to set the signal.
			 *  @param {Time}  time The time when the change should occur.
			 *  @returns {Tone.TimelineSignal} this
			 *  @example
			 * //set the frequency to "G4" in exactly 1 second from now. 
			 * freq.setValueAtTime("G4", "+1");
			 */
		    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {
		        value = this._fromUnits(value);
		        startTime = this.toSeconds(startTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Set,
		            'value': value,
		            'time': startTime
		        });
		        //invoke the original event
		        this._param.setValueAtTime(value, startTime);
		        return this;
		    };
		    /**
			 *  Schedules a linear continuous change in parameter value from the 
			 *  previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {
		        value = this._fromUnits(value);
		        endTime = this.toSeconds(endTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Linear,
		            'value': value,
		            'time': endTime
		        });
		        this._param.linearRampToValueAtTime(value, endTime);
		        return this;
		    };
		    /**
			 *  Schedules an exponential continuous change in parameter value from 
			 *  the previous scheduled parameter value to the given value.
			 *  
			 *  @param  {number} value   
			 *  @param  {Time} endTime 
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {
		        //get the previous event and make sure it's not starting from 0
		        endTime = this.toSeconds(endTime);
		        var beforeEvent = this._searchBefore(endTime);
		        if (beforeEvent && beforeEvent.value === 0) {
		            //reschedule that event
		            this.setValueAtTime(this._minOutput, beforeEvent.time);
		        }
		        value = this._fromUnits(value);
		        var setValue = Math.max(value, this._minOutput);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Exponential,
		            'value': setValue,
		            'time': endTime
		        });
		        //if the ramped to value is 0, make it go to the min output, and then set to 0.
		        if (value < this._minOutput) {
		            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);
		            this.setValueAtTime(0, endTime);
		        } else {
		            this._param.exponentialRampToValueAtTime(value, endTime);
		        }
		        return this;
		    };
		    /**
			 *  Start exponentially approaching the target value at the given time with
			 *  a rate having the given time constant.
			 *  @param {number} value        
			 *  @param {Time} startTime    
			 *  @param {number} timeConstant 
			 *  @returns {Tone.TimelineSignal} this 
			 */
		    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
		        value = this._fromUnits(value);
		        value = Math.max(this._minOutput, value);
		        timeConstant = Math.max(this._minOutput, timeConstant);
		        startTime = this.toSeconds(startTime);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Target,
		            'value': value,
		            'time': startTime,
		            'constant': timeConstant
		        });
		        this._param.setTargetAtTime(value, startTime, timeConstant);
		        return this;
		    };
		    /**
			 *  Set an array of arbitrary values starting at the given time for the given duration.
			 *  @param {Float32Array} values        
			 *  @param {Time} startTime    
			 *  @param {Time} duration
			 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
			 *  @returns {Tone.TimelineSignal} this 
			 */
		    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
		        scaling = this.defaultArg(scaling, 1);
		        //copy the array
		        var floats = new Array(values.length);
		        for (var i = 0; i < floats.length; i++) {
		            floats[i] = this._fromUnits(values[i]) * scaling;
		        }
		        startTime = this.toSeconds(startTime);
		        duration = this.toSeconds(duration);
		        this._events.addEvent({
		            'type': Tone.TimelineSignal.Type.Curve,
		            'value': floats,
		            'time': startTime,
		            'duration': duration
		        });
		        //set the first value
		        this._param.setValueAtTime(floats[0], startTime);
		        //schedule a lienar ramp for each of the segments
		        for (var j = 1; j < floats.length; j++) {
		            var segmentTime = startTime + j / (floats.length - 1) * duration;
		            this._param.linearRampToValueAtTime(floats[j], segmentTime);
		        }
		        return this;
		    };
		    /**
			 *  Cancels all scheduled parameter changes with times greater than or 
			 *  equal to startTime.
			 *  
			 *  @param  {Time} startTime
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {
		        after = this.toSeconds(after);
		        this._events.cancel(after);
		        this._param.cancelScheduledValues(after);
		        return this;
		    };
		    /**
			 *  Sets the computed value at the given time. This provides
			 *  a point from which a linear or exponential curve
			 *  can be scheduled after. Will cancel events after 
			 *  the given time and shorten the currently scheduled
			 *  linear or exponential ramp so that it ends at `time` .
			 *  This is to avoid discontinuities and clicks in envelopes. 
			 *  @param {Time} time When to set the ramp point
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.setRampPoint = function (time) {
		        time = this.toSeconds(time);
		        //get the value at the given time
		        var val = this._toUnits(this.getValueAtTime(time));
		        //if there is an event at the given time
		        //and that even is not a "set"
		        var before = this._searchBefore(time);
		        if (before && before.time === time) {
		            //remove everything after
		            this.cancelScheduledValues(time + this.sampleTime);
		        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {
		            //if the curve is still playing
		            //cancel the curve
		            this.cancelScheduledValues(time);
		            this.linearRampToValueAtTime(val, time);
		        } else {
		            //reschedule the next event to end at the given time
		            var after = this._searchAfter(time);
		            if (after) {
		                //cancel the next event(s)
		                this.cancelScheduledValues(time);
		                if (after.type === Tone.TimelineSignal.Type.Linear) {
		                    this.linearRampToValueAtTime(val, time);
		                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
		                    this.exponentialRampToValueAtTime(val, time);
		                }
		            }
		            this.setValueAtTime(val, time);
		        }
		        return this;
		    };
		    /**
			 *  Do a linear ramp to the given value between the start and finish times.
			 *  @param {Number} value The value to ramp to.
			 *  @param {Time} start The beginning anchor point to do the linear ramp
			 *  @param {Time} finish The ending anchor point by which the value of
			 *                       the signal will equal the given value.
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {
		        this.setRampPoint(start);
		        this.linearRampToValueAtTime(value, finish);
		        return this;
		    };
		    /**
			 *  Do a exponential ramp to the given value between the start and finish times.
			 *  @param {Number} value The value to ramp to.
			 *  @param {Time} start The beginning anchor point to do the exponential ramp
			 *  @param {Time} finish The ending anchor point by which the value of
			 *                       the signal will equal the given value.
			 *  @returns {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {
		        this.setRampPoint(start);
		        this.exponentialRampToValueAtTime(value, finish);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	GETTING SCHEDULED VALUES
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the value before or equal to the given time
			 *  @param  {Number}  time  The time to query
			 *  @return  {Object}  The event at or before the given time.
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._searchBefore = function (time) {
		        return this._events.getEvent(time);
		    };
		    /**
			 *  The event after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @return  {Object}  The next event after the given time
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._searchAfter = function (time) {
		        return this._events.getEventAfter(time);
		    };
		    /**
			 *  Get the scheduled value at the given time. This will
			 *  return the unconverted (raw) value.
			 *  @param  {Number}  time  The time in seconds.
			 *  @return  {Number}  The scheduled value at the given time.
			 */
		    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {
		        time = this.toSeconds(time);
		        var after = this._searchAfter(time);
		        var before = this._searchBefore(time);
		        var value = this._initial;
		        //if it was set by
		        if (before === null) {
		            value = this._initial;
		        } else if (before.type === Tone.TimelineSignal.Type.Target) {
		            var previous = this._events.getEventBefore(before.time);
		            var previouVal;
		            if (previous === null) {
		                previouVal = this._initial;
		            } else {
		                previouVal = previous.value;
		            }
		            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);
		        } else if (before.type === Tone.TimelineSignal.Type.Curve) {
		            value = this._curveInterpolate(before.time, before.value, before.duration, time);
		        } else if (after === null) {
		            value = before.value;
		        } else if (after.type === Tone.TimelineSignal.Type.Linear) {
		            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
		        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {
		            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
		        } else {
		            value = before.value;
		        }
		        return value;
		    };
		    /**
			 *  When signals connect to other signals or AudioParams, 
			 *  they take over the output value of that signal or AudioParam. 
			 *  For all other nodes, the behavior is the same as a default <code>connect</code>. 
			 *
			 *  @override
			 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node 
			 *  @param {number} [outputNumber=0] The output number to connect from.
			 *  @param {number} [inputNumber=0] The input number to connect to.
			 *  @returns {Tone.TimelineSignal} this
			 *  @method
			 */
		    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUTOMATION CURVE CALCULATIONS
		    //	MIT License, copyright (c) 2014 Jordan Santell
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Calculates the the value along the curve produced by setTargetAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
		        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
		    };
		    /**
			 *  Calculates the the value along the curve produced by linearRampToValueAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
		        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
		    };
		    /**
			 *  Calculates the the value along the curve produced by exponentialRampToValueAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
		        v0 = Math.max(this._minOutput, v0);
		        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
		    };
		    /**
			 *  Calculates the the value along the curve produced by setValueCurveAtTime
			 *  @private
			 */
		    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {
		        var len = curve.length;
		        // If time is after duration, return the last curve value
		        if (time >= start + duration) {
		            return curve[len - 1];
		        } else if (time <= start) {
		            return curve[0];
		        } else {
		            var progress = (time - start) / duration;
		            var lowerIndex = Math.floor((len - 1) * progress);
		            var upperIndex = Math.ceil((len - 1) * progress);
		            var lowerVal = curve[lowerIndex];
		            var upperVal = curve[upperIndex];
		            if (upperIndex === lowerIndex) {
		                return lowerVal;
		            } else {
		                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));
		            }
		        }
		    };
		    /**
			 *  Clean up.
			 *  @return {Tone.TimelineSignal} this
			 */
		    Tone.TimelineSignal.prototype.dispose = function () {
		        Tone.Signal.prototype.dispose.call(this);
		        Tone.Param.prototype.dispose.call(this);
		        this._events.dispose();
		        this._events = null;
		    };
		    return Tone.TimelineSignal;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Pow applies an exponent to the incoming signal. The incoming signal
			 *         must be AudioRange.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
			 *  @example
			 * var pow = new Tone.Pow(2);
			 * var sig = new Tone.Signal(0.5).connect(pow);
			 * //output of pow is 0.25. 
			 */
		    Tone.Pow = function (exp) {
		        /**
				 * the exponent
				 * @private
				 * @type {number}
				 */
		        this._exp = this.defaultArg(exp, 1);
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);
		    };
		    Tone.extend(Tone.Pow, Tone.SignalBase);
		    /**
			 * The value of the exponent.
			 * @memberOf Tone.Pow#
			 * @type {number}
			 * @name value
			 */
		    Object.defineProperty(Tone.Pow.prototype, 'value', {
		        get: function () {
		            return this._exp;
		        },
		        set: function (exp) {
		            this._exp = exp;
		            this._expScaler.setMap(this._expFunc(this._exp));
		        }
		    });
		    /**
			 *  the function which maps the waveshaper
			 *  @param   {number} exp
			 *  @return {function}
			 *  @private
			 */
		    Tone.Pow.prototype._expFunc = function (exp) {
		        return function (val) {
		            return Math.pow(Math.abs(val), exp);
		        };
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Pow} this
			 */
		    Tone.Pow.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._expScaler.dispose();
		        this._expScaler = null;
		        return this;
		    };
		    return Tone.Pow;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
			 *          envelope generator. Tone.Envelope outputs a signal which 
			 *          can be connected to an AudioParam or Tone.Signal. 
			 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Time} [attack] The amount of time it takes for the envelope to go from 
			 *                         0 to it's maximum value. 
			 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
			 *                       	to fall to the sustain value. 
			 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
			 *                                	the release is triggered. 
			 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
			 *  @example
			 * //an amplitude envelope
			 * var gainNode = Tone.context.createGain();
			 * var env = new Tone.Envelope({
			 * 	"attack" : 0.1,
			 * 	"decay" : 0.2,
			 * 	"sustain" : 1,
			 * 	"release" : 0.8,
			 * });
			 * env.connect(gainNode.gain);
			 */
		    Tone.Envelope = function () {
		        //get all of the defaults
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        /** 
				 *  When triggerAttack is called, the attack time is the amount of
				 *  time it takes for the envelope to reach it's maximum value. 
				 *  @type {Time}
				 */
		        this.attack = options.attack;
		        /**
				 *  After the attack portion of the envelope, the value will fall
				 *  over the duration of the decay time to it's sustain value. 
				 *  @type {Time}
				 */
		        this.decay = options.decay;
		        /**
				 * 	The sustain value is the value 
				 * 	which the envelope rests at after triggerAttack is
				 * 	called, but before triggerRelease is invoked. 
				 *  @type {NormalRange}
				 */
		        this.sustain = options.sustain;
		        /**
				 *  After triggerRelease is called, the envelope's
				 *  value will fall to it's miminum value over the
				 *  duration of the release time. 
				 *  @type {Time}
				 */
		        this.release = options.release;
		        /**
				 *  the next time the envelope is at standby
				 *  @type {number}
				 *  @private
				 */
		        this._attackCurve = 'linear';
		        /**
				 *  the next time the envelope is at standby
				 *  @type {number}
				 *  @private
				 */
		        this._releaseCurve = 'exponential';
		        /**
				 *  the signal
				 *  @type {Tone.TimelineSignal}
				 *  @private
				 */
		        this._sig = this.output = new Tone.TimelineSignal();
		        this._sig.setValueAtTime(0, 0);
		        //set the attackCurve initially
		        this.attackCurve = options.attackCurve;
		        this.releaseCurve = options.releaseCurve;
		    };
		    Tone.extend(Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 */
		    Tone.Envelope.defaults = {
		        'attack': 0.01,
		        'decay': 0.1,
		        'sustain': 0.5,
		        'release': 1,
		        'attackCurve': 'linear',
		        'releaseCurve': 'exponential'
		    };
		    /**
			 * Read the current value of the envelope. Useful for 
			 * syncronizing visual output to the envelope. 
			 * @memberOf Tone.Envelope#
			 * @type {Number}
			 * @name value
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'value', {
		        get: function () {
		            return this.getValueAtTime(this.now());
		        }
		    });
		    /**
			 * The shape of the attack. 
			 * Can be any of these strings:
			 * <ul>
			 *   <li>linear</li>
			 *   <li>exponential</li>
			 *   <li>sine</li>
			 *   <li>ease</li>
			 *   <li>bounce</li>
			 *   <li>ripple</li>
			 *   <li>step</li>
			 * </ul>
			 * Can also be an array which describes the curve. Values
			 * in the array are evenly subdivided and linearly
			 * interpolated over the duration of the attack. 
			 * @memberOf Tone.Envelope#
			 * @type {String|Array}
			 * @name attackCurve
			 * @example
			 * env.attackCurve = "linear";
			 * @example
			 * //can also be an array
			 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {
		        get: function () {
		            if (this.isString(this._attackCurve)) {
		                return this._attackCurve;
		            } else if (this.isArray(this._attackCurve)) {
		                //look up the name in the curves array
		                for (var type in Tone.Envelope.Type) {
		                    if (Tone.Envelope.Type[type].In === this._attackCurve) {
		                        return type;
		                    }
		                }
		                //otherwise just return the array
		                return this._attackCurve;
		            }
		        },
		        set: function (curve) {
		            //check if it's a valid type
		            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
		                var curveDef = Tone.Envelope.Type[curve];
		                if (this.isObject(curveDef)) {
		                    this._attackCurve = curveDef.In;
		                } else {
		                    this._attackCurve = curveDef;
		                }
		            } else if (this.isArray(curve)) {
		                this._attackCurve = curve;
		            } else {
		                throw new Error('Tone.Envelope: invalid curve: ' + curve);
		            }
		        }
		    });
		    /**
			 * The shape of the release. See the attack curve types. 
			 * @memberOf Tone.Envelope#
			 * @type {String|Array}
			 * @name releaseCurve
			 * @example
			 * env.releaseCurve = "linear";
			 */
		    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {
		        get: function () {
		            if (this.isString(this._releaseCurve)) {
		                return this._releaseCurve;
		            } else if (this.isArray(this._releaseCurve)) {
		                //look up the name in the curves array
		                for (var type in Tone.Envelope.Type) {
		                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {
		                        return type;
		                    }
		                }
		                //otherwise just return the array
		                return this._releaseCurve;
		            }
		        },
		        set: function (curve) {
		            //check if it's a valid type
		            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
		                var curveDef = Tone.Envelope.Type[curve];
		                if (this.isObject(curveDef)) {
		                    this._releaseCurve = curveDef.Out;
		                } else {
		                    this._releaseCurve = curveDef;
		                }
		            } else if (this.isArray(curve)) {
		                this._releaseCurve = curve;
		            } else {
		                throw new Error('Tone.Envelope: invalid curve: ' + curve);
		            }
		        }
		    });
		    /**
			 *  Trigger the attack/decay portion of the ADSR envelope. 
			 *  @param  {Time} [time=now] When the attack should start.
			 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
			 *                               number between 0-1
			 *  @returns {Tone.Envelope} this
			 *  @example
			 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
			 *  env.triggerAttack("+0.5", 0.2);
			 */
		    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        var originalAttack = this.toSeconds(this.attack);
		        var attack = originalAttack;
		        var decay = this.toSeconds(this.decay);
		        velocity = this.defaultArg(velocity, 1);
		        //check if it's not a complete attack
		        var currentValue = this.getValueAtTime(time);
		        if (currentValue > 0) {
		            //subtract the current value from the attack time
		            var attackRate = 1 / attack;
		            var remainingDistance = 1 - currentValue;
		            //the attack is now the remaining time
		            attack = remainingDistance / attackRate;
		        }
		        //attack
		        if (this._attackCurve === 'linear') {
		            this._sig.linearRampToValue(velocity, attack, time);
		        } else if (this._attackCurve === 'exponential') {
		            this._sig.exponentialRampToValue(velocity, attack, time);
		        } else if (attack > 0) {
		            this._sig.setRampPoint(time);
		            var curve = this._attackCurve;
		            //take only a portion of the curve
		            if (attack < originalAttack) {
		                var percentComplete = 1 - attack / originalAttack;
		                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);
		                curve = this._attackCurve.slice(sliceIndex);
		                //the first index is the current value
		                curve[0] = currentValue;
		            }
		            this._sig.setValueCurveAtTime(curve, time, attack, velocity);
		        }
		        //decay
		        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);
		        return this;
		    };
		    /**
			 *  Triggers the release of the envelope.
			 *  @param  {Time} [time=now] When the release portion of the envelope should start. 
			 *  @returns {Tone.Envelope} this
			 *  @example
			 *  //trigger release immediately
			 *  env.triggerRelease();
			 */
		    Tone.Envelope.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        var currentValue = this.getValueAtTime(time);
		        if (currentValue > 0) {
		            var release = this.toSeconds(this.release);
		            if (this._releaseCurve === 'linear') {
		                this._sig.linearRampToValue(0, release, time);
		            } else if (this._releaseCurve === 'exponential') {
		                this._sig.exponentialRampToValue(0, release, time);
		            } else {
		                var curve = this._releaseCurve;
		                if (this.isArray(curve)) {
		                    this._sig.setRampPoint(time);
		                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Get the scheduled value at the given time. This will
			 *  return the unconverted (raw) value.
			 *  @param  {Number}  time  The time in seconds.
			 *  @return  {Number}  The scheduled value at the given time.
			 */
		    Tone.Envelope.prototype.getValueAtTime = function (time) {
		        return this._sig.getValueAtTime(time);
		    };
		    /**
			 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
			 *  some duration, then triggerRelease. 
			 *  @param {Time} duration The duration of the sustain.
			 *  @param {Time} [time=now] When the attack should be triggered.
			 *  @param {number} [velocity=1] The velocity of the envelope. 
			 *  @returns {Tone.Envelope} this
			 *  @example
			 * //trigger the attack and then the release after 0.6 seconds.
			 * env.triggerAttackRelease(0.6);
			 */
		    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + this.toSeconds(duration));
		        return this;
		    };
		    /**
			 *  Cancels all scheduled envelope changes after the given time.
			 *  @param  {Time} after
			 *  @returns {Tone.Envelope} this
			 */
		    Tone.Envelope.prototype.cancel = function (after) {
		        this._sig.cancelScheduledValues(after);
		        return this;
		    };
		    /**
			 *  Borrows the connect method from Tone.Signal. 
			 *  @function
			 *  @private
			 */
		    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;
		    /**
		 	 *  Generate some complex envelope curves. 
		 	 */
		    (function _createCurves() {
		        var curveLen = 128;
		        var i, k;
		        //cosine curve
		        var cosineCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
		        }
		        //ripple curve
		        var rippleCurve = [];
		        var rippleCurveFreq = 6.4;
		        for (i = 0; i < curveLen - 1; i++) {
		            k = i / (curveLen - 1);
		            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
		            rippleCurve[i] = sineWave / 10 + k * 0.83;
		        }
		        rippleCurve[curveLen - 1] = 1;
		        //stairs curve
		        var stairsCurve = [];
		        var steps = 5;
		        for (i = 0; i < curveLen; i++) {
		            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
		        }
		        //in-out easing curve
		        var sineCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            k = i / (curveLen - 1);
		            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
		        }
		        //a bounce curve
		        var bounceCurve = [];
		        for (i = 0; i < curveLen; i++) {
		            k = i / (curveLen - 1);
		            var freq = Math.pow(k, 3) * 4 + 0.2;
		            var val = Math.cos(freq * Math.PI * 2 * k);
		            bounceCurve[i] = Math.abs(val * (1 - k));
		        }
		        /**
				 *  Invert a value curve to make it work for the release
				 *  @private
				 */
		        function invertCurve(curve) {
		            var out = new Array(curve.length);
		            for (var j = 0; j < curve.length; j++) {
		                out[j] = 1 - curve[j];
		            }
		            return out;
		        }
		        /**
				 *  reverse the curve
				 *  @private
				 */
		        function reverseCurve(curve) {
		            return curve.slice(0).reverse();
		        }
		        /**
				 *  attack and release curve arrays
				 *  @type  {Object}
				 *  @private
				 */
		        Tone.Envelope.Type = {
		            'linear': 'linear',
		            'exponential': 'exponential',
		            'bounce': {
		                In: invertCurve(bounceCurve),
		                Out: bounceCurve
		            },
		            'cosine': {
		                In: cosineCurve,
		                Out: reverseCurve(cosineCurve)
		            },
		            'step': {
		                In: stairsCurve,
		                Out: invertCurve(stairsCurve)
		            },
		            'ripple': {
		                In: rippleCurve,
		                Out: invertCurve(rippleCurve)
		            },
		            'sine': {
		                In: sineCurve,
		                Out: invertCurve(sineCurve)
		            }
		        };
		    }());
		    /**
			 *  Disconnect and dispose.
			 *  @returns {Tone.Envelope} this
			 */
		    Tone.Envelope.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sig.dispose();
		        this._sig = null;
		        this._attackCurve = null;
		        this._releaseCurve = null;
		        return this;
		    };
		    return Tone.Envelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. 
			 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
			 *          an audio signal as the input and will apply the envelope to the amplitude
			 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
			 *  
			 *  @constructor
			 *  @extends {Tone.Envelope}
			 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from 
			 *                               0 to it's maximum value. 
			 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
			 *                       	to fall to the sustain value. 
			 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
			 *                                	the release is triggered. 
			 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0. 
			 *  @example
			 * var ampEnv = new Tone.AmplitudeEnvelope({
			 * 	"attack": 0.1,
			 * 	"decay": 0.2,
			 * 	"sustain": 1.0,
			 * 	"release": 0.8
			 * }).toMaster();
			 * //create an oscillator and connect it
			 * var osc = new Tone.Oscillator().connect(ampEnv).start();
			 * //trigger the envelopes attack and release "8t" apart
			 * ampEnv.triggerAttackRelease("8t");
			 */
		    Tone.AmplitudeEnvelope = function () {
		        Tone.Envelope.apply(this, arguments);
		        /**
				 *  the input node
				 *  @type {GainNode}
				 *  @private
				 */
		        this.input = this.output = new Tone.Gain();
		        this._sig.connect(this.output.gain);
		    };
		    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);
		    /**
			 *  Clean up
			 *  @return  {Tone.AmplitudeEnvelope}  this
			 */
		    Tone.AmplitudeEnvelope.prototype.dispose = function () {
		        this.input.dispose();
		        this.input = null;
		        Tone.Envelope.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.AmplitudeEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Wrapper around the native Web Audio's 
			 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
			 *          Extracts FFT or Waveform data from the incoming signal.
			 *  @extends {Tone}
			 *  @param {String=} type The return type of the analysis, either "fft", or "waveform". 
			 *  @param {Number=} size The size of the FFT. Value must be a power of 
			 *                       two in the range 32 to 32768.
			 */
		    Tone.Analyser = function () {
		        var options = this.optionsObject(arguments, [
		            'type',
		            'size'
		        ], Tone.Analyser.defaults);
		        /**
				 *  The analyser node.
				 *  @private
				 *  @type {AnalyserNode}
				 */
		        this._analyser = this.input = this.output = this.context.createAnalyser();
		        /**
				 *  The analysis type
				 *  @type {String}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  The return type of the analysis
				 *  @type {String}
				 *  @private
				 */
		        this._returnType = options.returnType;
		        /**
				 *  The buffer that the FFT data is written to
				 *  @type {TypedArray}
				 *  @private
				 */
		        this._buffer = null;
		        //set the values initially
		        this.size = options.size;
		        this.type = options.type;
		        this.returnType = options.returnType;
		        this.minDecibels = options.minDecibels;
		        this.maxDecibels = options.maxDecibels;
		    };
		    Tone.extend(Tone.Analyser);
		    /**
			 *  The default values.
			 *  @type {Object}
			 *  @const
			 */
		    Tone.Analyser.defaults = {
		        'size': 1024,
		        'returnType': 'byte',
		        'type': 'fft',
		        'smoothing': 0.8,
		        'maxDecibels': -30,
		        'minDecibels': -100
		    };
		    /**
			 *  Possible return types of Tone.Analyser.analyse()
			 *  @enum {String}
			 */
		    Tone.Analyser.Type = {
		        Waveform: 'waveform',
		        FFT: 'fft'
		    };
		    /**
			 *  Possible return types of Tone.Analyser.analyse(). 
			 *  byte values are between [0,255]. float values are between 
			 *  [-1, 1] when the type is set to "waveform" and between 
			 *  [minDecibels,maxDecibels] when the type is "fft".
			 *  @enum {String}
			 */
		    Tone.Analyser.ReturnType = {
		        Byte: 'byte',
		        Float: 'float'
		    };
		    /**
			 *  Run the analysis given the current settings and return the 
			 *  result as a TypedArray. 
			 *  @returns {TypedArray}
			 */
		    Tone.Analyser.prototype.analyse = function () {
		        if (this._type === Tone.Analyser.Type.FFT) {
		            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
		                this._analyser.getByteFrequencyData(this._buffer);
		            } else {
		                this._analyser.getFloatFrequencyData(this._buffer);
		            }
		        } else if (this._type === Tone.Analyser.Type.Waveform) {
		            if (this._returnType === Tone.Analyser.ReturnType.Byte) {
		                this._analyser.getByteTimeDomainData(this._buffer);
		            } else {
		                if (this.isFunction(AnalyserNode.prototype.getFloatTimeDomainData)) {
		                    this._analyser.getFloatTimeDomainData(this._buffer);
		                } else {
		                    var uint8 = new Uint8Array(this._buffer.length);
		                    this._analyser.getByteTimeDomainData(uint8);
		                    //referenced https://github.com/mohayonao/get-float-time-domain-data 
		                    // POLYFILL
		                    for (var i = 0; i < uint8.length; i++) {
		                        this._buffer[i] = (uint8[i] - 128) * 0.0078125;
		                    }
		                }
		            }
		        }
		        return this._buffer;
		    };
		    /**
			 *  The size of analysis. This must be a power of two in the range 32 to 32768.
			 *  @memberOf Tone.Analyser#
			 *  @type {Number}
			 *  @name size
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'size', {
		        get: function () {
		            return this._analyser.frequencyBinCount;
		        },
		        set: function (size) {
		            this._analyser.fftSize = size * 2;
		            this.type = this._type;
		        }
		    });
		    /**
			 *  The return type of Tone.Analyser.analyse(), either "byte" or "float". 
			 *  When the type is set to "byte" the range of values returned in the array
			 *  are between 0-255. "float" values are between 
			 *  [-1, 1] when the type is set to "waveform" and between 
			 *  [minDecibels,maxDecibels] when the type is "fft".
			 *  @memberOf Tone.Analyser#
			 *  @type {String}
			 *  @name type
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {
		        get: function () {
		            return this._returnType;
		        },
		        set: function (type) {
		            if (type === Tone.Analyser.ReturnType.Byte) {
		                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);
		            } else if (type === Tone.Analyser.ReturnType.Float) {
		                this._buffer = new Float32Array(this._analyser.frequencyBinCount);
		            } else {
		                throw new TypeError('Tone.Analayser: invalid return type: ' + type);
		            }
		            this._returnType = type;
		        }
		    });
		    /**
			 *  The analysis function returned by Tone.Analyser.analyse(), either "fft" or "waveform". 
			 *  @memberOf Tone.Analyser#
			 *  @type {String}
			 *  @name type
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {
		                throw new TypeError('Tone.Analyser: invalid type: ' + type);
		            }
		            this._type = type;
		        }
		    });
		    /**
			 *  0 represents no time averaging with the last analysis frame.
			 *  @memberOf Tone.Analyser#
			 *  @type {NormalRange}
			 *  @name smoothing
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {
		        get: function () {
		            return this._analyser.smoothingTimeConstant;
		        },
		        set: function (val) {
		            this._analyser.smoothingTimeConstant = val;
		        }
		    });
		    /**
			 *  The smallest decibel value which is analysed by the FFT. 
			 *  @memberOf Tone.Analyser#
			 *  @type {Decibels}
			 *  @name minDecibels
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {
		        get: function () {
		            return this._analyser.minDecibels;
		        },
		        set: function (val) {
		            this._analyser.minDecibels = val;
		        }
		    });
		    /**
			 *  The largest decibel value which is analysed by the FFT. 
			 *  @memberOf Tone.Analyser#
			 *  @type {Decibels}
			 *  @name maxDecibels
			 */
		    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {
		        get: function () {
		            return this._analyser.maxDecibels;
		        },
		        set: function (val) {
		            this._analyser.maxDecibels = val;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.Analyser}  this
			 */
		    Tone.Analyser.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._analyser.disconnect();
		        this._analyser = null;
		        this._buffer = null;
		    };
		    return Tone.Analyser;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Compressor is a thin wrapper around the Web Audio 
			 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
			 *         Compression reduces the volume of loud sounds or amplifies quiet sounds 
			 *         by narrowing or "compressing" an audio signal's dynamic range. 
			 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
			 *  @param {Positive} [ratio] The gain reduction ratio.
			 *  @example
			 * var comp = new Tone.Compressor(-30, 3);
			 */
		    Tone.Compressor = function () {
		        var options = this.optionsObject(arguments, [
		            'threshold',
		            'ratio'
		        ], Tone.Compressor.defaults);
		        /**
				 *  the compressor node
				 *  @type {DynamicsCompressorNode}
				 *  @private
				 */
		        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();
		        /**
				 *  the threshold vaue
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.threshold = this._compressor.threshold;
		        /**
				 *  The attack parameter
				 *  @type {Time}
				 *  @signal
				 */
		        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);
		        /**
				 *  The release parameter
				 *  @type {Time}
				 *  @signal
				 */
		        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);
		        /**
				 *  The knee parameter
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.knee = this._compressor.knee;
		        /**
				 *  The ratio value
				 *  @type {Number}
				 *  @signal
				 */
		        this.ratio = this._compressor.ratio;
		        //set the defaults
		        this._readOnly([
		            'knee',
		            'release',
		            'attack',
		            'ratio',
		            'threshold'
		        ]);
		        this.set(options);
		    };
		    Tone.extend(Tone.Compressor);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Compressor.defaults = {
		        'ratio': 12,
		        'threshold': -24,
		        'release': 0.25,
		        'attack': 0.003,
		        'knee': 30
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Compressor} this
			 */
		    Tone.Compressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'knee',
		            'release',
		            'attack',
		            'ratio',
		            'threshold'
		        ]);
		        this._compressor.disconnect();
		        this._compressor = null;
		        this.attack.dispose();
		        this.attack = null;
		        this.release.dispose();
		        this.release = null;
		        this.threshold = null;
		        this.ratio = null;
		        this.knee = null;
		        return this;
		    };
		    return Tone.Compressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Add a signal and a number or two signals. When no value is
			 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
			 *         and <code>input[1]</code>. If a value is passed into the constructor, 
			 *         the it will be added to the input.
			 *  
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number=} value If no value is provided, Tone.Add will sum the first
			 *                         and second inputs. 
			 *  @example
			 * var signal = new Tone.Signal(2);
			 * var add = new Tone.Add(2);
			 * signal.connect(add);
			 * //the output of add equals 4
			 *  @example
			 * //if constructed with no arguments
			 * //it will add the first and second inputs
			 * var add = new Tone.Add();
			 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
			 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
			 * //the output of add equals 7. 
			 */
		    Tone.Add = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the summing node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();
		        /**
				 *  @private
				 *  @type {Tone.Signal}
				 */
		        this._param = this.input[1] = new Tone.Signal(value);
		        this._param.connect(this._sum);
		    };
		    Tone.extend(Tone.Add, Tone.Signal);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Add} this
			 */
		    Tone.Add.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sum.dispose();
		        this._sum = null;
		        this._param.dispose();
		        this._param = null;
		        return this;
		    };
		    return Tone.Add;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, 
			 *          multiplies the incoming signal by that value. 
			 *
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number=} value Constant value to multiple. If no value is provided,
			 *                         it will return the product of the first and second inputs
			 *  @example
			 * var mult = new Tone.Multiply();
			 * var sigA = new Tone.Signal(3);
			 * var sigB = new Tone.Signal(4);
			 * sigA.connect(mult, 0, 0);
			 * sigB.connect(mult, 0, 1);
			 * //output of mult is 12.
			 *  @example
			 * var mult = new Tone.Multiply(10);
			 * var sig = new Tone.Signal(2).connect(mult);
			 * //the output of mult is 20. 
			 */
		    Tone.Multiply = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the input node is the same as the output node
				 *  it is also the GainNode which handles the scaling of incoming signal
				 *  
				 *  @type {GainNode}
				 *  @private
				 */
		        this._mult = this.input[0] = this.output = new Tone.Gain();
		        /**
				 *  the scaling parameter
				 *  @type {AudioParam}
				 *  @private
				 */
		        this._param = this.input[1] = this.output.gain;
		        this._param.value = this.defaultArg(value, 0);
		    };
		    Tone.extend(Tone.Multiply, Tone.Signal);
		    /**
			 *  clean up
			 *  @returns {Tone.Multiply} this
			 */
		    Tone.Multiply.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._mult.dispose();
		        this._mult = null;
		        this._param = null;
		        return this;
		    };
		    return Tone.Multiply;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var neg = new Tone.Negate();
			 * var sig = new Tone.Signal(-2).connect(neg);
			 * //output of neg is positive 2. 
			 */
		    Tone.Negate = function () {
		        /**
				 *  negation is done by multiplying by -1
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._multiply = this.input = this.output = new Tone.Multiply(-1);
		    };
		    Tone.extend(Tone.Negate, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.Negate} this
			 */
		    Tone.Negate.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._multiply.dispose();
		        this._multiply = null;
		        return this;
		    };
		    return Tone.Negate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
			 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
			 *         signals <code>.value</code> will be subtracted from the incoming signal.
			 *
			 *  @extends {Tone.Signal}
			 *  @constructor
			 *  @param {number=} value The value to subtract from the incoming signal. If the value
			 *                         is omitted, it will subtract the second signal from the first.
			 *  @example
			 * var sub = new Tone.Subtract(1);
			 * var sig = new Tone.Signal(4).connect(sub);
			 * //the output of sub is 3. 
			 *  @example
			 * var sub = new Tone.Subtract();
			 * var sigA = new Tone.Signal(10);
			 * var sigB = new Tone.Signal(2.5);
			 * sigA.connect(sub, 0, 0);
			 * sigB.connect(sub, 0, 1);
			 * //output of sub is 7.5
			 */
		    Tone.Subtract = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  the summing node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._sum = this.input[0] = this.output = new Tone.Gain();
		        /**
				 *  negate the input of the second input before connecting it
				 *  to the summing node.
				 *  @type {Tone.Negate}
				 *  @private
				 */
		        this._neg = new Tone.Negate();
		        /**
				 *  the node where the value is set
				 *  @private
				 *  @type {Tone.Signal}
				 */
		        this._param = this.input[1] = new Tone.Signal(value);
		        this._param.chain(this._neg, this._sum);
		    };
		    Tone.extend(Tone.Subtract, Tone.Signal);
		    /**
			 *  Clean up.
			 *  @returns {Tone.SignalBase} this
			 */
		    Tone.Subtract.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._neg.dispose();
		        this._neg = null;
		        this._sum.disconnect();
		        this._sum = null;
		        this._param.dispose();
		        this._param = null;
		        return this;
		    };
		    return Tone.Subtract;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
			 *  
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var gt0 = new Tone.GreaterThanZero();
			 * var sig = new Tone.Signal(0.01).connect(gt0);
			 * //the output of gt0 is 1. 
			 * sig.value = 0;
			 * //the output of gt0 is 0. 
			 */
		    Tone.GreaterThanZero = function () {
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._thresh = this.output = new Tone.WaveShaper(function (val) {
		            if (val <= 0) {
		                return 0;
		            } else {
		                return 1;
		            }
		        }, 127);
		        /**
				 *  scale the first thresholded signal by a large value.
				 *  this will help with values which are very close to 0
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.input = new Tone.Multiply(10000);
		        //connections
		        this._scale.connect(this._thresh);
		    };
		    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);
		    /**
			 *  dispose method
			 *  @returns {Tone.GreaterThanZero} this
			 */
		    Tone.GreaterThanZero.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._thresh.dispose();
		        this._thresh = null;
		        return this;
		    };
		    return Tone.GreaterThanZero;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
			 *          can compare two signals or a signal and a number. 
			 *  
			 *  @constructor
			 *  @extends {Tone.Signal}
			 *  @param {number} [value=0] the value to compare to the incoming signal
			 *  @example
			 * var gt = new Tone.GreaterThan(2);
			 * var sig = new Tone.Signal(4).connect(gt);
			 * //output of gt is equal 1. 
			 */
		    Tone.GreaterThan = function (value) {
		        this.createInsOuts(2, 0);
		        /**
				 *  subtract the amount from the incoming signal
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._param = this.input[0] = new Tone.Subtract(value);
		        this.input[1] = this._param.input[1];
		        /**
				 *  compare that amount to zero
				 *  @type {Tone.GreaterThanZero}
				 *  @private
				 */
		        this._gtz = this.output = new Tone.GreaterThanZero();
		        //connect
		        this._param.connect(this._gtz);
		    };
		    Tone.extend(Tone.GreaterThan, Tone.Signal);
		    /**
			 *  dispose method
			 *  @returns {Tone.GreaterThan} this
			 */
		    Tone.GreaterThan.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._param.dispose();
		        this._param = null;
		        this._gtz.dispose();
		        this._gtz = null;
		        return this;
		    };
		    return Tone.GreaterThan;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Return the absolute value of an incoming signal. 
			 *  
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @example
			 * var signal = new Tone.Signal(-1);
			 * var abs = new Tone.Abs();
			 * signal.connect(abs);
			 * //the output of abs is 1. 
			 */
		    Tone.Abs = function () {
		        /**
				 *  @type {Tone.LessThan}
				 *  @private
				 */
		        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {
		            if (val === 0) {
		                return 0;
		            } else {
		                return Math.abs(val);
		            }
		        }, 127);
		    };
		    Tone.extend(Tone.Abs, Tone.SignalBase);
		    /**
			 *  dispose method
			 *  @returns {Tone.Abs} this
			 */
		    Tone.Abs.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._abs.dispose();
		        this._abs = null;
		        return this;
		    };
		    return Tone.Abs;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
			 *         values in the NormalRange. 
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {NormalRange} modulus The modulus to apply.
			 *  @example
			 * var mod = new Tone.Modulo(0.2)
			 * var sig = new Tone.Signal(0.5).connect(mod);
			 * //mod outputs 0.1
			 */
		    Tone.Modulo = function (modulus) {
		        this.createInsOuts(1, 0);
		        /**
				 *  A waveshaper gets the integer multiple of 
				 *  the input signal and the modulus.
				 *  @private
				 *  @type {Tone.WaveShaper}
				 */
		        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));
		        /**
				 *  the integer multiple is multiplied by the modulus
				 *  @type  {Tone.Multiply}
				 *  @private
				 */
		        this._multiply = new Tone.Multiply();
		        /**
				 *  and subtracted from the input signal
				 *  @type  {Tone.Subtract}
				 *  @private
				 */
		        this._subtract = this.output = new Tone.Subtract();
		        /**
				 *  the modulus signal
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._modSignal = new Tone.Signal(modulus);
		        //connections
		        this.input.fan(this._shaper, this._subtract);
		        this._modSignal.connect(this._multiply, 0, 0);
		        this._shaper.connect(this._multiply, 0, 1);
		        this._multiply.connect(this._subtract, 0, 1);
		        this._setWaveShaper(modulus);
		    };
		    Tone.extend(Tone.Modulo, Tone.SignalBase);
		    /**
			 *  @param  {number}  mod  the modulus to apply
			 *  @private
			 */
		    Tone.Modulo.prototype._setWaveShaper = function (mod) {
		        this._shaper.setMap(function (val) {
		            var multiple = Math.floor((val + 0.0001) / mod);
		            return multiple;
		        });
		    };
		    /**
			 * The modulus value.
			 * @memberOf Tone.Modulo#
			 * @type {NormalRange}
			 * @name value
			 */
		    Object.defineProperty(Tone.Modulo.prototype, 'value', {
		        get: function () {
		            return this._modSignal.value;
		        },
		        set: function (mod) {
		            this._modSignal.value = mod;
		            this._setWaveShaper(mod);
		        }
		    });
		    /**
			 * clean up
			 *  @returns {Tone.Modulo} this
			 */
		    Tone.Modulo.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        this._multiply.dispose();
		        this._multiply = null;
		        this._subtract.dispose();
		        this._subtract = null;
		        this._modSignal.dispose();
		        this._modSignal = null;
		        return this;
		    };
		    return Tone.Modulo;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
			 *         See Tone.GainToAudio.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 *  var a2g = new Tone.AudioToGain();
			 */
		    Tone.AudioToGain = function () {
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
		            return (x + 1) / 2;
		        });
		    };
		    Tone.extend(Tone.AudioToGain, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.AudioToGain} this
			 */
		    Tone.AudioToGain.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._norm.dispose();
		        this._norm = null;
		        return this;
		    };
		    return Tone.AudioToGain;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Evaluate an expression at audio rate. <br><br>
			 *         Parsing code modified from https://code.google.com/p/tapdigit/
			 *         Copyright 2011 2012 Ariya Hidayat, New BSD License
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {string} expr the expression to generate
			 *  @example
			 * //adds the signals from input[0] and input[1].
			 * var expr = new Tone.Expr("$0 + $1");
			 */
		    Tone.Expr = function () {
		        var expr = this._replacements(Array.prototype.slice.call(arguments));
		        var inputCount = this._parseInputs(expr);
		        /**
				 *  hold onto all of the nodes for disposal
				 *  @type {Array}
				 *  @private
				 */
		        this._nodes = [];
		        /**
				 *  The inputs. The length is determined by the expression. 
				 *  @type {Array}
				 */
		        this.input = new Array(inputCount);
		        //create a gain for each input
		        for (var i = 0; i < inputCount; i++) {
		            this.input[i] = this.context.createGain();
		        }
		        //parse the syntax tree
		        var tree = this._parseTree(expr);
		        //evaluate the results
		        var result;
		        try {
		            result = this._eval(tree);
		        } catch (e) {
		            this._disposeNodes();
		            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);
		        }
		        /**
				 *  The output node is the result of the expression
				 *  @type {Tone}
				 */
		        this.output = result;
		    };
		    Tone.extend(Tone.Expr, Tone.SignalBase);
		    //some helpers to cut down the amount of code
		    function applyBinary(Constructor, args, self) {
		        var op = new Constructor();
		        self._eval(args[0]).connect(op, 0, 0);
		        self._eval(args[1]).connect(op, 0, 1);
		        return op;
		    }
		    function applyUnary(Constructor, args, self) {
		        var op = new Constructor();
		        self._eval(args[0]).connect(op, 0, 0);
		        return op;
		    }
		    function getNumber(arg) {
		        return arg ? parseFloat(arg) : undefined;
		    }
		    function literalNumber(arg) {
		        return arg && arg.args ? parseFloat(arg.args) : undefined;
		    }
		    /*
			 *  the Expressions that Tone.Expr can parse.
			 *
			 *  each expression belongs to a group and contains a regexp 
			 *  for selecting the operator as well as that operators method
			 *  
			 *  @type {Object}
			 *  @private
			 */
		    Tone.Expr._Expressions = {
		        //values
		        'value': {
		            'signal': {
		                regexp: /^\d+\.\d+|^\d+/,
		                method: function (arg) {
		                    var sig = new Tone.Signal(getNumber(arg));
		                    return sig;
		                }
		            },
		            'input': {
		                regexp: /^\$\d/,
		                method: function (arg, self) {
		                    return self.input[getNumber(arg.substr(1))];
		                }
		            }
		        },
		        //syntactic glue
		        'glue': {
		            '(': { regexp: /^\(/ },
		            ')': { regexp: /^\)/ },
		            ',': { regexp: /^,/ }
		        },
		        //functions
		        'func': {
		            'abs': {
		                regexp: /^abs/,
		                method: applyUnary.bind(this, Tone.Abs)
		            },
		            'mod': {
		                regexp: /^mod/,
		                method: function (args, self) {
		                    var modulus = literalNumber(args[1]);
		                    var op = new Tone.Modulo(modulus);
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            },
		            'pow': {
		                regexp: /^pow/,
		                method: function (args, self) {
		                    var exp = literalNumber(args[1]);
		                    var op = new Tone.Pow(exp);
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            },
		            'a2g': {
		                regexp: /^a2g/,
		                method: function (args, self) {
		                    var op = new Tone.AudioToGain();
		                    self._eval(args[0]).connect(op);
		                    return op;
		                }
		            }
		        },
		        //binary expressions
		        'binary': {
		            '+': {
		                regexp: /^\+/,
		                precedence: 1,
		                method: applyBinary.bind(this, Tone.Add)
		            },
		            '-': {
		                regexp: /^\-/,
		                precedence: 1,
		                method: function (args, self) {
		                    //both unary and binary op
		                    if (args.length === 1) {
		                        return applyUnary(Tone.Negate, args, self);
		                    } else {
		                        return applyBinary(Tone.Subtract, args, self);
		                    }
		                }
		            },
		            '*': {
		                regexp: /^\*/,
		                precedence: 0,
		                method: applyBinary.bind(this, Tone.Multiply)
		            }
		        },
		        //unary expressions
		        'unary': {
		            '-': {
		                regexp: /^\-/,
		                method: applyUnary.bind(this, Tone.Negate)
		            },
		            '!': {
		                regexp: /^\!/,
		                method: applyUnary.bind(this, Tone.NOT)
		            }
		        }
		    };
		    /**
			 *  @param   {string} expr the expression string
			 *  @return  {number}      the input count
			 *  @private
			 */
		    Tone.Expr.prototype._parseInputs = function (expr) {
		        var inputArray = expr.match(/\$\d/g);
		        var inputMax = 0;
		        if (inputArray !== null) {
		            for (var i = 0; i < inputArray.length; i++) {
		                var inputNum = parseInt(inputArray[i].substr(1)) + 1;
		                inputMax = Math.max(inputMax, inputNum);
		            }
		        }
		        return inputMax;
		    };
		    /**
			 *  @param   {Array} args 	an array of arguments
			 *  @return  {string} the results of the replacements being replaced
			 *  @private
			 */
		    Tone.Expr.prototype._replacements = function (args) {
		        var expr = args.shift();
		        for (var i = 0; i < args.length; i++) {
		            expr = expr.replace(/\%/i, args[i]);
		        }
		        return expr;
		    };
		    /**
			 *  tokenize the expression based on the Expressions object
			 *  @param   {string} expr 
			 *  @return  {Object}      returns two methods on the tokenized list, next and peek
			 *  @private
			 */
		    Tone.Expr.prototype._tokenize = function (expr) {
		        var position = -1;
		        var tokens = [];
		        while (expr.length > 0) {
		            expr = expr.trim();
		            var token = getNextToken(expr);
		            tokens.push(token);
		            expr = expr.substr(token.value.length);
		        }
		        function getNextToken(expr) {
		            for (var type in Tone.Expr._Expressions) {
		                var group = Tone.Expr._Expressions[type];
		                for (var opName in group) {
		                    var op = group[opName];
		                    var reg = op.regexp;
		                    var match = expr.match(reg);
		                    if (match !== null) {
		                        return {
		                            type: type,
		                            value: match[0],
		                            method: op.method
		                        };
		                    }
		                }
		            }
		            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);
		        }
		        return {
		            next: function () {
		                return tokens[++position];
		            },
		            peek: function () {
		                return tokens[position + 1];
		            }
		        };
		    };
		    /**
			 *  recursively parse the string expression into a syntax tree
			 *  
			 *  @param   {string} expr 
			 *  @return  {Object}
			 *  @private
			 */
		    Tone.Expr.prototype._parseTree = function (expr) {
		        var lexer = this._tokenize(expr);
		        var isUndef = this.isUndef.bind(this);
		        function matchSyntax(token, syn) {
		            return !isUndef(token) && token.type === 'glue' && token.value === syn;
		        }
		        function matchGroup(token, groupName, prec) {
		            var ret = false;
		            var group = Tone.Expr._Expressions[groupName];
		            if (!isUndef(token)) {
		                for (var opName in group) {
		                    var op = group[opName];
		                    if (op.regexp.test(token.value)) {
		                        if (!isUndef(prec)) {
		                            if (op.precedence === prec) {
		                                return true;
		                            }
		                        } else {
		                            return true;
		                        }
		                    }
		                }
		            }
		            return ret;
		        }
		        function parseExpression(precedence) {
		            if (isUndef(precedence)) {
		                precedence = 5;
		            }
		            var expr;
		            if (precedence < 0) {
		                expr = parseUnary();
		            } else {
		                expr = parseExpression(precedence - 1);
		            }
		            var token = lexer.peek();
		            while (matchGroup(token, 'binary', precedence)) {
		                token = lexer.next();
		                expr = {
		                    operator: token.value,
		                    method: token.method,
		                    args: [
		                        expr,
		                        parseExpression(precedence - 1)
		                    ]
		                };
		                token = lexer.peek();
		            }
		            return expr;
		        }
		        function parseUnary() {
		            var token, expr;
		            token = lexer.peek();
		            if (matchGroup(token, 'unary')) {
		                token = lexer.next();
		                expr = parseUnary();
		                return {
		                    operator: token.value,
		                    method: token.method,
		                    args: [expr]
		                };
		            }
		            return parsePrimary();
		        }
		        function parsePrimary() {
		            var token, expr;
		            token = lexer.peek();
		            if (isUndef(token)) {
		                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');
		            }
		            if (token.type === 'func') {
		                token = lexer.next();
		                return parseFunctionCall(token);
		            }
		            if (token.type === 'value') {
		                token = lexer.next();
		                return {
		                    method: token.method,
		                    args: token.value
		                };
		            }
		            if (matchSyntax(token, '(')) {
		                lexer.next();
		                expr = parseExpression();
		                token = lexer.next();
		                if (!matchSyntax(token, ')')) {
		                    throw new SyntaxError('Expected )');
		                }
		                return expr;
		            }
		            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);
		        }
		        function parseFunctionCall(func) {
		            var token, args = [];
		            token = lexer.next();
		            if (!matchSyntax(token, '(')) {
		                throw new SyntaxError('Tone.Expr: Expected ( in a function call "' + func.value + '"');
		            }
		            token = lexer.peek();
		            if (!matchSyntax(token, ')')) {
		                args = parseArgumentList();
		            }
		            token = lexer.next();
		            if (!matchSyntax(token, ')')) {
		                throw new SyntaxError('Tone.Expr: Expected ) in a function call "' + func.value + '"');
		            }
		            return {
		                method: func.method,
		                args: args,
		                name: name
		            };
		        }
		        function parseArgumentList() {
		            var token, expr, args = [];
		            while (true) {
		                expr = parseExpression();
		                if (isUndef(expr)) {
		                    // TODO maybe throw exception?
		                    break;
		                }
		                args.push(expr);
		                token = lexer.peek();
		                if (!matchSyntax(token, ',')) {
		                    break;
		                }
		                lexer.next();
		            }
		            return args;
		        }
		        return parseExpression();
		    };
		    /**
			 *  recursively evaluate the expression tree
			 *  @param   {Object} tree 
			 *  @return  {AudioNode}      the resulting audio node from the expression
			 *  @private
			 */
		    Tone.Expr.prototype._eval = function (tree) {
		        if (!this.isUndef(tree)) {
		            var node = tree.method(tree.args, this);
		            this._nodes.push(node);
		            return node;
		        }
		    };
		    /**
			 *  dispose all the nodes
			 *  @private
			 */
		    Tone.Expr.prototype._disposeNodes = function () {
		        for (var i = 0; i < this._nodes.length; i++) {
		            var node = this._nodes[i];
		            if (this.isFunction(node.dispose)) {
		                node.dispose();
		            } else if (this.isFunction(node.disconnect)) {
		                node.disconnect();
		            }
		            node = null;
		            this._nodes[i] = null;
		        }
		        this._nodes = null;
		    };
		    /**
			 *  clean up
			 */
		    Tone.Expr.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._disposeNodes();
		    };
		    return Tone.Expr;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 * var eqPowGain = new Tone.EqualPowerGain();
			 */
		    Tone.EqualPowerGain = function () {
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {
		            if (Math.abs(val) < 0.001) {
		                //should output 0 when input is 0
		                return 0;
		            } else {
		                return this.equalPowerScale(val);
		            }
		        }.bind(this), 4096);
		    };
		    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.EqualPowerGain} this
			 */
		    Tone.EqualPowerGain.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._eqPower.dispose();
		        this._eqPower = null;
		        return this;
		    };
		    return Tone.EqualPowerGain;
		});
		Module(function (Tone) {
		    
		    /**
			 * @class  Tone.Crossfade provides equal power fading between two inputs. 
			 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
			 *
			 * @constructor
			 * @extends {Tone}
			 * @param {NormalRange} [initialFade=0.5]
			 * @example
			 * var crossFade = new Tone.CrossFade(0.5);
			 * //connect effect A to crossfade from
			 * //effect output 0 to crossfade input 0
			 * effectA.connect(crossFade, 0, 0);
			 * //connect effect B to crossfade from
			 * //effect output 0 to crossfade input 1
			 * effectB.connect(crossFade, 0, 1);
			 * crossFade.fade.value = 0;
			 * // ^ only effectA is output
			 * crossFade.fade.value = 1;
			 * // ^ only effectB is output
			 * crossFade.fade.value = 0.5;
			 * // ^ the two signals are mixed equally. 
			 */
		    Tone.CrossFade = function (initialFade) {
		        this.createInsOuts(2, 1);
		        /**
				 *  Alias for <code>input[0]</code>. 
				 *  @type {Tone.Gain}
				 */
		        this.a = this.input[0] = new Tone.Gain();
		        /**
				 *  Alias for <code>input[1]</code>. 
				 *  @type {Tone.Gain}
				 */
		        this.b = this.input[1] = new Tone.Gain();
		        /**
				 * 	The mix between the two inputs. A fade value of 0
				 * 	will output 100% <code>input[0]</code> and 
				 * 	a value of 1 will output 100% <code>input[1]</code>. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);
		        /**
				 *  equal power gain cross fade
				 *  @private
				 *  @type {Tone.EqualPowerGain}
				 */
		        this._equalPowerA = new Tone.EqualPowerGain();
		        /**
				 *  equal power gain cross fade
				 *  @private
				 *  @type {Tone.EqualPowerGain}
				 */
		        this._equalPowerB = new Tone.EqualPowerGain();
		        /**
				 *  invert the incoming signal
				 *  @private
				 *  @type {Tone}
				 */
		        this._invert = new Tone.Expr('1 - $0');
		        //connections
		        this.a.connect(this.output);
		        this.b.connect(this.output);
		        this.fade.chain(this._equalPowerB, this.b.gain);
		        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);
		        this._readOnly('fade');
		    };
		    Tone.extend(Tone.CrossFade);
		    /**
			 *  clean up
			 *  @returns {Tone.CrossFade} this
			 */
		    Tone.CrossFade.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('fade');
		        this._equalPowerA.dispose();
		        this._equalPowerA = null;
		        this._equalPowerB.dispose();
		        this._equalPowerB = null;
		        this.fade.dispose();
		        this.fade = null;
		        this._invert.dispose();
		        this._invert = null;
		        this.a.dispose();
		        this.a = null;
		        this.b.dispose();
		        this.b = null;
		        return this;
		    };
		    return Tone.CrossFade;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Filter is a filter which allows for all of the same native methods
			 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). 
			 *          Tone.Filter has the added ability to set the filter rolloff at -12 
			 *          (default), -24 and -48. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
			 *  @param {string=} type The type of filter.
			 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
			 *                            3 choices: -12, -24, and -48
			 *  @example
			 *  var filter = new Tone.Filter(200, "highpass");
			 */
		    Tone.Filter = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'rolloff'
		        ], Tone.Filter.defaults);
		        /**
				 *  the filter(s)
				 *  @type {Array}
				 *  @private
				 */
		        this._filters = [];
		        /**
				 *  The cutoff frequency of the filter. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune parameter
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(0, Tone.Type.Cents);
		        /**
				 *  The gain of the filter, only used in certain filter types
				 *  @type {Number}
				 *  @signal
				 */
		        this.gain = new Tone.Signal({
		            'value': options.gain,
		            'convert': false
		        });
		        /**
				 *  The Q or Quality of the filter
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q);
		        /**
				 *  the type of the filter
				 *  @type {string}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  the rolloff value of the filter
				 *  @type {number}
				 *  @private
				 */
		        this._rolloff = options.rolloff;
		        //set the rolloff;
		        this.rolloff = options.rolloff;
		        this._readOnly([
		            'detune',
		            'frequency',
		            'gain',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.Filter);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Filter.defaults = {
		        'type': 'lowpass',
		        'frequency': 350,
		        'rolloff': -12,
		        'Q': 1,
		        'gain': 0
		    };
		    /**
			 * The type of the filter. Types: "lowpass", "highpass", 
			 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking". 
			 * @memberOf Tone.Filter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Filter.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            var types = [
		                'lowpass',
		                'highpass',
		                'bandpass',
		                'lowshelf',
		                'highshelf',
		                'notch',
		                'allpass',
		                'peaking'
		            ];
		            if (types.indexOf(type) === -1) {
		                throw new TypeError('Tone.Filter: invalid type ' + type);
		            }
		            this._type = type;
		            for (var i = 0; i < this._filters.length; i++) {
		                this._filters[i].type = type;
		            }
		        }
		    });
		    /**
			 * The rolloff of the filter which is the drop in db
			 * per octave. Implemented internally by cascading filters.
			 * Only accepts the values -12, -24, -48 and -96.
			 * @memberOf Tone.Filter#
			 * @type {number}
			 * @name rolloff
			 */
		    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {
		        get: function () {
		            return this._rolloff;
		        },
		        set: function (rolloff) {
		            rolloff = parseInt(rolloff, 10);
		            var possibilities = [
		                -12,
		                -24,
		                -48,
		                -96
		            ];
		            var cascadingCount = possibilities.indexOf(rolloff);
		            //check the rolloff is valid
		            if (cascadingCount === -1) {
		                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');
		            }
		            cascadingCount += 1;
		            this._rolloff = rolloff;
		            //first disconnect the filters and throw them away
		            this.input.disconnect();
		            for (var i = 0; i < this._filters.length; i++) {
		                this._filters[i].disconnect();
		                this._filters[i] = null;
		            }
		            this._filters = new Array(cascadingCount);
		            for (var count = 0; count < cascadingCount; count++) {
		                var filter = this.context.createBiquadFilter();
		                filter.type = this._type;
		                this.frequency.connect(filter.frequency);
		                this.detune.connect(filter.detune);
		                this.Q.connect(filter.Q);
		                this.gain.connect(filter.gain);
		                this._filters[count] = filter;
		            }
		            //connect them up
		            var connectionChain = [this.input].concat(this._filters).concat([this.output]);
		            this.connectSeries.apply(this, connectionChain);
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @return {Tone.Filter} this
			 */
		    Tone.Filter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        for (var i = 0; i < this._filters.length; i++) {
		            this._filters[i].disconnect();
		            this._filters[i] = null;
		        }
		        this._filters = null;
		        this._writable([
		            'detune',
		            'frequency',
		            'gain',
		            'Q'
		        ]);
		        this.frequency.dispose();
		        this.Q.dispose();
		        this.frequency = null;
		        this.Q = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.gain.dispose();
		        this.gain = null;
		        return this;
		    };
		    return Tone.Filter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Split the incoming signal into three bands (low, mid, high)
			 *         with two crossover frequency controls. 
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
			 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
			 */
		    Tone.MultibandSplit = function () {
		        var options = this.optionsObject(arguments, [
		            'lowFrequency',
		            'highFrequency'
		        ], Tone.MultibandSplit.defaults);
		        /**
				 *  the input
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.input = new Tone.Gain();
		        /**
				 *  the outputs
				 *  @type {Array}
				 *  @private
				 */
		        this.output = new Array(3);
		        /**
				 *  The low band. Alias for <code>output[0]</code>
				 *  @type {Tone.Filter}
				 */
		        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');
		        /**
				 *  the lower filter of the mid band
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._lowMidFilter = new Tone.Filter(0, 'highpass');
		        /**
				 *  The mid band output. Alias for <code>output[1]</code>
				 *  @type {Tone.Filter}
				 */
		        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');
		        /**
				 *  The high band output. Alias for <code>output[2]</code>
				 *  @type {Tone.Filter}
				 */
		        this.high = this.output[2] = new Tone.Filter(0, 'highpass');
		        /**
				 *  The low/mid crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);
		        /**
				 *  The mid/high crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);
		        /**
				 *  The quality of all the filters
				 *  @type {Number}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q);
		        this.input.fan(this.low, this.high);
		        this.input.chain(this._lowMidFilter, this.mid);
		        //the frequency control signal
		        this.lowFrequency.connect(this.low.frequency);
		        this.lowFrequency.connect(this._lowMidFilter.frequency);
		        this.highFrequency.connect(this.mid.frequency);
		        this.highFrequency.connect(this.high.frequency);
		        //the Q value
		        this.Q.connect(this.low.Q);
		        this.Q.connect(this._lowMidFilter.Q);
		        this.Q.connect(this.mid.Q);
		        this.Q.connect(this.high.Q);
		        this._readOnly([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		    };
		    Tone.extend(Tone.MultibandSplit);
		    /**
			 *  @private
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MultibandSplit.defaults = {
		        'lowFrequency': 400,
		        'highFrequency': 2500,
		        'Q': 1
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MultibandSplit} this
			 */
		    Tone.MultibandSplit.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		        this.low.dispose();
		        this.low = null;
		        this._lowMidFilter.dispose();
		        this._lowMidFilter = null;
		        this.mid.dispose();
		        this.mid = null;
		        this.high.dispose();
		        this.high = null;
		        this.lowFrequency.dispose();
		        this.lowFrequency = null;
		        this.highFrequency.dispose();
		        this.highFrequency = null;
		        this.Q.dispose();
		        this.Q = null;
		        return this;
		    };
		    return Tone.MultibandSplit;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
			 *         well as the low and high crossover frequencies.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  
			 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
			 *  @param {Decibels} [midLevel] The gain applied to the mid.
			 *  @param {Decibels} [highLevel] The gain applied to the high.
			 *  @example
			 * var eq = new Tone.EQ3(-10, 3, -20);
			 */
		    Tone.EQ3 = function () {
		        var options = this.optionsObject(arguments, [
		            'low',
		            'mid',
		            'high'
		        ], Tone.EQ3.defaults);
		        /**
				 *  the output node
				 *  @type {GainNode}
				 *  @private
				 */
		        this.output = new Tone.Gain();
		        /**
				 *  the multiband split
				 *  @type {Tone.MultibandSplit}
				 *  @private
				 */
		        this._multibandSplit = this.input = new Tone.MultibandSplit({
		            'lowFrequency': options.lowFrequency,
		            'highFrequency': options.highFrequency
		        });
		        /**
				 *  The gain for the lower signals
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);
		        /**
				 *  The gain for the mid signals
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);
		        /**
				 * The gain in decibels of the high part
				 * @type {Tone.Gain}
				 * @private
				 */
		        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);
		        /**
				 * The gain in decibels of the low part
				 * @type {Decibels}
				 * @signal
				 */
		        this.low = this._lowGain.gain;
		        /**
				 * The gain in decibels of the mid part
				 * @type {Decibels}
				 * @signal
				 */
		        this.mid = this._midGain.gain;
		        /**
				 * The gain in decibels of the high part
				 * @type {Decibels}
				 * @signal
				 */
		        this.high = this._highGain.gain;
		        /**
				 *  The Q value for all of the filters. 
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = this._multibandSplit.Q;
		        /**
				 *  The low/mid crossover frequency. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = this._multibandSplit.lowFrequency;
		        /**
				 *  The mid/high crossover frequency. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = this._multibandSplit.highFrequency;
		        //the frequency bands
		        this._multibandSplit.low.chain(this._lowGain, this.output);
		        this._multibandSplit.mid.chain(this._midGain, this.output);
		        this._multibandSplit.high.chain(this._highGain, this.output);
		        this._readOnly([
		            'low',
		            'mid',
		            'high',
		            'lowFrequency',
		            'highFrequency'
		        ]);
		    };
		    Tone.extend(Tone.EQ3);
		    /**
			 *  the default values
			 */
		    Tone.EQ3.defaults = {
		        'low': 0,
		        'mid': 0,
		        'high': 0,
		        'lowFrequency': 400,
		        'highFrequency': 2500
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.EQ3} this
			 */
		    Tone.EQ3.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'low',
		            'mid',
		            'high',
		            'lowFrequency',
		            'highFrequency'
		        ]);
		        this._multibandSplit.dispose();
		        this._multibandSplit = null;
		        this.lowFrequency = null;
		        this.highFrequency = null;
		        this._lowGain.dispose();
		        this._lowGain = null;
		        this._midGain.dispose();
		        this._midGain = null;
		        this._highGain.dispose();
		        this._highGain = null;
		        this.low = null;
		        this.mid = null;
		        this.high = null;
		        this.Q = null;
		        return this;
		    };
		    return Tone.EQ3;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Performs a linear scaling on an input signal.
			 *          Scales a NormalRange input to between
			 *          outputMin and outputMax.
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {number} [outputMin=0] The output value when the input is 0. 
			 *  @param {number} [outputMax=1]	The output value when the input is 1. 
			 *  @example
			 * var scale = new Tone.Scale(50, 100);
			 * var signal = new Tone.Signal(0.5).connect(scale);
			 * //the output of scale equals 75
			 */
		    Tone.Scale = function (outputMin, outputMax) {
		        /** 
				 *  @private
				 *  @type {number}
				 */
		        this._outputMin = this.defaultArg(outputMin, 0);
		        /** 
				 *  @private
				 *  @type {number}
				 */
		        this._outputMax = this.defaultArg(outputMax, 1);
		        /** 
				 *  @private
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.input = new Tone.Multiply(1);
		        /** 
				 *  @private
				 *  @type {Tone.Add}
				 *  @private
				 */
		        this._add = this.output = new Tone.Add(0);
		        this._scale.connect(this._add);
		        this._setRange();
		    };
		    Tone.extend(Tone.Scale, Tone.SignalBase);
		    /**
			 * The minimum output value. This number is output when 
			 * the value input value is 0. 
			 * @memberOf Tone.Scale#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.Scale.prototype, 'min', {
		        get: function () {
		            return this._outputMin;
		        },
		        set: function (min) {
		            this._outputMin = min;
		            this._setRange();
		        }
		    });
		    /**
			 * The maximum output value. This number is output when 
			 * the value input value is 1. 
			 * @memberOf Tone.Scale#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.Scale.prototype, 'max', {
		        get: function () {
		            return this._outputMax;
		        },
		        set: function (max) {
		            this._outputMax = max;
		            this._setRange();
		        }
		    });
		    /**
			 *  set the values
			 *  @private
			 */
		    Tone.Scale.prototype._setRange = function () {
		        this._add.value = this._outputMin;
		        this._scale.value = this._outputMax - this._outputMin;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Scale} this
			 */
		    Tone.Scale.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._add.dispose();
		        this._add = null;
		        this._scale.dispose();
		        this._scale = null;
		        return this;
		    };
		    return Tone.Scale;
		});
		Module(function (Tone) {
		    /**
			 *  @class  Performs an exponential scaling on an input signal.
			 *          Scales a NormalRange value [0,1] exponentially
			 *          to the output range of outputMin to outputMax.
			 *
			 *  @constructor
			 *  @extends {Tone.SignalBase}
			 *  @param {number} [outputMin=0] The output value when the input is 0. 
			 *  @param {number} [outputMax=1]	The output value when the input is 1. 
			 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
			 *  @example
			 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
			 * var signal = new Tone.Signal(0.5).connect(scaleExp);
			 */
		    Tone.ScaleExp = function (outputMin, outputMax, exponent) {
		        /**
				 *  scale the input to the output range
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._scale = this.output = new Tone.Scale(outputMin, outputMax);
		        /**
				 *  @private
				 *  @type {Tone.Pow}
				 *  @private
				 */
		        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));
		        this._exp.connect(this._scale);
		    };
		    Tone.extend(Tone.ScaleExp, Tone.SignalBase);
		    /**
			 * Instead of interpolating linearly between the <code>min</code> and 
			 * <code>max</code> values, setting the exponent will interpolate between
			 * the two values with an exponential curve. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 * The minimum output value. This number is output when 
			 * the value input value is 0. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = min;
		        }
		    });
		    /**
			 * The maximum output value. This number is output when 
			 * the value input value is 1. 
			 * @memberOf Tone.ScaleExp#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {
		        get: function () {
		            return this._scale.max;
		        },
		        set: function (max) {
		            this._scale.max = max;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.ScaleExp} this
			 */
		    Tone.ScaleExp.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._exp.dispose();
		        this._exp = null;
		        return this;
		    };
		    return Tone.ScaleExp;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). 
			 *  @extends {Tone}
			 *  @param {Time=} delayTime The delay applied to the incoming signal.
			 *  @param {Time=} maxDelay The maximum delay time. 
			 */
		    Tone.Delay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'maxDelay'
		        ], Tone.Delay.defaults);
		        /**
				 *  The native delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));
		        /**
				 *  The amount of time the incoming signal is
				 *  delayed. 
				 *  @type {Tone.Param}
				 *  @signal
				 */
		        this.delayTime = new Tone.Param({
		            'param': this._delayNode.delayTime,
		            'units': Tone.Type.Time,
		            'value': options.delayTime
		        });
		        this._readOnly('delayTime');
		    };
		    Tone.extend(Tone.Delay);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Delay.defaults = {
		        'maxDelay': 1,
		        'delayTime': 0
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Delay}  this
			 */
		    Tone.Delay.prototype.dispose = function () {
		        Tone.Param.prototype.dispose.call(this);
		        this._delayNode.disconnect();
		        this._delayNode = null;
		        this._writable('delayTime');
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.Delay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Comb filters are basic building blocks for physical modeling. Read more
			 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Time|Object} [delayTime] The delay time of the filter. 
			 *  @param {NormalRange=} resonance The amount of feedback the filter has. 
			 */
		    Tone.FeedbackCombFilter = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'resonance'
		        ], Tone.FeedbackCombFilter.defaults);
		        /**
				 *  the delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);
		        /**
				 *  The amount of delay of the comb filter. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delay.delayTime;
		        /**
				 *  the feedback node
				 *  @type {GainNode}
				 *  @private
				 */
		        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
		        /**
				 *  The amount of feedback of the delayed signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._feedback.gain;
		        this._delay.chain(this._feedback, this._delay);
		        this._readOnly([
		            'resonance',
		            'delayTime'
		        ]);
		    };
		    Tone.extend(Tone.FeedbackCombFilter);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.FeedbackCombFilter.defaults = {
		        'delayTime': 0.1,
		        'resonance': 0.5
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.FeedbackCombFilter} this
			 */
		    Tone.FeedbackCombFilter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'resonance',
		            'delayTime'
		        ]);
		        this._delay.dispose();
		        this._delay = null;
		        this.delayTime = null;
		        this._feedback.dispose();
		        this._feedback = null;
		        this.resonance = null;
		        return this;
		    };
		    return Tone.FeedbackCombFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Follower is a  crude envelope follower which will follow 
			 *          the amplitude of an incoming signal. 
			 *          Take care with small (< 0.02) attack or decay values 
			 *          as follower has some ripple which is exaggerated
			 *          at these values. Read more about envelope followers (also known 
			 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Time|Object} [attack] The rate at which the follower rises.
			 *  @param {Time=} release The rate at which the folower falls. 
			 *  @example
			 * var follower = new Tone.Follower(0.2, 0.4);
			 */
		    Tone.Follower = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'release'
		        ], Tone.Follower.defaults);
		        /**
				 *  @type {Tone.Abs}
				 *  @private
				 */
		        this._abs = new Tone.Abs();
		        /**
				 *  the lowpass filter which smooths the input
				 *  @type {BiquadFilterNode}
				 *  @private
				 */
		        this._filter = this.context.createBiquadFilter();
		        this._filter.type = 'lowpass';
		        this._filter.frequency.value = 0;
		        this._filter.Q.value = -100;
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._frequencyValues = new Tone.WaveShaper();
		        /**
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._sub = new Tone.Subtract();
		        /**
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delay = new Tone.Delay(this.blockTime);
		        /**
				 *  this keeps it far from 0, even for very small differences
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._mult = new Tone.Multiply(10000);
		        /**
				 *  @private
				 *  @type {number}
				 */
		        this._attack = options.attack;
		        /**
				 *  @private
				 *  @type {number}
				 */
		        this._release = options.release;
		        //the smoothed signal to get the values
		        this.input.chain(this._abs, this._filter, this.output);
		        //the difference path
		        this._abs.connect(this._sub, 0, 1);
		        this._filter.chain(this._delay, this._sub);
		        //threshold the difference and use the thresh to set the frequency
		        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);
		        //set the attack and release values in the table
		        this._setAttackRelease(this._attack, this._release);
		    };
		    Tone.extend(Tone.Follower);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Follower.defaults = {
		        'attack': 0.05,
		        'release': 0.5
		    };
		    /**
			 *  sets the attack and release times in the wave shaper
			 *  @param   {Time} attack  
			 *  @param   {Time} release 
			 *  @private
			 */
		    Tone.Follower.prototype._setAttackRelease = function (attack, release) {
		        var minTime = this.blockTime;
		        attack = Tone.Time(attack).toFrequency();
		        release = Tone.Time(release).toFrequency();
		        attack = Math.max(attack, minTime);
		        release = Math.max(release, minTime);
		        this._frequencyValues.setMap(function (val) {
		            if (val <= 0) {
		                return attack;
		            } else {
		                return release;
		            }
		        });
		    };
		    /**
			 * The attack time.
			 * @memberOf Tone.Follower#
			 * @type {Time}
			 * @name attack
			 */
		    Object.defineProperty(Tone.Follower.prototype, 'attack', {
		        get: function () {
		            return this._attack;
		        },
		        set: function (attack) {
		            this._attack = attack;
		            this._setAttackRelease(this._attack, this._release);
		        }
		    });
		    /**
			 * The release time.
			 * @memberOf Tone.Follower#
			 * @type {Time}
			 * @name release
			 */
		    Object.defineProperty(Tone.Follower.prototype, 'release', {
		        get: function () {
		            return this._release;
		        },
		        set: function (release) {
		            this._release = release;
		            this._setAttackRelease(this._attack, this._release);
		        }
		    });
		    /**
			 *  Borrows the connect method from Signal so that the output can be used
			 *  as a Tone.Signal control signal.
			 *  @function
			 */
		    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;
		    /**
			 *  dispose
			 *  @returns {Tone.Follower} this
			 */
		    Tone.Follower.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._filter.disconnect();
		        this._filter = null;
		        this._frequencyValues.disconnect();
		        this._frequencyValues = null;
		        this._delay.dispose();
		        this._delay = null;
		        this._sub.disconnect();
		        this._sub = null;
		        this._abs.dispose();
		        this._abs = null;
		        this._mult.dispose();
		        this._mult = null;
		        this._curve = null;
		        return this;
		    };
		    return Tone.Follower;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.ScaledEnvelop is an envelope which can be scaled 
			 *         to any range. It's useful for applying an envelope 
			 *         to a frequency or any other non-NormalRange signal 
			 *         parameter. 
			 *
			 *  @extends {Tone.Envelope}
			 *  @constructor
			 *  @param {Time|Object} [attack]	the attack time in seconds
			 *  @param {Time} [decay]	the decay time in seconds
			 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
			 *  @param {Time} [release]	the release time in seconds
			 *  @example
			 *  var scaledEnv = new Tone.ScaledEnvelope({
			 *  	"attack" : 0.2,
			 *  	"min" : 200,
			 *  	"max" : 2000
			 *  });
			 *  scaledEnv.connect(oscillator.frequency);
			 */
		    Tone.ScaledEnvelope = function () {
		        //get all of the defaults
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        Tone.Envelope.call(this, options);
		        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);
		        /** 
				 *  scale the incoming signal by an exponent
				 *  @type {Tone.Pow}
				 *  @private
				 */
		        this._exp = this.output = new Tone.Pow(options.exponent);
		        /**
				 *  scale the signal to the desired range
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = this.output = new Tone.Scale(options.min, options.max);
		        this._sig.chain(this._exp, this._scale);
		    };
		    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.ScaledEnvelope.defaults = {
		        'min': 0,
		        'max': 1,
		        'exponent': 1
		    };
		    /**
			 * The envelope's min output value. This is the value which it
			 * starts at. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = min;
		        }
		    });
		    /**
			 * The envelope's max output value. In other words, the value
			 * at the peak of the attack portion of the envelope. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {
		        get: function () {
		            return this._scale.max;
		        },
		        set: function (max) {
		            this._scale.max = max;
		        }
		    });
		    /**
			 * The envelope's exponent value. 
			 * @memberOf Tone.ScaledEnvelope#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.ScaledEnvelope} this
			 */
		    Tone.ScaledEnvelope.prototype.dispose = function () {
		        Tone.Envelope.prototype.dispose.call(this);
		        this._scale.dispose();
		        this._scale = null;
		        this._exp.dispose();
		        this._exp = null;
		        return this;
		    };
		    return Tone.ScaledEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
			 *         it's got a `baseFrequency` and `octaves` parameter. 
			 *
			 *  @extends {Tone.Envelope}
			 *  @constructor
			 *  @param {Time|Object} [attack]	the attack time in seconds
			 *  @param {Time} [decay]	the decay time in seconds
			 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
			 *  @param {Time} [release]	the release time in seconds
			 *  @example
			 *  var env = new Tone.FrequencyEnvelope({
			 *  	"attack" : 0.2,
			 *  	"baseFrequency" : "C2",
			 *  	"octaves" : 4
			 *  });
			 *  scaledEnv.connect(oscillator.frequency);
			 */
		    Tone.FrequencyEnvelope = function () {
		        var options = this.optionsObject(arguments, [
		            'attack',
		            'decay',
		            'sustain',
		            'release'
		        ], Tone.Envelope.defaults);
		        Tone.ScaledEnvelope.call(this, options);
		        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);
		        /**
				 *  Stores the octave value
				 *  @type {Positive}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        //setup
		        this.baseFrequency = options.baseFrequency;
		        this.octaves = options.octaves;
		    };
		    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.FrequencyEnvelope.defaults = {
		        'baseFrequency': 200,
		        'octaves': 4,
		        'exponent': 2
		    };
		    /**
			 * The envelope's mininum output value. This is the value which it
			 * starts at. 
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {Frequency}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {
		        get: function () {
		            return this._scale.min;
		        },
		        set: function (min) {
		            this._scale.min = this.toFrequency(min);
		            //also update the octaves
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 * The number of octaves above the baseFrequency that the
			 * envelope will scale to.
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            this._scale.max = this.baseFrequency * Math.pow(2, octaves);
		        }
		    });
		    /**
			 * The envelope's exponent value. 
			 * @memberOf Tone.FrequencyEnvelope#
			 * @type {number}
			 * @name exponent
			 */
		    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {
		        get: function () {
		            return this._exp.value;
		        },
		        set: function (exp) {
		            this._exp.value = exp;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.FrequencyEnvelope} this
			 */
		    Tone.FrequencyEnvelope.prototype.dispose = function () {
		        Tone.ScaledEnvelope.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.FrequencyEnvelope;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Gate only passes a signal through when the incoming 
			 *          signal exceeds a specified threshold. To do this, Gate uses 
			 *          a Tone.Follower to follow the amplitude of the incoming signal. 
			 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. 
			 *  @param {Time=} attack The follower's attack time
			 *  @param {Time=} release The follower's release time
			 *  @example
			 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
			 * var mic = new Tone.Microphone().connect(gate);
			 * //the gate will only pass through the incoming 
			 * //signal when it's louder than -30db
			 */
		    Tone.Gate = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'threshold',
		            'attack',
		            'release'
		        ], Tone.Gate.defaults);
		        /**
				 *  @type {Tone.Follower}
				 *  @private
				 */
		        this._follower = new Tone.Follower(options.attack, options.release);
		        /**
				 *  @type {Tone.GreaterThan}
				 *  @private
				 */
		        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));
		        //the connections
		        this.input.connect(this.output);
		        //the control signal
		        this.input.chain(this._gt, this._follower, this.output.gain);
		    };
		    Tone.extend(Tone.Gate);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Gate.defaults = {
		        'attack': 0.1,
		        'release': 0.1,
		        'threshold': -40
		    };
		    /**
			 * The threshold of the gate in decibels
			 * @memberOf Tone.Gate#
			 * @type {Decibels}
			 * @name threshold
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'threshold', {
		        get: function () {
		            return this.gainToDb(this._gt.value);
		        },
		        set: function (thresh) {
		            this._gt.value = this.dbToGain(thresh);
		        }
		    });
		    /**
			 * The attack speed of the gate
			 * @memberOf Tone.Gate#
			 * @type {Time}
			 * @name attack
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'attack', {
		        get: function () {
		            return this._follower.attack;
		        },
		        set: function (attackTime) {
		            this._follower.attack = attackTime;
		        }
		    });
		    /**
			 * The release speed of the gate
			 * @memberOf Tone.Gate#
			 * @type {Time}
			 * @name release
			 */
		    Object.defineProperty(Tone.Gate.prototype, 'release', {
		        get: function () {
		            return this._follower.release;
		        },
		        set: function (releaseTime) {
		            this._follower.release = releaseTime;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Gate} this
			 */
		    Tone.Gate.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._follower.dispose();
		        this._gt.dispose();
		        this._follower = null;
		        this._gt = null;
		        return this;
		    };
		    return Tone.Gate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
			 *          and <code>getStateAtTime(time)</code>.
			 *
			 *  @extends {Tone.Timeline}
			 *  @param {String} initial The initial state of the TimelineState. 
			 *                          Defaults to <code>undefined</code>
			 */
		    Tone.TimelineState = function (initial) {
		        Tone.Timeline.call(this);
		        /**
				 *  The initial state
				 *  @private
				 *  @type {String}
				 */
		        this._initial = initial;
		    };
		    Tone.extend(Tone.TimelineState, Tone.Timeline);
		    /**
			 *  Returns the scheduled state scheduled before or at
			 *  the given time.
			 *  @param  {Number}  time  The time to query.
			 *  @return  {String}  The name of the state input in setStateAtTime.
			 */
		    Tone.TimelineState.prototype.getStateAtTime = function (time) {
		        var event = this.getEvent(time);
		        if (event !== null) {
		            return event.state;
		        } else {
		            return this._initial;
		        }
		    };
		    /**
			 *  Returns the scheduled state scheduled before or at
			 *  the given time.
			 *  @param  {String}  state The name of the state to set.
			 *  @param  {Number}  time  The time to query.
			 */
		    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {
		        this.addEvent({
		            'state': state,
		            'time': time
		        });
		    };
		    return Tone.TimelineState;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Emitter gives classes which extend it
			 *         the ability to listen for and emit events. 
			 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
			 *         MIT (c) 2011 Jerome Etienne.
			 *         
			 *  @extends {Tone}
			 */
		    Tone.Emitter = function () {
		        /**
				 *  Contains all of the events.
				 *  @private
				 *  @type  {Object}
				 */
		        this._events = {};
		    };
		    Tone.extend(Tone.Emitter);
		    /**
			 *  Bind a callback to a specific event.
			 *  @param  {String}    event     The name of the event to listen for.
			 *  @param  {Function}  callback  The callback to invoke when the
			 *                                event is emitted
			 *  @return  {Tone.Emitter}    this
			 */
		    Tone.Emitter.prototype.on = function (event, callback) {
		        //split the event
		        var events = event.split(/\W+/);
		        for (var i = 0; i < events.length; i++) {
		            var eventName = events[i];
		            if (!this._events.hasOwnProperty(eventName)) {
		                this._events[eventName] = [];
		            }
		            this._events[eventName].push(callback);
		        }
		        return this;
		    };
		    /**
			 *  Remove the event listener.
			 *  @param  {String}    event     The event to stop listening to.
			 *  @param  {Function=}  callback  The callback which was bound to 
			 *                                the event with Tone.Emitter.on.
			 *                                If no callback is given, all callbacks
			 *                                events are removed.
			 *  @return  {Tone.Emitter}    this
			 */
		    Tone.Emitter.prototype.off = function (event, callback) {
		        var events = event.split(/\W+/);
		        for (var ev = 0; ev < events.length; ev++) {
		            event = events[ev];
		            if (this._events.hasOwnProperty(event)) {
		                if (Tone.prototype.isUndef(callback)) {
		                    this._events[event] = [];
		                } else {
		                    var eventList = this._events[event];
		                    for (var i = 0; i < eventList.length; i++) {
		                        if (eventList[i] === callback) {
		                            eventList.splice(i, 1);
		                        }
		                    }
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Invoke all of the callbacks bound to the event
			 *  with any arguments passed in. 
			 *  @param  {String}  event  The name of the event.
			 *  @param {*...} args The arguments to pass to the functions listening.
			 *  @return  {Tone.Emitter}  this
			 */
		    Tone.Emitter.prototype.emit = function (event) {
		        if (this._events) {
		            var args = Array.prototype.slice.call(arguments, 1);
		            if (this._events.hasOwnProperty(event)) {
		                var eventList = this._events[event];
		                for (var i = 0, len = eventList.length; i < len; i++) {
		                    eventList[i].apply(this, args);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Add Emitter functions (on/off/emit) to the object
			 *  @param  {Object|Function}  object  The object or class to extend.
			 */
		    Tone.Emitter.mixin = function (object) {
		        var functions = [
		            'on',
		            'off',
		            'emit'
		        ];
		        object._events = {};
		        for (var i = 0; i < functions.length; i++) {
		            var func = functions[i];
		            var emitterFunc = Tone.Emitter.prototype[func];
		            object[func] = emitterFunc;
		        }
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.Emitter}  this
			 */
		    Tone.Emitter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._events = null;
		        return this;
		    };
		    return Tone.Emitter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A sample accurate clock which provides a callback at the given rate. 
			 *          While the callback is not sample-accurate (it is still susceptible to
			 *          loose JS timing), the time passed in as the argument to the callback
			 *          is precise. For most applications, it is better to use Tone.Transport
			 *          instead of the Clock by itself since you can synchronize multiple callbacks.
			 *
			 * 	@constructor
			 *  @extends {Tone.Emitter}
			 * 	@param {function} callback The callback to be invoked with the time of the audio event
			 * 	@param {Frequency} frequency The rate of the callback
			 * 	@example
			 * //the callback will be invoked approximately once a second
			 * //and will print the time exactly once a second apart.
			 * var clock = new Tone.Clock(function(time){
			 * 	console.log(time);
			 * }, 1);
			 */
		    Tone.Clock = function () {
		        Tone.Emitter.call(this);
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'frequency'
		        ], Tone.Clock.defaults);
		        /**
				 *  The callback function to invoke at the scheduled tick.
				 *  @type  {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  The internal lookahead value
				 *  @type {Number|String}
				 *  @private
				 */
		        this._lookAhead = 'auto';
		        /**
				 *  The lookahead value which was automatically
				 *  computed using a time-based averaging.
				 *  @type {Number}
				 *  @private
				 */
		        this._computedLookAhead = UPDATE_RATE / 1000;
		        /**
				 *  The next time the callback is scheduled.
				 *  @type {Number}
				 *  @private
				 */
		        this._nextTick = -1;
		        /**
				 *  The last time the callback was invoked
				 *  @type  {Number}
				 *  @private
				 */
		        this._lastUpdate = -1;
		        /**
				 *  The rate the callback function should be invoked. 
				 *  @type  {BPM}
				 *  @signal
				 */
		        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The number of times the callback was invoked. Starts counting at 0
				 *  and increments after the callback was invoked. 
				 *  @type {Ticks}
				 *  @readOnly
				 */
		        this.ticks = 0;
		        /**
				 *  The state timeline
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  The loop function bound to its context. 
				 *  This is necessary to remove the event in the end.
				 *  @type {Function}
				 *  @private
				 */
		        this._boundLoop = this._loop.bind(this);
		        //bind a callback to the worker thread
		        Tone.Clock._worker.addEventListener('message', this._boundLoop);
		        this._readOnly('frequency');
		    };
		    Tone.extend(Tone.Clock, Tone.Emitter);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Clock.defaults = {
		        'callback': Tone.noOp,
		        'frequency': 1,
		        'lookAhead': 'auto'
		    };
		    /**
			 *  Returns the playback state of the source, either "started", "stopped" or "paused".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Clock#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Clock.prototype, 'state', {
		        get: function () {
		            return this._state.getStateAtTime(this.now());
		        }
		    });
		    /**
			 *  The time which the clock will schedule events in advance
			 *  of the current time. Scheduling notes in advance improves
			 *  performance and decreases the chance for clicks caused
			 *  by scheduling events in the past. If set to "auto",
			 *  this value will be automatically computed based on the 
			 *  rate of the update (~0.02 seconds). Larger values
			 *  will yeild better performance, but at the cost of latency. 
			 *  Values less than 0.016 are not recommended.
			 *  @type {Number|String}
			 *  @memberOf Tone.Clock#
			 *  @name lookAhead
			 */
		    Object.defineProperty(Tone.Clock.prototype, 'lookAhead', {
		        get: function () {
		            return this._lookAhead;
		        },
		        set: function (val) {
		            if (val === 'auto') {
		                this._lookAhead = 'auto';
		            } else {
		                this._lookAhead = this.toSeconds(val);
		            }
		        }
		    });
		    /**
			 *  Start the clock at the given time. Optionally pass in an offset
			 *  of where to start the tick counter from.
			 *  @param  {Time}  time    The time the clock should start
			 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
			 *  @return  {Tone.Clock}  this
			 */
		    Tone.Clock.prototype.start = function (time, offset) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) !== Tone.State.Started) {
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': time,
		                'offset': offset
		            });
		        }
		        return this;
		    };
		    /**
			 *  Stop the clock. Stopping the clock resets the tick counter to 0.
			 *  @param {Time} [time=now] The time when the clock should stop.
			 *  @returns {Tone.Clock} this
			 *  @example
			 * clock.stop();
			 */
		    Tone.Clock.prototype.stop = function (time) {
		        time = this.toSeconds(time);
		        this._state.cancel(time);
		        this._state.setStateAtTime(Tone.State.Stopped, time);
		        return this;
		    };
		    /**
			 *  Pause the clock. Pausing does not reset the tick counter.
			 *  @param {Time} [time=now] The time when the clock should stop.
			 *  @returns {Tone.Clock} this
			 */
		    Tone.Clock.prototype.pause = function (time) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this._state.setStateAtTime(Tone.State.Paused, time);
		        }
		        return this;
		    };
		    /**
			 *  The scheduling loop.
			 *  @param  {Number}  time  The current page time starting from 0
			 *                          when the page was loaded.
			 *  @private
			 */
		    Tone.Clock.prototype._loop = function () {
		        //compute the look ahead
		        if (this._lookAhead === 'auto') {
		            var time = this.now();
		            if (this._lastUpdate !== -1) {
		                var diff = time - this._lastUpdate;
		                //max size on the diff
		                diff = Math.min(10 * UPDATE_RATE / 1000, diff);
		                //averaging
		                this._computedLookAhead = (9 * this._computedLookAhead + diff) / 10;
		            }
		            this._lastUpdate = time;
		        } else {
		            this._computedLookAhead = this._lookAhead;
		        }
		        //get the frequency value to compute the value of the next loop
		        var now = this.now();
		        //if it's started
		        var lookAhead = this._computedLookAhead * 2;
		        var event = this._state.getEvent(now + lookAhead);
		        var state = Tone.State.Stopped;
		        if (event) {
		            state = event.state;
		            //if it was stopped and now started
		            if (this._nextTick === -1 && state === Tone.State.Started) {
		                this._nextTick = event.time;
		                if (!this.isUndef(event.offset)) {
		                    this.ticks = event.offset;
		                }
		                this.emit('start', event.time, this.ticks);
		            }
		        }
		        if (state === Tone.State.Started) {
		            while (now + lookAhead > this._nextTick) {
		                var tickTime = this._nextTick;
		                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);
		                this.callback(tickTime);
		                this.ticks++;
		            }
		        } else if (state === Tone.State.Stopped) {
		            if (event && this.ticks !== 0) {
		                this.emit('stop', event.time);
		            }
		            this._nextTick = -1;
		            this.ticks = 0;
		        } else if (state === Tone.State.Paused) {
		            if (this._nextTick !== -1) {
		                this.emit('pause', event.time);
		            }
		            this._nextTick = -1;
		        }
		    };
		    /**
			 *  Returns the scheduled state at the given time.
			 *  @param  {Time}  time  The time to query.
			 *  @return  {String}  The name of the state input in setStateAtTime.
			 *  @example
			 * clock.start("+0.1");
			 * clock.getStateAtTime("+0.1"); //returns "started"
			 */
		    Tone.Clock.prototype.getStateAtTime = function (time) {
		        time = this.toSeconds(time);
		        return this._state.getStateAtTime(time);
		    };
		    /**
			 *  Clean up
			 *  @returns {Tone.Clock} this
			 */
		    Tone.Clock.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        Tone.TimelineState.prototype.dispose.call(this);
		        Tone.Clock._worker.removeEventListener('message', this._boundLoop);
		        this._writable('frequency');
		        this.frequency.dispose();
		        this.frequency = null;
		        this._boundLoop = null;
		        this._nextTick = Infinity;
		        this.callback = null;
		        this._state.dispose();
		        this._state = null;
		    };
		    //URL Shim
		    window.URL = window.URL || window.webkitURL;
		    /**
			 *  The update rate in Milliseconds
			 *  @const
			 *  @type  {Number}
			 *  @private
			 */
		    var UPDATE_RATE = 20;
		    /**
			 *  The script which runs in a web worker
			 *  @type {Blob}
			 *  @private
			 */
		    var blob = new Blob(['setInterval(function(){self.postMessage(\'tick\')}, ' + UPDATE_RATE + ')']);
		    /**
			 *  Create a blob url from the Blob
			 *  @type  {URL}
			 *  @private
			 */
		    var blobUrl = URL.createObjectURL(blob);
		    /**
			 *  The Worker which generates a regular callback
			 *  @type {Worker}
			 *  @private
			 *  @static
			 */
		    Tone.Clock._worker = new Worker(blobUrl);
		    return Tone.Clock;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Similar to Tone.Timeline, but all events represent
			 *         intervals with both "time" and "duration" times. The 
			 *         events are placed in a tree structure optimized
			 *         for querying an intersection point with the timeline
			 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
			 *         to represent the data.
			 *  @extends {Tone}
			 */
		    Tone.IntervalTimeline = function () {
		        /**
				 *  The root node of the inteval tree
				 *  @type  {IntervalNode}
				 *  @private
				 */
		        this._root = null;
		        /**
				 *  Keep track of the length of the timeline.
				 *  @type  {Number}
				 *  @private
				 */
		        this._length = 0;
		    };
		    Tone.extend(Tone.IntervalTimeline);
		    /**
			 *  The event to add to the timeline. All events must 
			 *  have a time and duration value
			 *  @param  {Object}  event  The event to add to the timeline
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.addEvent = function (event) {
		        if (this.isUndef(event.time) || this.isUndef(event.duration)) {
		            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');
		        }
		        var node = new IntervalNode(event.time, event.time + event.duration, event);
		        if (this._root === null) {
		            this._root = node;
		        } else {
		            this._root.insert(node);
		        }
		        this._length++;
		        // Restructure tree to be balanced
		        while (node !== null) {
		            node.updateHeight();
		            node.updateMax();
		            this._rebalance(node);
		            node = node.parent;
		        }
		        return this;
		    };
		    /**
			 *  Remove an event from the timeline.
			 *  @param  {Object}  event  The event to remove from the timeline
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.removeEvent = function (event) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(event.time, results);
		            for (var i = 0; i < results.length; i++) {
		                var node = results[i];
		                if (node.event === event) {
		                    this._removeNode(node);
		                    this._length--;
		                    break;
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  The number of items in the timeline.
			 *  @type {Number}
			 *  @memberOf Tone.IntervalTimeline#
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {
		        get: function () {
		            return this._length;
		        }
		    });
		    /**
			 *  Remove events whose time time is after the given time
			 *  @param  {Number}  time  The time to query.
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.cancel = function (after) {
		        this.forEachAfter(after, function (event) {
		            this.removeEvent(event);
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Set the root node as the given node
			 *  @param {IntervalNode} node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._setRoot = function (node) {
		        this._root = node;
		        if (this._root !== null) {
		            this._root.parent = null;
		        }
		    };
		    /**
			 *  Replace the references to the node in the node's parent
			 *  with the replacement node.
			 *  @param  {IntervalNode}  node        
			 *  @param  {IntervalNode}  replacement 
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {
		        if (node.parent !== null) {
		            if (node.isLeftChild()) {
		                node.parent.left = replacement;
		            } else {
		                node.parent.right = replacement;
		            }
		            this._rebalance(node.parent);
		        } else {
		            this._setRoot(replacement);
		        }
		    };
		    /**
			 *  Remove the node from the tree and replace it with 
			 *  a successor which follows the schema.
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._removeNode = function (node) {
		        if (node.left === null && node.right === null) {
		            this._replaceNodeInParent(node, null);
		        } else if (node.right === null) {
		            this._replaceNodeInParent(node, node.left);
		        } else if (node.left === null) {
		            this._replaceNodeInParent(node, node.right);
		        } else {
		            var balance = node.getBalance();
		            var replacement, temp;
		            if (balance > 0) {
		                if (node.left.right === null) {
		                    replacement = node.left;
		                    replacement.right = node.right;
		                    temp = replacement;
		                } else {
		                    replacement = node.left.right;
		                    while (replacement.right !== null) {
		                        replacement = replacement.right;
		                    }
		                    replacement.parent.right = replacement.left;
		                    temp = replacement.parent;
		                    replacement.left = node.left;
		                    replacement.right = node.right;
		                }
		            } else {
		                if (node.right.left === null) {
		                    replacement = node.right;
		                    replacement.left = node.left;
		                    temp = replacement;
		                } else {
		                    replacement = node.right.left;
		                    while (replacement.left !== null) {
		                        replacement = replacement.left;
		                    }
		                    replacement.parent = replacement.parent;
		                    replacement.parent.left = replacement.right;
		                    temp = replacement.parent;
		                    replacement.left = node.left;
		                    replacement.right = node.right;
		                }
		            }
		            if (node.parent !== null) {
		                if (node.isLeftChild()) {
		                    node.parent.left = replacement;
		                } else {
		                    node.parent.right = replacement;
		                }
		            } else {
		                this._setRoot(replacement);
		            }
		            // this._replaceNodeInParent(node, replacement);
		            this._rebalance(temp);
		        }
		        node.dispose();
		    };
		    /**
			 *  Rotate the tree to the left
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {
		        var parent = node.parent;
		        var isLeftChild = node.isLeftChild();
		        // Make node.right the new root of this sub tree (instead of node)
		        var pivotNode = node.right;
		        node.right = pivotNode.left;
		        pivotNode.left = node;
		        if (parent !== null) {
		            if (isLeftChild) {
		                parent.left = pivotNode;
		            } else {
		                parent.right = pivotNode;
		            }
		        } else {
		            this._setRoot(pivotNode);
		        }
		    };
		    /**
			 *  Rotate the tree to the right
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rotateRight = function (node) {
		        var parent = node.parent;
		        var isLeftChild = node.isLeftChild();
		        // Make node.left the new root of this sub tree (instead of node)
		        var pivotNode = node.left;
		        node.left = pivotNode.right;
		        pivotNode.right = node;
		        if (parent !== null) {
		            if (isLeftChild) {
		                parent.left = pivotNode;
		            } else {
		                parent.right = pivotNode;
		            }
		        } else {
		            this._setRoot(pivotNode);
		        }
		    };
		    /**
			 *  Balance the BST
			 *  @param  {IntervalNode}  node
			 *  @private
			 */
		    Tone.IntervalTimeline.prototype._rebalance = function (node) {
		        var balance = node.getBalance();
		        if (balance > 1) {
		            if (node.left.getBalance() < 0) {
		                this._rotateLeft(node.left);
		            } else {
		                this._rotateRight(node);
		            }
		        } else if (balance < -1) {
		            if (node.right.getBalance() > 0) {
		                this._rotateRight(node.right);
		            } else {
		                this._rotateLeft(node);
		            }
		        }
		    };
		    /**
			 *  Get an event whose time and duration span the give time. Will
			 *  return the match whose "time" value is closest to the given time.
			 *  @param  {Object}  event  The event to add to the timeline
			 *  @return  {Object}  The event which spans the desired time
			 */
		    Tone.IntervalTimeline.prototype.getEvent = function (time) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(time, results);
		            if (results.length > 0) {
		                var max = results[0];
		                for (var i = 1; i < results.length; i++) {
		                    if (results[i].low > max.low) {
		                        max = results[i];
		                    }
		                }
		                return max.event;
		            }
		        }
		        return null;
		    };
		    /**
			 *  Iterate over everything in the timeline.
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEach = function (callback) {
		        if (this._root !== null) {
		            var allNodes = [];
		            if (this._root !== null) {
		                this._root.traverse(function (node) {
		                    allNodes.push(node);
		                });
		            }
		            for (var i = 0; i < allNodes.length; i++) {
		                var ev = allNodes[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array in which the given time
			 *  overlaps with the time and duration time of the event.
			 *  @param  {Number}  time The time to check if items are overlapping
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.search(time, results);
		            for (var i = results.length - 1; i >= 0; i--) {
		                var ev = results[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Iterate over everything in the array in which the time is greater
			 *  than the given time.
			 *  @param  {Number}  time The time to check if items are before
			 *  @param  {Function}  callback The callback to invoke with every item
			 *  @returns {Tone.IntervalTimeline} this
			 */
		    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {
		        if (this._root !== null) {
		            var results = [];
		            this._root.searchAfter(time, results);
		            for (var i = results.length - 1; i >= 0; i--) {
		                var ev = results[i].event;
		                if (ev) {
		                    callback(ev);
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.IntervalTimeline}  this
			 */
		    Tone.IntervalTimeline.prototype.dispose = function () {
		        var allNodes = [];
		        if (this._root !== null) {
		            this._root.traverse(function (node) {
		                allNodes.push(node);
		            });
		        }
		        for (var i = 0; i < allNodes.length; i++) {
		            allNodes[i].dispose();
		        }
		        allNodes = null;
		        this._root = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	INTERVAL NODE HELPER
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Represents a node in the binary search tree, with the addition
			 *  of a "high" value which keeps track of the highest value of
			 *  its children. 
			 *  References: 
			 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
			 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
			 *  @param {Number} low
			 *  @param {Number} high
			 *  @private
			 */
		    var IntervalNode = function (low, high, event) {
		        //the event container
		        this.event = event;
		        //the low value
		        this.low = low;
		        //the high value
		        this.high = high;
		        //the high value for this and all child nodes
		        this.max = this.high;
		        //the nodes to the left
		        this._left = null;
		        //the nodes to the right
		        this._right = null;
		        //the parent node
		        this.parent = null;
		        //the number of child nodes
		        this.height = 0;
		    };
		    /** 
			 *  Insert a node into the correct spot in the tree
			 *  @param  {IntervalNode}  node
			 */
		    IntervalNode.prototype.insert = function (node) {
		        if (node.low <= this.low) {
		            if (this.left === null) {
		                this.left = node;
		            } else {
		                this.left.insert(node);
		            }
		        } else {
		            if (this.right === null) {
		                this.right = node;
		            } else {
		                this.right.insert(node);
		            }
		        }
		    };
		    /**
			 *  Search the tree for nodes which overlap 
			 *  with the given point
			 *  @param  {Number}  point  The point to query
			 *  @param  {Array}  results  The array to put the results
			 */
		    IntervalNode.prototype.search = function (point, results) {
		        // If p is to the right of the rightmost point of any interval
		        // in this node and all children, there won't be any matches.
		        if (point > this.max) {
		            return;
		        }
		        // Search left children
		        if (this.left !== null) {
		            this.left.search(point, results);
		        }
		        // Check this node
		        if (this.low <= point && this.high > point) {
		            results.push(this);
		        }
		        // If p is to the left of the time of this interval,
		        // then it can't be in any child to the right.
		        if (this.low > point) {
		            return;
		        }
		        // Search right children
		        if (this.right !== null) {
		            this.right.search(point, results);
		        }
		    };
		    /**
			 *  Search the tree for nodes which are less 
			 *  than the given point
			 *  @param  {Number}  point  The point to query
			 *  @param  {Array}  results  The array to put the results
			 */
		    IntervalNode.prototype.searchAfter = function (point, results) {
		        // Check this node
		        if (this.low >= point) {
		            results.push(this);
		            if (this.left !== null) {
		                this.left.searchAfter(point, results);
		            }
		        }
		        // search the right side
		        if (this.right !== null) {
		            this.right.searchAfter(point, results);
		        }
		    };
		    /**
			 *  Invoke the callback on this element and both it's branches
			 *  @param  {Function}  callback
			 */
		    IntervalNode.prototype.traverse = function (callback) {
		        callback(this);
		        if (this.left !== null) {
		            this.left.traverse(callback);
		        }
		        if (this.right !== null) {
		            this.right.traverse(callback);
		        }
		    };
		    /**
			 *  Update the height of the node
			 */
		    IntervalNode.prototype.updateHeight = function () {
		        if (this.left !== null && this.right !== null) {
		            this.height = Math.max(this.left.height, this.right.height) + 1;
		        } else if (this.right !== null) {
		            this.height = this.right.height + 1;
		        } else if (this.left !== null) {
		            this.height = this.left.height + 1;
		        } else {
		            this.height = 0;
		        }
		    };
		    /**
			 *  Update the height of the node
			 */
		    IntervalNode.prototype.updateMax = function () {
		        this.max = this.high;
		        if (this.left !== null) {
		            this.max = Math.max(this.max, this.left.max);
		        }
		        if (this.right !== null) {
		            this.max = Math.max(this.max, this.right.max);
		        }
		    };
		    /**
			 *  The balance is how the leafs are distributed on the node
			 *  @return  {Number}  Negative numbers are balanced to the right
			 */
		    IntervalNode.prototype.getBalance = function () {
		        var balance = 0;
		        if (this.left !== null && this.right !== null) {
		            balance = this.left.height - this.right.height;
		        } else if (this.left !== null) {
		            balance = this.left.height + 1;
		        } else if (this.right !== null) {
		            balance = -(this.right.height + 1);
		        }
		        return balance;
		    };
		    /**
			 *  @returns {Boolean} true if this node is the left child
			 *  of its parent
			 */
		    IntervalNode.prototype.isLeftChild = function () {
		        return this.parent !== null && this.parent.left === this;
		    };
		    /**
			 *  get/set the left node
			 *  @type {IntervalNode}
			 */
		    Object.defineProperty(IntervalNode.prototype, 'left', {
		        get: function () {
		            return this._left;
		        },
		        set: function (node) {
		            this._left = node;
		            if (node !== null) {
		                node.parent = this;
		            }
		            this.updateHeight();
		            this.updateMax();
		        }
		    });
		    /**
			 *  get/set the right node
			 *  @type {IntervalNode}
			 */
		    Object.defineProperty(IntervalNode.prototype, 'right', {
		        get: function () {
		            return this._right;
		        },
		        set: function (node) {
		            this._right = node;
		            if (node !== null) {
		                node.parent = this;
		            }
		            this.updateHeight();
		            this.updateMax();
		        }
		    });
		    /**
			 *  null out references.
			 */
		    IntervalNode.prototype.dispose = function () {
		        this.parent = null;
		        this._left = null;
		        this._right = null;
		        this.event = null;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	END INTERVAL NODE HELPER
		    ///////////////////////////////////////////////////////////////////////////
		    return Tone.IntervalTimeline;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Transport for timing musical events.
			 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
			 *          Tone.Transport timing events pass in the exact time of the scheduled event
			 *          in the argument of the callback function. Pass that time value to the object
			 *          you're scheduling. <br><br>
			 *          A single transport is created for you when the library is initialized. 
			 *          <br><br>
			 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
			 *          called with the time of that event as the argument. 
			 *
			 *  @extends {Tone.Emitter}
			 *  @singleton
			 *  @example
			 * //repeated event every 8th note
			 * Tone.Transport.scheduleRepeat(function(time){
			 * 	//do something with the time
			 * }, "8n");
			 *  @example
			 * //schedule an event on the 16th measure
			 * Tone.Transport.schedule(function(time){
			 * 	//do something with the time
			 * }, "16:0:0");
			 */
		    Tone.Transport = function () {
		        Tone.Emitter.call(this);
		        ///////////////////////////////////////////////////////////////////////
		        //	LOOPING
		        //////////////////////////////////////////////////////////////////////
		        /** 
				 * 	If the transport loops or not.
				 *  @type {boolean}
				 */
		        this.loop = false;
		        /** 
				 * 	The loop start position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
		        this._loopStart = 0;
		        /** 
				 * 	The loop end position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
		        this._loopEnd = 0;
		        ///////////////////////////////////////////////////////////////////////
		        //	CLOCK/TEMPO
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  Pulses per quarter is the number of ticks per quarter note.
				 *  @private
				 *  @type  {Number}
				 */
		        this._ppq = TransportConstructor.defaults.PPQ;
		        /**
				 *  watches the main oscillator for timing ticks
				 *  initially starts at 120bpm
				 *  @private
				 *  @type {Tone.Clock}
				 */
		        this._clock = new Tone.Clock({
		            'callback': this._processTick.bind(this),
		            'frequency': 0
		        });
		        this._bindClockEvents();
		        /**
				 *  The Beats Per Minute of the Transport. 
				 *  @type {BPM}
				 *  @signal
				 *  @example
				 * Tone.Transport.bpm.value = 80;
				 * //ramp the bpm to 120 over 10 seconds
				 * Tone.Transport.bpm.rampTo(120, 10);
				 */
		        this.bpm = this._clock.frequency;
		        this.bpm._toUnits = this._toUnits.bind(this);
		        this.bpm._fromUnits = this._fromUnits.bind(this);
		        this.bpm.units = Tone.Type.BPM;
		        this.bpm.value = TransportConstructor.defaults.bpm;
		        this._readOnly('bpm');
		        /**
				 *  The time signature, or more accurately the numerator
				 *  of the time signature over a denominator of 4. 
				 *  @type {Number}
				 *  @private
				 */
		        this._timeSignature = TransportConstructor.defaults.timeSignature;
		        ///////////////////////////////////////////////////////////////////////
		        //	TIMELINE EVENTS
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  All the events in an object to keep track by ID
				 *  @type {Object}
				 *  @private
				 */
		        this._scheduledEvents = {};
		        /**
				 *  The event ID counter
				 *  @type {Number}
				 *  @private
				 */
		        this._eventID = 0;
		        /**
				 * 	The scheduled events.
				 *  @type {Tone.Timeline}
				 *  @private
				 */
		        this._timeline = new Tone.Timeline();
		        /**
				 *  Repeated events
				 *  @type {Array}
				 *  @private
				 */
		        this._repeatedEvents = new Tone.IntervalTimeline();
		        /**
				 *  Events that occur once
				 *  @type {Array}
				 *  @private
				 */
		        this._onceEvents = new Tone.Timeline();
		        /** 
				 *  All of the synced Signals
				 *  @private 
				 *  @type {Array}
				 */
		        this._syncedSignals = [];
		        ///////////////////////////////////////////////////////////////////////
		        //	SWING
		        //////////////////////////////////////////////////////////////////////
		        /**
				 *  The subdivision of the swing
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._swingTicks = TransportConstructor.defaults.PPQ / 2;
		        //8n
		        /**
				 *  The swing amount
				 *  @type {NormalRange}
				 *  @private
				 */
		        this._swingAmount = 0;
		    };
		    Tone.extend(Tone.Transport, Tone.Emitter);
		    /**
			 *  the defaults
			 *  @type {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Transport.defaults = {
		        'bpm': 120,
		        'swing': 0,
		        'swingSubdivision': '8n',
		        'timeSignature': 4,
		        'loopStart': 0,
		        'loopEnd': '4m',
		        'PPQ': 192
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	TICKS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  called on every tick
			 *  @param   {number} tickTime clock relative tick time
			 *  @private
			 */
		    Tone.Transport.prototype._processTick = function (tickTime) {
		        var ticks = this._clock.ticks;
		        //handle swing
		        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat
		            ticks % (this._swingTicks * 2) !== 0) {
		            //add some swing
		            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);
		            var amount = Math.sin(progress * Math.PI) * this._swingAmount;
		            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i').eval() * amount;
		        }
		        //do the loop test
		        if (this.loop) {
		            if (ticks === this._loopEnd) {
		                this.emit('stop', tickTime);
		                this._clock.ticks = this._loopStart;
		                ticks = this._loopStart;
		                this.emit('start', tickTime, this.seconds);
		                this.emit('loop', tickTime);
		            }
		        }
		        //process the single occurrence events
		        this._onceEvents.forEachBefore(ticks, function (event) {
		            event.callback(tickTime);
		        });
		        //and clear the single occurrence timeline
		        this._onceEvents.cancelBefore(ticks);
		        //fire the next tick events if their time has come
		        this._timeline.forEachAtTime(ticks, function (event) {
		            event.callback(tickTime);
		        });
		        //process the repeated events
		        this._repeatedEvents.forEachAtTime(ticks, function (event) {
		            if ((ticks - event.time) % event.interval === 0) {
		                event.callback(tickTime);
		            }
		        });
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SCHEDULABLE EVENTS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Schedule an event along the timeline.
			 *  @param {Function} callback The callback to be invoked at the time.
			 *  @param {TransportTime}  time The time to invoke the callback at.
			 *  @return {Number} The id of the event which can be used for canceling the event. 
			 *  @example
			 * //trigger the callback when the Transport reaches the desired time
			 * Tone.Transport.schedule(function(time){
			 * 	envelope.triggerAttack(time);
			 * }, "128i");
			 */
		    Tone.Transport.prototype.schedule = function (callback, time) {
		        var event = {
		            'time': this.toTicks(time),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._timeline
		        };
		        this._timeline.addEvent(event);
		        return id;
		    };
		    /**
			 *  Schedule a repeated event along the timeline. The event will fire
			 *  at the `interval` starting at the `startTime` and for the specified
			 *  `duration`. 
			 *  @param  {Function}  callback   The callback to invoke.
			 *  @param  {Time}    interval   The duration between successive
			 *                               callbacks.
			 *  @param  {TimelinePosition=}    startTime  When along the timeline the events should
			 *                               start being invoked.
			 *  @param {Time} [duration=Infinity] How long the event should repeat. 
			 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
			 *                           the event. 
			 *  @example
			 * //a callback invoked every eighth note after the first measure
			 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
			 */
		    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {
		        if (interval <= 0) {
		            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');
		        }
		        var event = {
		            'time': this.toTicks(startTime),
		            'duration': this.toTicks(this.defaultArg(duration, Infinity)),
		            'interval': this.toTicks(interval),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._repeatedEvents
		        };
		        this._repeatedEvents.addEvent(event);
		        return id;
		    };
		    /**
			 *  Schedule an event that will be removed after it is invoked. 
			 *  Note that if the given time is less than the current transport time, 
			 *  the event will be invoked immediately. 
			 *  @param {Function} callback The callback to invoke once.
			 *  @param {TransportTime} time The time the callback should be invoked.
			 *  @returns {Number} The ID of the scheduled event. 
			 */
		    Tone.Transport.prototype.scheduleOnce = function (callback, time) {
		        var event = {
		            'time': this.toTicks(time),
		            'callback': callback
		        };
		        var id = this._eventID++;
		        this._scheduledEvents[id.toString()] = {
		            'event': event,
		            'timeline': this._onceEvents
		        };
		        this._onceEvents.addEvent(event);
		        return id;
		    };
		    /**
			 *  Clear the passed in event id from the timeline
			 *  @param {Number} eventId The id of the event.
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.clear = function (eventId) {
		        if (this._scheduledEvents.hasOwnProperty(eventId)) {
		            var item = this._scheduledEvents[eventId.toString()];
		            item.timeline.removeEvent(item.event);
		            delete this._scheduledEvents[eventId.toString()];
		        }
		        return this;
		    };
		    /**
			 *  Remove scheduled events from the timeline after
			 *  the given time. Repeated events will be removed
			 *  if their startTime is after the given time
			 *  @param {TransportTime} [after=0] Clear all events after
			 *                          this time. 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.cancel = function (after) {
		        after = this.defaultArg(after, 0);
		        after = this.toTicks(after);
		        this._timeline.cancel(after);
		        this._onceEvents.cancel(after);
		        this._repeatedEvents.cancel(after);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	START/STOP/PAUSE
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Bind start/stop/pause events from the clock and emit them.
			 */
		    Tone.Transport.prototype._bindClockEvents = function () {
		        this._clock.on('start', function (time, offset) {
		            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();
		            this.emit('start', time, offset);
		        }.bind(this));
		        this._clock.on('stop', function (time) {
		            this.emit('stop', time);
		        }.bind(this));
		        this._clock.on('pause', function (time) {
		            this.emit('pause', time);
		        }.bind(this));
		    };
		    /**
			 *  Returns the playback state of the source, either "started", "stopped", or "paused"
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Transport#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'state', {
		        get: function () {
		            return this._clock.getStateAtTime(this.now());
		        }
		    });
		    /**
			 *  Start the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now] The time when the transport should start.
			 *  @param  {TransportTime=} offset The timeline offset to start the transport.
			 *  @returns {Tone.Transport} this
			 *  @example
			 * //start the transport in one second starting at beginning of the 5th measure. 
			 * Tone.Transport.start("+1", "4:0:0");
			 */
		    Tone.Transport.prototype.start = function (time, offset) {
		        //start the clock
		        if (!this.isUndef(offset)) {
		            offset = this.toTicks(offset);
		        }
		        this._clock.start(time, offset);
		        return this;
		    };
		    /**
			 *  Stop the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now] The time when the transport should stop. 
			 *  @returns {Tone.Transport} this
			 *  @example
			 * Tone.Transport.stop();
			 */
		    Tone.Transport.prototype.stop = function (time) {
		        this._clock.stop(time);
		        return this;
		    };
		    /**
			 *  Pause the transport and all sources synced to the transport.
			 *  @param  {Time} [time=now]
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.pause = function (time) {
		        this._clock.pause(time);
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SETTERS/GETTERS
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  The time signature as just the numerator over 4. 
			 *  For example 4/4 would be just 4 and 6/8 would be 3.
			 *  @memberOf Tone.Transport#
			 *  @type {Number|Array}
			 *  @name timeSignature
			 *  @example
			 * //common time
			 * Tone.Transport.timeSignature = 4;
			 * // 7/8
			 * Tone.Transport.timeSignature = [7, 8];
			 * //this will be reduced to a single number
			 * Tone.Transport.timeSignature; //returns 3.5
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {
		        get: function () {
		            return this._timeSignature;
		        },
		        set: function (timeSig) {
		            if (this.isArray(timeSig)) {
		                timeSig = timeSig[0] / timeSig[1] * 4;
		            }
		            this._timeSignature = timeSig;
		        }
		    });
		    /**
			 * When the Tone.Transport.loop = true, this is the starting position of the loop.
			 * @memberOf Tone.Transport#
			 * @type {TransportTime}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toSeconds();
		        },
		        set: function (startPosition) {
		            this._loopStart = this.toTicks(startPosition);
		        }
		    });
		    /**
			 * When the Tone.Transport.loop = true, this is the ending position of the loop.
			 * @memberOf Tone.Transport#
			 * @type {TransportTime}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();
		        },
		        set: function (endPosition) {
		            this._loopEnd = this.toTicks(endPosition);
		        }
		    });
		    /**
			 *  Set the loop start and stop at the same time. 
			 *  @param {TransportTime} startPosition 
			 *  @param {TransportTime} endPosition   
			 *  @returns {Tone.Transport} this
			 *  @example
			 * //loop over the first measure
			 * Tone.Transport.setLoopPoints(0, "1m");
			 * Tone.Transport.loop = true;
			 */
		    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {
		        this.loopStart = startPosition;
		        this.loopEnd = endPosition;
		        return this;
		    };
		    /**
			 *  The swing value. Between 0-1 where 1 equal to 
			 *  the note + half the subdivision.
			 *  @memberOf Tone.Transport#
			 *  @type {NormalRange}
			 *  @name swing
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'swing', {
		        get: function () {
		            return this._swingAmount;
		        },
		        set: function (amount) {
		            //scale the values to a normal range
		            this._swingAmount = amount;
		        }
		    });
		    /**
			 *  Set the subdivision which the swing will be applied to. 
			 *  The default values is a 16th note. Value must be less 
			 *  than a quarter note.
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Time}
			 *  @name swingSubdivision
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {
		        get: function () {
		            return Tone.Time(this._swingTicks, 'i').toNotation();
		        },
		        set: function (subdivision) {
		            this._swingTicks = this.toTicks(subdivision);
		        }
		    });
		    /**
			 *  The Transport's position in Bars:Beats:Sixteenths.
			 *  Setting the value will jump to that position right away. 
			 *  @memberOf Tone.Transport#
			 *  @type {BarsBeatsSixteenths}
			 *  @name position
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'position', {
		        get: function () {
		            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();
		        },
		        set: function (progress) {
		            var ticks = this.toTicks(progress);
		            this.ticks = ticks;
		        }
		    });
		    /**
			 *  The Transport's position in seconds
			 *  Setting the value will jump to that position right away. 
			 *  @memberOf Tone.Transport#
			 *  @type {Seconds}
			 *  @name seconds
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'seconds', {
		        get: function () {
		            return Tone.TransportTime(this.ticks, 'i').toSeconds();
		        },
		        set: function (progress) {
		            var ticks = this.toTicks(progress);
		            this.ticks = ticks;
		        }
		    });
		    /**
			 *  The Transport's loop position as a normalized value. Always
			 *  returns 0 if the transport if loop is not true. 
			 *  @memberOf Tone.Transport#
			 *  @name progress
			 *  @type {NormalRange}
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'progress', {
		        get: function () {
		            if (this.loop) {
		                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  The transports current tick position.
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Ticks}
			 *  @name ticks
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'ticks', {
		        get: function () {
		            return this._clock.ticks;
		        },
		        set: function (t) {
		            var now = this.now();
		            //stop everything synced to the transport
		            if (this.state === Tone.State.Started) {
		                this.emit('stop', now);
		                this._clock.ticks = t;
		                //restart it with the new time
		                this.emit('start', now, this.seconds);
		            } else {
		                this._clock.ticks = t;
		            }
		        }
		    });
		    /**
			 *  Pulses Per Quarter note. This is the smallest resolution
			 *  the Transport timing supports. This should be set once
			 *  on initialization and not set again. Changing this value 
			 *  after other objects have been created can cause problems. 
			 *  
			 *  @memberOf Tone.Transport#
			 *  @type {Number}
			 *  @name PPQ
			 */
		    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {
		        get: function () {
		            return this._ppq;
		        },
		        set: function (ppq) {
		            var bpm = this.bpm.value;
		            this._ppq = ppq;
		            this.bpm.value = bpm;
		        }
		    });
		    /**
			 *  Convert from BPM to frequency (factoring in PPQ)
			 *  @param  {BPM}  bpm The BPM value to convert to frequency
			 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
			 *  @private
			 */
		    Tone.Transport.prototype._fromUnits = function (bpm) {
		        return 1 / (60 / bpm / this.PPQ);
		    };
		    /**
			 *  Convert from frequency (with PPQ) into BPM
			 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
			 *  @return  {BPM}  The frequency value as BPM.
			 *  @private
			 */
		    Tone.Transport.prototype._toUnits = function (freq) {
		        return freq / this.PPQ * 60;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	SYNCING
		    ///////////////////////////////////////////////////////////////////////////////
		    /**
			 *  Returns the time aligned to the next subdivision
			 *  of the Transport. If the Transport is not started,
			 *  it will return 0.
			 *  Note: this will not work precisely during tempo ramps.
			 *  @param  {Time}  subdivision  The subdivision to quantize to
			 *  @return  {Number}  The context time of the next subdivision.
			 *  @example
			 * Tone.Transport.start(); //the transport must be started
			 * Tone.Transport.nextSubdivision("4n");
			 */
		    Tone.Transport.prototype.nextSubdivision = function (subdivision) {
		        subdivision = this.toSeconds(subdivision);
		        //if the transport's not started, return 0
		        var now;
		        if (this.state === Tone.State.Started) {
		            now = this._clock._nextTick;
		        } else {
		            return 0;
		        }
		        var transportPos = Tone.Time(this.ticks, 'i').eval();
		        var remainingTime = subdivision - transportPos % subdivision;
		        if (remainingTime === 0) {
		            remainingTime = subdivision;
		        }
		        return now + remainingTime;
		    };
		    /**
			 *  Attaches the signal to the tempo control signal so that 
			 *  any changes in the tempo will change the signal in the same
			 *  ratio. 
			 *  
			 *  @param  {Tone.Signal} signal 
			 *  @param {number=} ratio Optionally pass in the ratio between
			 *                         the two signals. Otherwise it will be computed
			 *                         based on their current values. 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.syncSignal = function (signal, ratio) {
		        if (!ratio) {
		            //get the sync ratio
		            if (signal._param.value !== 0) {
		                ratio = signal._param.value / this.bpm._param.value;
		            } else {
		                ratio = 0;
		            }
		        }
		        var ratioSignal = new Tone.Gain(ratio);
		        this.bpm.chain(ratioSignal, signal._param);
		        this._syncedSignals.push({
		            'ratio': ratioSignal,
		            'signal': signal,
		            'initial': signal._param.value
		        });
		        signal._param.value = 0;
		        return this;
		    };
		    /**
			 *  Unsyncs a previously synced signal from the transport's control. 
			 *  See Tone.Transport.syncSignal.
			 *  @param  {Tone.Signal} signal 
			 *  @returns {Tone.Transport} this
			 */
		    Tone.Transport.prototype.unsyncSignal = function (signal) {
		        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {
		            var syncedSignal = this._syncedSignals[i];
		            if (syncedSignal.signal === signal) {
		                syncedSignal.ratio.dispose();
		                syncedSignal.signal._param.value = syncedSignal.initial;
		                this._syncedSignals.splice(i, 1);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Transport} this
			 *  @private
			 */
		    Tone.Transport.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        this._clock.dispose();
		        this._clock = null;
		        this._writable('bpm');
		        this.bpm = null;
		        this._timeline.dispose();
		        this._timeline = null;
		        this._onceEvents.dispose();
		        this._onceEvents = null;
		        this._repeatedEvents.dispose();
		        this._repeatedEvents = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////////
		    //	INITIALIZATION
		    ///////////////////////////////////////////////////////////////////////////////
		    var TransportConstructor = Tone.Transport;
		    Tone._initAudioContext(function () {
		        if (typeof Tone.Transport === 'function') {
		            //a single transport object
		            Tone.Transport = new Tone.Transport();
		        } else {
		            //stop the clock
		            Tone.Transport.stop();
		            //get the previous values
		            var prevSettings = Tone.Transport.get();
		            //destory the old transport
		            Tone.Transport.dispose();
		            //make new Transport insides
		            TransportConstructor.call(Tone.Transport);
		            //set the previous config
		            Tone.Transport.set(prevSettings);
		        }
		    });
		    return Tone.Transport;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. 
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Decibels} [volume=0] the initial volume
			 *  @example
			 * var vol = new Tone.Volume(-12);
			 * instrument.chain(vol, Tone.Master);
			 */
		    Tone.Volume = function () {
		        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);
		        /**
				 * the output node
				 * @type {GainNode}
				 * @private
				 */
		        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);
		        /**
				 * The unmuted volume
				 * @type {Decibels}
				 * @private
				 */
		        this._unmutedVolume = 0;
		        /**
				 *  if the volume is muted
				 *  @type {Boolean}
				 *  @private
				 */
		        this._muted = false;
		        /**
				 *  The volume control in decibels. 
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.volume = this.output.gain;
		        this._readOnly('volume');
		        //set the mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.Volume);
		    /**
			 *  Defaults
			 *  @type  {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Volume.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Volume#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * volume.mute = true;
			 */
		    Object.defineProperty(Tone.Volume.prototype, 'mute', {
		        get: function () {
		            return this._muted;
		        },
		        set: function (mute) {
		            if (!this._muted && mute) {
		                this._unmutedVolume = this.volume.value;
		                //maybe it should ramp here?
		                this.volume.value = -Infinity;
		            } else if (this._muted && !mute) {
		                this.volume.value = this._unmutedVolume;
		            }
		            this._muted = mute;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Volume} this
			 */
		    Tone.Volume.prototype.dispose = function () {
		        this.input.dispose();
		        Tone.prototype.dispose.call(this);
		        this._writable('volume');
		        this.volume.dispose();
		        this.volume = null;
		        return this;
		    };
		    return Tone.Volume;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A single master output which is connected to the
			 *          AudioDestinationNode (aka your speakers). 
			 *          It provides useful conveniences such as the ability 
			 *          to set the volume and mute the entire application. 
			 *          It also gives you the ability to apply master effects to your application. 
			 *          <br><br>
			 *          Like Tone.Transport, A single Tone.Master is created
			 *          on initialization and you do not need to explicitly construct one.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @singleton
			 *  @example
			 * //the audio will go from the oscillator to the speakers
			 * oscillator.connect(Tone.Master);
			 * //a convenience for connecting to the master output is also provided:
			 * oscillator.toMaster();
			 * //the above two examples are equivalent.
			 */
		    Tone.Master = function () {
		        this.createInsOuts(1, 1);
		        /**
				 *  The private volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume();
		        /**
				 * The volume of the master output.
				 * @type {Decibels}
				 * @signal
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        //connections
		        this.input.chain(this.output, this.context.destination);
		    };
		    Tone.extend(Tone.Master);
		    /**
			 *  @type {Object}
			 *  @const
			 */
		    Tone.Master.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Master#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * Tone.Master.mute = true;
			 */
		    Object.defineProperty(Tone.Master.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    /**
			 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously 
			 *  chained in the master effects chain. 
			 *  @param {AudioNode|Tone...} args All arguments will be connected in a row
			 *                                  and the Master will be routed through it.
			 *  @return  {Tone.Master}  this
			 *  @example
			 * //some overall compression to keep the levels in check
			 * var masterCompressor = new Tone.Compressor({
			 * 	"threshold" : -6,
			 * 	"ratio" : 3,
			 * 	"attack" : 0.5,
			 * 	"release" : 0.1
			 * });
			 * //give a little boost to the lows
			 * var lowBump = new Tone.Filter(200, "lowshelf");
			 * //route everything through the filter 
			 * //and compressor before going to the speakers
			 * Tone.Master.chain(lowBump, masterCompressor);
			 */
		    Tone.Master.prototype.chain = function () {
		        this.input.disconnect();
		        this.input.chain.apply(this.input, arguments);
		        arguments[arguments.length - 1].connect(this.output);
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.Master}  this
			 */
		    Tone.Master.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('volume');
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    //	AUGMENT TONE's PROTOTYPE
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
			 *  @returns {Tone} this
			 *  @example
			 * //connect an oscillator to the master output
			 * var osc = new Tone.Oscillator().toMaster();
			 */
		    Tone.prototype.toMaster = function () {
		        this.connect(Tone.Master);
		        return this;
		    };
		    /**
			 *  Also augment AudioNode's prototype to include toMaster
			 *  as a convenience
			 *  @returns {AudioNode} this
			 */
		    AudioNode.prototype.toMaster = function () {
		        this.connect(Tone.Master);
		        return this;
		    };
		    var MasterConstructor = Tone.Master;
		    /**
			 *  initialize the module and listen for new audio contexts
			 */
		    Tone._initAudioContext(function () {
		        //a single master output
		        if (!Tone.prototype.isUndef(Tone.Master)) {
		            Tone.Master = new MasterConstructor();
		        } else {
		            MasterConstructor.prototype.dispose.call(Tone.Master);
		            MasterConstructor.call(Tone.Master);
		        }
		    });
		    return Tone.Master;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base class for sources. Sources have start/stop methods
			 *          and the ability to be synced to the 
			 *          start/stop of Tone.Transport. 
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * //Multiple state change events can be chained together,
			 * //but must be set in the correct order and with ascending times
			 * 
			 * // OK
			 * state.start().stop("+0.2");
			 * // AND
			 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
			 *
			 * // BAD
			 * state.stop("+0.2").start();
			 * // OR
			 * state.start("+0.3").stop("+0.2");
			 * 
			 */
		    Tone.Source = function (options) {
		        // this.createInsOuts(0, 1);
		        options = this.defaultArg(options, Tone.Source.defaults);
		        /**
				 *  The output volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        /**
				 * 	Keep track of the scheduled state.
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        this._state.memory = 10;
		        /**
				 *  The synced `start` callback function from the transport
				 *  @type {Function}
				 *  @private
				 */
		        this._synced = false;
		        /**
				 *  Keep track of all of the scheduled event ids
				 *  @type  {Array}
				 *  @private
				 */
		        this._scheduled = [];
		        //make the output explicitly stereo
		        this._volume.output.output.channelCount = 2;
		        this._volume.output.output.channelCountMode = 'explicit';
		        //mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.Source);
		    /**
			 *  The default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Source.defaults = {
		        'volume': 0,
		        'mute': false
		    };
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.Source#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Source.prototype, 'state', {
		        get: function () {
		            if (this._synced) {
		                if (Tone.Transport.state === Tone.State.Started) {
		                    return this._state.getStateAtTime(Tone.Transport.seconds);
		                } else {
		                    return Tone.State.Stopped;
		                }
		            } else {
		                return this._state.getStateAtTime(this.now());
		            }
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.Source#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * source.mute = true;
			 */
		    Object.defineProperty(Tone.Source.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    //overwrite these functions
		    Tone.Source.prototype._start = Tone.noOp;
		    Tone.Source.prototype._stop = Tone.noOp;
		    /**
			 *  Start the source at the specified time. If no time is given, 
			 *  start the source now.
			 *  @param  {Time} [time=now] When the source should be started.
			 *  @returns {Tone.Source} this
			 *  @example
			 * source.start("+0.5"); //starts the source 0.5 seconds from now
			 */
		    Tone.Source.prototype.start = function (time, offset, duration) {
		        if (this.isUndef(time) && this._synced) {
		            time = Tone.Transport.seconds;
		        } else {
		            time = this.toSeconds(time);
		        }
		        //if it's started, stop it and restart it
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this.stop(time);
		        }
		        this._state.setStateAtTime(Tone.State.Started, time);
		        if (this._synced) {
		            // add the offset time to the event
		            var event = this._state.getEvent(time);
		            event.offset = this.defaultArg(offset, 0);
		            event.duration = duration;
		            var sched = Tone.Transport.schedule(function (t) {
		                this._start(t, offset, duration);
		            }.bind(this), time);
		            this._scheduled.push(sched);
		        } else {
		            this._start.apply(this, arguments);
		        }
		        return this;
		    };
		    /**
			 *  Stop the source at the specified time. If no time is given, 
			 *  stop the source now.
			 *  @param  {Time} [time=now] When the source should be stopped. 
			 *  @returns {Tone.Source} this
			 *  @example
			 * source.stop(); // stops the source immediately
			 */
		    Tone.Source.prototype.stop = function (time) {
		        if (this.isUndef(time) && this._synced) {
		            time = Tone.Transport.seconds;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._state.cancel(time);
		        this._state.setStateAtTime(Tone.State.Stopped, time);
		        if (!this._synced) {
		            this._stop.apply(this, arguments);
		        } else {
		            var sched = Tone.Transport.schedule(this._stop.bind(this), time);
		            this._scheduled.push(sched);
		        }
		        return this;
		    };
		    /**
			 *  Sync the source to the Transport so that all subsequent
			 *  calls to `start` and `stop` are synced to the TransportTime
			 *  instead of the AudioContext time. 
			 *
			 *  @returns {Tone.Source} this
			 *  @example
			 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
			 * source.sync().start(0).stop(0.3);
			 * //start the transport.
			 * Tone.Transport.start();
			 *
			 *  @example
			 * //start the transport with an offset and the sync'ed sources
			 * //will start in the correct position
			 * source.sync().start(0.1);
			 * //the source will be invoked with an offset of 0.4
			 * Tone.Transport.start("+0.5", 0.5);
			 */
		    Tone.Source.prototype.sync = function () {
		        this._synced = true;
		        Tone.Transport.on('start', function (time, offset) {
		            if (offset > 0) {
		                // get the playback state at that time
		                var stateEvent = this._state.getEvent(offset);
		                // listen for start events which may occur in the middle of the sync'ed time
		                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {
		                    // get the offset
		                    var startOffset = offset - this.toSeconds(stateEvent.time);
		                    var duration;
		                    if (stateEvent.duration) {
		                        duration = this.toSeconds(stateEvent.duration) - startOffset;
		                    }
		                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
		                }
		            }
		        }.bind(this));
		        Tone.Transport.on('stop pause', function (time) {
		            if (this._state.getStateAtTime(Tone.Transport.seconds) === Tone.State.Started) {
		                this._stop(time);
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Unsync the source to the Transport. See Tone.Source.sync
			 *  @returns {Tone.Source} this
			 */
		    Tone.Source.prototype.unsync = function () {
		        this._synced = false;
		        Tone.Transport.off('start stop pause');
		        // clear all of the scheduled ids
		        for (var i = 0; i < this._scheduled.length; i++) {
		            var id = this._scheduled[i];
		            Tone.Transport.clear(id);
		        }
		        this._scheduled = [];
		        this._state.cancel(0);
		        return this;
		    };
		    /**
			 *	Clean up.
			 *  @return {Tone.Source} this
			 */
		    Tone.Source.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.unsync();
		        this._scheduled = null;
		        this._writable('volume');
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		        this._state.dispose();
		        this._state = null;
		    };
		    return Tone.Source;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Oscillator supports a number of features including
			 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), 
			 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
			 *
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {Frequency} [frequency] Starting frequency
			 *  @param {string} [type] The oscillator type. Read more about type below.
			 *  @example
			 * //make and start a 440hz sine tone
			 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
			 */
		    Tone.Oscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type'
		        ], Tone.Oscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  the main oscillator
				 *  @type {OscillatorNode}
				 *  @private
				 */
		        this._oscillator = null;
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  the periodic wave
				 *  @type {PeriodicWave}
				 *  @private
				 */
		        this._wave = null;
		        /**
				 *  The partials of the oscillator
				 *  @type {Array}
				 *  @private
				 */
		        this._partials = this.defaultArg(options.partials, [1]);
		        /**
				 *  the phase of the oscillator
				 *  between 0 - 360
				 *  @type {number}
				 *  @private
				 */
		        this._phase = options.phase;
		        /**
				 *  the type of the oscillator
				 *  @type {string}
				 *  @private
				 */
		        this._type = null;
		        //setup
		        this.type = options.type;
		        this.phase = this._phase;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.Oscillator, Tone.Source);
		    /**
			 *  the default parameters
			 *  @type {Object}
			 */
		    Tone.Oscillator.defaults = {
		        'type': 'sine',
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'partials': []
		    };
		    /**
			 *  The Oscillator types
			 *  @enum {String}
			 */
		    Tone.Oscillator.Type = {
		        Sine: 'sine',
		        Triangle: 'triangle',
		        Sawtooth: 'sawtooth',
		        Square: 'square',
		        Custom: 'custom'
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now] 
			 *  @private
			 */
		    Tone.Oscillator.prototype._start = function (time) {
		        //new oscillator with previous values
		        this._oscillator = this.context.createOscillator();
		        this._oscillator.setPeriodicWave(this._wave);
		        //connect the control signal to the oscillator frequency & detune
		        this._oscillator.connect(this.output);
		        this.frequency.connect(this._oscillator.frequency);
		        this.detune.connect(this._oscillator.detune);
		        //start the oscillator
		        this._oscillator.start(this.toSeconds(time));
		    };
		    /**
			 *  stop the oscillator
			 *  @private
			 *  @param  {Time} [time=now] (optional) timing parameter
			 *  @returns {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype._stop = function (time) {
		        if (this._oscillator) {
		            this._oscillator.stop(this.toSeconds(time));
		            this._oscillator = null;
		        }
		        return this;
		    };
		    /**
			 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
			 *  will also affect the oscillators frequency. 
			 *  @returns {Tone.Oscillator} this
			 *  @example
			 * Tone.Transport.bpm.value = 120;
			 * osc.frequency.value = 440;
			 * //the ration between the bpm and the frequency will be maintained
			 * osc.syncFrequency();
			 * Tone.Transport.bpm.value = 240; 
			 * // the frequency of the oscillator is doubled to 880
			 */
		    Tone.Oscillator.prototype.syncFrequency = function () {
		        Tone.Transport.syncSignal(this.frequency);
		        return this;
		    };
		    /**
			 *  Unsync the oscillator's frequency from the Transport. 
			 *  See Tone.Oscillator.syncFrequency
			 *  @returns {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype.unsyncFrequency = function () {
		        Tone.Transport.unsyncSignal(this.frequency);
		        return this;
		    };
		    /**
			 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
			 * setting the first x number of partials of the oscillator. For example: "sine4" would
			 * set be the first 4 partials of the sine wave and "triangle8" would set the first
			 * 8 partials of the triangle wave.
			 * <br><br> 
			 * Uses PeriodicWave internally even for native types so that it can set the phase. 
			 * PeriodicWave equations are from the 
			 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
			 *  
			 * @memberOf Tone.Oscillator#
			 * @type {string}
			 * @name type
			 * @example
			 * //set it to a square wave
			 * osc.type = "square";
			 * @example
			 * //set the first 6 partials of a sawtooth wave
			 * osc.type = "sawtooth6";
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            var coefs = this._getRealImaginary(type, this._phase);
		            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);
		            this._wave = periodicWave;
		            if (this._oscillator !== null) {
		                this._oscillator.setPeriodicWave(this._wave);
		            }
		            this._type = type;
		        }
		    });
		    /**
			 *  Returns the real and imaginary components based 
			 *  on the oscillator type.
			 *  @returns {Array} [real, imaginary]
			 *  @private
			 */
		    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {
		        var fftSize = 4096;
		        var periodicWaveSize = fftSize / 2;
		        var real = new Float32Array(periodicWaveSize);
		        var imag = new Float32Array(periodicWaveSize);
		        var partialCount = 1;
		        if (type === Tone.Oscillator.Type.Custom) {
		            partialCount = this._partials.length + 1;
		            periodicWaveSize = partialCount;
		        } else {
		            var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);
		            if (partial) {
		                partialCount = parseInt(partial[2]) + 1;
		                type = partial[1];
		                partialCount = Math.max(partialCount, 2);
		                periodicWaveSize = partialCount;
		            }
		        }
		        for (var n = 1; n < periodicWaveSize; ++n) {
		            var piFactor = 2 / (n * Math.PI);
		            var b;
		            switch (type) {
		            case Tone.Oscillator.Type.Sine:
		                b = n <= partialCount ? 1 : 0;
		                break;
		            case Tone.Oscillator.Type.Square:
		                b = n & 1 ? 2 * piFactor : 0;
		                break;
		            case Tone.Oscillator.Type.Sawtooth:
		                b = piFactor * (n & 1 ? 1 : -1);
		                break;
		            case Tone.Oscillator.Type.Triangle:
		                if (n & 1) {
		                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
		                } else {
		                    b = 0;
		                }
		                break;
		            case Tone.Oscillator.Type.Custom:
		                b = this._partials[n - 1];
		                break;
		            default:
		                throw new TypeError('Tone.Oscillator: invalid type: ' + type);
		            }
		            if (b !== 0) {
		                real[n] = -b * Math.sin(phase * n);
		                imag[n] = b * Math.cos(phase * n);
		            } else {
		                real[n] = 0;
		                imag[n] = 0;
		            }
		        }
		        return [
		            real,
		            imag
		        ];
		    };
		    /**
			 *  Compute the inverse FFT for a given phase.	
			 *  @param  {Float32Array}  real
			 *  @param  {Float32Array}  imag 
			 *  @param  {NormalRange}  phase 
			 *  @return  {AudioRange}
			 *  @private
			 */
		    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {
		        var sum = 0;
		        var len = real.length;
		        for (var i = 0; i < len; i++) {
		            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
		        }
		        return sum;
		    };
		    /**
			 *  Returns the initial value of the oscillator.
			 *  @return  {AudioRange}
			 *  @private
			 */
		    Tone.Oscillator.prototype._getInitialValue = function () {
		        var coefs = this._getRealImaginary(this._type, 0);
		        var real = coefs[0];
		        var imag = coefs[1];
		        var maxValue = 0;
		        var twoPi = Math.PI * 2;
		        //check for peaks in 8 places
		        for (var i = 0; i < 8; i++) {
		            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);
		        }
		        return -this._inverseFFT(real, imag, this._phase) / maxValue;
		    };
		    /**
			 * The partials of the waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.Oscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {
		        get: function () {
		            if (this._type !== Tone.Oscillator.Type.Custom) {
		                return [];
		            } else {
		                return this._partials;
		            }
		        },
		        set: function (partials) {
		            this._partials = partials;
		            this.type = Tone.Oscillator.Type.Custom;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees. 
			 * @memberOf Tone.Oscillator#
			 * @type {Degrees}
			 * @name phase
			 * @example
			 * osc.phase = 180; //flips the phase of the oscillator
			 */
		    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {
		        get: function () {
		            return this._phase * (180 / Math.PI);
		        },
		        set: function (phase) {
		            this._phase = phase * Math.PI / 180;
		            //reset the type
		            this.type = this._type;
		        }
		    });
		    /**
			 *  Dispose and disconnect.
			 *  @return {Tone.Oscillator} this
			 */
		    Tone.Oscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._oscillator !== null) {
		            this._oscillator.disconnect();
		            this._oscillator = null;
		        }
		        this._wave = null;
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this._partials = null;
		        return this;
		    };
		    return Tone.Oscillator;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
			 *         it's own class is that many browsers optimize out Tone.Signal
			 *         with a value of 0 and will not process nodes further down the graph. 
			 *  @extends {Tone}
			 */
		    Tone.Zero = function () {
		        /**
				 *  The gain node
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._gain = this.input = this.output = new Tone.Gain();
		        Tone.Zero._zeros.connect(this._gain);
		    };
		    Tone.extend(Tone.Zero);
		    /**
			 *  clean up
			 *  @return  {Tone.Zero}  this
			 */
		    Tone.Zero.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._gain.dispose();
		        this._gain = null;
		        return this;
		    };
		    /**
			 *  Generates a constant output of 0. This is so 
			 *  the processing graph doesn't optimize out this
			 *  segment of the graph. 
			 *  @static
			 *  @private
			 *  @const
			 *  @type {AudioBufferSourceNode}
			 */
		    Tone.Zero._zeros = null;
		    /**
			 *  initializer function
			 */
		    Tone._initAudioContext(function (audioContext) {
		        var buffer = audioContext.createBuffer(1, 128, audioContext.sampleRate);
		        var arr = buffer.getChannelData(0);
		        for (var i = 0; i < arr.length; i++) {
		            arr[i] = 0;
		        }
		        Tone.Zero._zeros = audioContext.createBufferSource();
		        Tone.Zero._zeros.channelCount = 1;
		        Tone.Zero._zeros.channelCountMode = 'explicit';
		        Tone.Zero._zeros.buffer = buffer;
		        Tone.Zero._zeros.loop = true;
		        Tone.Zero._zeros.start(0);
		        Tone.Zero._zeros.noGC();
		    });
		    return Tone.Zero;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal 
			 *          which can be attached to an AudioParam or Tone.Signal 
			 *          in order to modulate that parameter with an oscillator. The LFO can 
			 *          also be synced to the transport to start/stop and change when the tempo changes.
			 *
			 *  @constructor
			 *  @extends {Tone.Oscillator}
			 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
			 *                               in the frequency range of 0.1 to 10 hertz. 
			 *  @param {number=} min The minimum output value of the LFO. 
			 *  @param {number=} max The maximum value of the LFO. 
			 *  @example
			 * var lfo = new Tone.LFO("4n", 400, 4000);
			 * lfo.connect(filter.frequency);
			 */
		    Tone.LFO = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'min',
		            'max'
		        ], Tone.LFO.defaults);
		        /** 
				 *  The oscillator. 
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._oscillator = new Tone.Oscillator({
		            'frequency': options.frequency,
		            'type': options.type
		        });
		        /**
				 *  the lfo's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._oscillator.frequency;
		        /**
				 * The amplitude of the LFO, which controls the output range between
				 * the min and max output. For example if the min is -10 and the max 
				 * is 10, setting the amplitude to 0.5 would make the LFO modulate
				 * between -5 and 5. 
				 * @type {Number}
				 * @signal
				 */
		        this.amplitude = this._oscillator.volume;
		        this.amplitude.units = Tone.Type.NormalRange;
		        this.amplitude.value = options.amplitude;
		        /**
				 *  The signal which is output when the LFO is stopped
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);
		        /**
				 *  Just outputs zeros.
				 *  @type {Tone.Zero}
				 *  @private
				 */
		        this._zeros = new Tone.Zero();
		        /**
				 *  The value that the LFO outputs when it's stopped
				 *  @type {AudioRange}
				 *  @private
				 */
		        this._stoppedValue = 0;
		        /**
				 *  @type {Tone.AudioToGain} 
				 *  @private
				 */
		        this._a2g = new Tone.AudioToGain();
		        /**
				 *  @type {Tone.Scale} 
				 *  @private
				 */
		        this._scaler = this.output = new Tone.Scale(options.min, options.max);
		        /**
				 *  the units of the LFO (used for converting)
				 *  @type {Tone.Type} 
				 *  @private
				 */
		        this._units = Tone.Type.Default;
		        this.units = options.units;
		        //connect it up
		        this._oscillator.chain(this._a2g, this._scaler);
		        this._zeros.connect(this._a2g);
		        this._stoppedSignal.connect(this._a2g);
		        this._readOnly([
		            'amplitude',
		            'frequency'
		        ]);
		        this.phase = options.phase;
		    };
		    Tone.extend(Tone.LFO, Tone.Oscillator);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.LFO.defaults = {
		        'type': 'sine',
		        'min': 0,
		        'max': 1,
		        'phase': 0,
		        'frequency': '4n',
		        'amplitude': 1,
		        'units': Tone.Type.Default
		    };
		    /**
			 *  Start the LFO. 
			 *  @param  {Time} [time=now] the time the LFO will start
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.start = function (time) {
		        time = this.toSeconds(time);
		        this._stoppedSignal.setValueAtTime(0, time);
		        this._oscillator.start(time);
		        return this;
		    };
		    /**
			 *  Stop the LFO. 
			 *  @param  {Time} [time=now] the time the LFO will stop
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.stop = function (time) {
		        time = this.toSeconds(time);
		        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);
		        this._oscillator.stop(time);
		        return this;
		    };
		    /**
			 *  Sync the start/stop/pause to the transport 
			 *  and the frequency to the bpm of the transport
			 *  @returns {Tone.LFO} this
			 *  @example
			 *  lfo.frequency.value = "8n";
			 *  lfo.sync().start(0)
			 *  //the rate of the LFO will always be an eighth note, 
			 *  //even as the tempo changes
			 */
		    Tone.LFO.prototype.sync = function () {
		        this._oscillator.sync();
		        this._oscillator.syncFrequency();
		        return this;
		    };
		    /**
			 *  unsync the LFO from transport control
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.unsync = function () {
		        this._oscillator.unsync();
		        this._oscillator.unsyncFrequency();
		        return this;
		    };
		    /**
			 * The miniumum output of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'min', {
		        get: function () {
		            return this._toUnits(this._scaler.min);
		        },
		        set: function (min) {
		            min = this._fromUnits(min);
		            this._scaler.min = min;
		        }
		    });
		    /**
			 * The maximum output of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'max', {
		        get: function () {
		            return this._toUnits(this._scaler.max);
		        },
		        set: function (max) {
		            max = this._fromUnits(max);
		            this._scaler.max = max;
		        }
		    });
		    /**
			 * The type of the oscillator: sine, square, sawtooth, triangle. 
			 * @memberOf Tone.LFO#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'type', {
		        get: function () {
		            return this._oscillator.type;
		        },
		        set: function (type) {
		            this._oscillator.type = type;
		            this._stoppedValue = this._oscillator._getInitialValue();
		            this._stoppedSignal.value = this._stoppedValue;
		        }
		    });
		    /**
			 * The phase of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'phase', {
		        get: function () {
		            return this._oscillator.phase;
		        },
		        set: function (phase) {
		            this._oscillator.phase = phase;
		            this._stoppedValue = this._oscillator._getInitialValue();
		            this._stoppedSignal.value = this._stoppedValue;
		        }
		    });
		    /**
			 * The output units of the LFO.
			 * @memberOf Tone.LFO#
			 * @type {Tone.Type}
			 * @name units
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'units', {
		        get: function () {
		            return this._units;
		        },
		        set: function (val) {
		            var currentMin = this.min;
		            var currentMax = this.max;
		            //convert the min and the max
		            this._units = val;
		            this.min = currentMin;
		            this.max = currentMax;
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.LFO#
			 * @type {Boolean}
			 * @name mute
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'mute', {
		        get: function () {
		            return this._oscillator.mute;
		        },
		        set: function (mute) {
		            this._oscillator.mute = mute;
		        }
		    });
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.LFO#
			 *  @name state
			 */
		    Object.defineProperty(Tone.LFO.prototype, 'state', {
		        get: function () {
		            return this._oscillator.state;
		        }
		    });
		    /**
			 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. 
			 *  Tone.LFO will automatically convert to the destination units of the 
			 *  will get the units from the connected node.
			 *  @param  {Tone | AudioParam | AudioNode} node 
			 *  @param {number} [outputNum=0] optionally which output to connect from
			 *  @param {number} [inputNum=0] optionally which input to connect to
			 *  @returns {Tone.LFO} this
			 *  @private
			 */
		    Tone.LFO.prototype.connect = function (node) {
		        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {
		            this.convert = node.convert;
		            this.units = node.units;
		        }
		        Tone.Signal.prototype.connect.apply(this, arguments);
		        return this;
		    };
		    /**
			 *  private method borrowed from Param converts 
			 *  units from their destination value
			 *  @function
			 *  @private
			 */
		    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;
		    /**
			 *  private method borrowed from Param converts 
			 *  units to their destination value
			 *  @function
			 *  @private
			 */
		    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;
		    /**
			 *  disconnect and dispose
			 *  @returns {Tone.LFO} this
			 */
		    Tone.LFO.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'amplitude',
		            'frequency'
		        ]);
		        this._oscillator.dispose();
		        this._oscillator = null;
		        this._stoppedSignal.dispose();
		        this._stoppedSignal = null;
		        this._zeros.dispose();
		        this._zeros = null;
		        this._scaler.dispose();
		        this._scaler = null;
		        this._a2g.dispose();
		        this._a2g = null;
		        this.frequency = null;
		        this.amplitude = null;
		        return this;
		    };
		    return Tone.LFO;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Limiter will limit the loudness of an incoming signal. 
			 *         It is composed of a Tone.Compressor with a fast attack 
			 *         and release. Limiters are commonly used to safeguard against 
			 *         signal clipping. Unlike a compressor, limiters do not provide 
			 *         smooth gain reduction and almost completely prevent 
			 *         additional gain above the threshold.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {number} threshold The theshold above which the limiting is applied. 
			 *  @example
			 *  var limiter = new Tone.Limiter(-6);
			 */
		    Tone.Limiter = function () {
		        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);
		        /**
				 *  the compressor
				 *  @private
				 *  @type {Tone.Compressor}
				 */
		        this._compressor = this.input = this.output = new Tone.Compressor({
		            'attack': 0.001,
		            'decay': 0.001,
		            'threshold': options.threshold
		        });
		        /**
				 * The threshold of of the limiter
				 * @type {Decibel}
				 * @signal
				 */
		        this.threshold = this._compressor.threshold;
		        this._readOnly('threshold');
		    };
		    Tone.extend(Tone.Limiter);
		    /**
			 *  The default value
			 *  @type {Object}
			 *  @const
			 *  @static
			 */
		    Tone.Limiter.defaults = { 'threshold': -12 };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Limiter} this
			 */
		    Tone.Limiter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._compressor.dispose();
		        this._compressor = null;
		        this._writable('threshold');
		        this.threshold = null;
		        return this;
		    };
		    return Tone.Limiter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to 
			 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Time|Object} [delayTime] The delay time of the comb filter
			 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
			 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
			 *                                signal as it is fedback. 
			 */
		    Tone.LowpassCombFilter = function () {
		        this.createInsOuts(1, 1);
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'resonance',
		            'dampening'
		        ], Tone.LowpassCombFilter.defaults);
		        /**
				 *  the delay node
				 *  @type {DelayNode}
				 *  @private
				 */
		        this._delay = this.input = new Tone.Delay(options.delayTime);
		        /**
				 *  The delayTime of the comb filter. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delay.delayTime;
		        /**
				 *  the lowpass filter
				 *  @type  {BiquadFilterNode}
				 *  @private
				 */
		        this._lowpass = this.output = this.context.createBiquadFilter();
		        this._lowpass.Q.value = -3.0102999566398125;
		        this._lowpass.type = 'lowpass';
		        /**
				 *  The dampening control of the feedback
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = new Tone.Param({
		            'param': this._lowpass.frequency,
		            'units': Tone.Type.Frequency,
		            'value': options.dampening
		        });
		        /**
				 *  the feedback gain
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
		        /**
				 *  The amount of feedback of the delayed signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._feedback.gain;
		        //connections
		        this._delay.chain(this._lowpass, this._feedback, this._delay);
		        this._readOnly([
		            'dampening',
		            'resonance',
		            'delayTime'
		        ]);
		    };
		    Tone.extend(Tone.LowpassCombFilter);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.LowpassCombFilter.defaults = {
		        'delayTime': 0.1,
		        'resonance': 0.5,
		        'dampening': 3000
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.LowpassCombFilter} this
			 */
		    Tone.LowpassCombFilter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'dampening',
		            'resonance',
		            'delayTime'
		        ]);
		        this.dampening.dispose();
		        this.dampening = null;
		        this.resonance.dispose();
		        this.resonance = null;
		        this._delay.dispose();
		        this._delay = null;
		        this.delayTime = null;
		        this._lowpass.disconnect();
		        this._lowpass = null;
		        this._feedback.disconnect();
		        this._feedback = null;
		        return this;
		    };
		    return Tone.LowpassCombFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Merge brings two signals into the left and right 
			 *          channels of a single stereo channel.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * var merge = new Tone.Merge().toMaster();
			 * //routing a sine tone in the left channel
			 * //and noise in the right channel
			 * var osc = new Tone.Oscillator().connect(merge.left);
			 * var noise = new Tone.Noise().connect(merge.right);
			 * //starting our oscillators
			 * noise.start();
			 * osc.start();
			 */
		    Tone.Merge = function () {
		        this.createInsOuts(2, 0);
		        /**
				 *  The left input channel.
				 *  Alias for <code>input[0]</code>
				 *  @type {GainNode}
				 */
		        this.left = this.input[0] = new Tone.Gain();
		        /**
				 *  The right input channel.
				 *  Alias for <code>input[1]</code>.
				 *  @type {GainNode}
				 */
		        this.right = this.input[1] = new Tone.Gain();
		        /**
				 *  the merger node for the two channels
				 *  @type {ChannelMergerNode}
				 *  @private
				 */
		        this._merger = this.output = this.context.createChannelMerger(2);
		        //connections
		        this.left.connect(this._merger, 0, 0);
		        this.right.connect(this._merger, 0, 1);
		        this.left.channelCount = 1;
		        this.right.channelCount = 1;
		        this.left.channelCountMode = 'explicit';
		        this.right.channelCountMode = 'explicit';
		    };
		    Tone.extend(Tone.Merge);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Merge} this
			 */
		    Tone.Merge.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.left.dispose();
		        this.left = null;
		        this.right.dispose();
		        this.right = null;
		        this._merger.disconnect();
		        this._merger = null;
		        return this;
		    };
		    return Tone.Merge;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
			 *          of an input signal with some averaging applied. It can also get the raw 
			 *          value of the input signal.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {String} type Either "level" or "signal". 
			 *  @param {Number} smoothing The amount of smoothing applied between frames.
			 *  @example
			 * var meter = new Tone.Meter();
			 * var mic = new Tone.Microphone().start();
			 * //connect mic to the meter
			 * mic.connect(meter);
			 * //the current level of the mic input
			 * var level = meter.value;
			 */
		    Tone.Meter = function () {
		        var options = this.optionsObject(arguments, [
		            'type',
		            'smoothing'
		        ], Tone.Meter.defaults);
		        /**
				 *  The type of the meter, either "level" or "signal". 
				 *  A "level" meter will return the volume level (rms) of the 
				 *  input signal and a "signal" meter will return
				 *  the signal value of the input. 
				 *  @type  {String}
				 */
		        this.type = options.type;
		        /**
				 *  The analyser node which computes the levels.
				 *  @private
				 *  @type  {Tone.Analyser}
				 */
		        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);
		        this._analyser.returnType = 'float';
		        /**
				 *  The amount of carryover between the current and last frame. 
				 *  Only applied meter for "level" type.
				 *  @type  {Number}
				 */
		        this.smoothing = options.smoothing;
		        /**
				 *  The last computed value
				 *  @type {Number}
				 *  @private
				 */
		        this._lastValue = 0;
		    };
		    Tone.extend(Tone.Meter);
		    /**
			 *  @private
			 *  @enum {String}
			 */
		    Tone.Meter.Type = {
		        Level: 'level',
		        Signal: 'signal'
		    };
		    /**
			 *  The defaults
			 *  @type {Object}
			 *  @static
			 *  @const
			 */
		    Tone.Meter.defaults = {
		        'smoothing': 0.8,
		        'type': Tone.Meter.Type.Level
		    };
		    /**
			 * The current value of the meter. A value of 1 is
			 * "unity".
			 * @memberOf Tone.Meter#
			 * @type {Number}
			 * @name value
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Meter.prototype, 'value', {
		        get: function () {
		            var signal = this._analyser.analyse();
		            if (this.type === Tone.Meter.Type.Level) {
		                //rms
		                var sum = 0;
		                for (var i = 0; i < signal.length; i++) {
		                    sum += Math.pow(signal[i], 2);
		                }
		                var rms = Math.sqrt(sum / signal.length);
		                //smooth it
		                rms = Math.max(rms, this._lastValue * this.smoothing);
		                this._lastValue = rms;
		                //scale it
		                var unity = 0.35;
		                var val = rms / unity;
		                //scale the output curve
		                return Math.sqrt(val);
		            } else {
		                return signal[0];
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Meter} this
			 */
		    Tone.Meter.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._analyser.dispose();
		        this._analyser = null;
		        return this;
		    };
		    return Tone.Meter;
		});
		Module(function (Tone) {
		    
		    /**
			 *	@class  Tone.Split splits an incoming signal into left and right channels.
			 *	
			 *  @constructor
			 *  @extends {Tone}
			 *  @example
			 * var split = new Tone.Split();
			 * stereoSignal.connect(split);
			 */
		    Tone.Split = function () {
		        this.createInsOuts(0, 2);
		        /** 
				 *  @type {ChannelSplitterNode}
				 *  @private
				 */
		        this._splitter = this.input = this.context.createChannelSplitter(2);
		        /** 
				 *  Left channel output. 
				 *  Alias for <code>output[0]</code>
				 *  @type {Tone.Gain}
				 */
		        this.left = this.output[0] = new Tone.Gain();
		        /**
				 *  Right channel output.
				 *  Alias for <code>output[1]</code>
				 *  @type {Tone.Gain}
				 */
		        this.right = this.output[1] = new Tone.Gain();
		        //connections
		        this._splitter.connect(this.left, 0, 0);
		        this._splitter.connect(this.right, 1, 0);
		    };
		    Tone.extend(Tone.Split);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Split} this
			 */
		    Tone.Split.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._splitter.disconnect();
		        this.left.dispose();
		        this.left = null;
		        this.right.dispose();
		        this.right = null;
		        this._splitter = null;
		        return this;
		    };
		    return Tone.Split;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels). <br><br>
			 *         <code>
			 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
			 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
			 *         </code>
			 *
			 *  @extends {Tone}
			 *  @constructor
			 */
		    Tone.MidSideSplit = function () {
		        this.createInsOuts(0, 2);
		        /**
				 *  split the incoming signal into left and right channels
				 *  @type  {Tone.Split}
				 *  @private
				 */
		        this._split = this.input = new Tone.Split();
		        /**
				 *  The mid send. Connect to mid processing. Alias for
				 *  <code>output[0]</code>
				 *  @type {Tone.Expr}
				 */
		        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');
		        /**
				 *  The side output. Connect to side processing. Alias for
				 *  <code>output[1]</code>
				 *  @type {Tone.Expr}
				 */
		        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');
		        this._split.connect(this.mid, 0, 0);
		        this._split.connect(this.mid, 1, 1);
		        this._split.connect(this.side, 0, 0);
		        this._split.connect(this.side, 1, 1);
		        sqrtTwo.connect(this.mid, 0, 2);
		        sqrtTwo.connect(this.side, 0, 2);
		    };
		    Tone.extend(Tone.MidSideSplit);
		    /**
			 *  a constant signal equal to 1 / sqrt(2)
			 *  @type {Number}
			 *  @signal
			 *  @private
			 *  @static
			 */
		    var sqrtTwo = null;
		    Tone._initAudioContext(function () {
		        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.MidSideSplit} this
			 */
		    Tone.MidSideSplit.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._split.dispose();
		        this._split = null;
		        return this;
		    };
		    return Tone.MidSideSplit;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels). 
			 *         MidSideMerge merges the mid and side signal after they've been seperated
			 *         by Tone.MidSideSplit.<br><br>
			 *         <code>
			 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
			 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
			 *         </code>
			 *
			 *  @extends {Tone.StereoEffect}
			 *  @constructor
			 */
		    Tone.MidSideMerge = function () {
		        this.createInsOuts(2, 0);
		        /**
				 *  The mid signal input. Alias for
				 *  <code>input[0]</code>
				 *  @type  {Tone.Gain}
				 */
		        this.mid = this.input[0] = new Tone.Gain();
		        /**
				 *  recombine the mid/side into Left
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._left = new Tone.Expr('($0 + $1) * $2');
		        /**
				 *  The side signal input. Alias for
				 *  <code>input[1]</code>
				 *  @type  {Tone.Gain}
				 */
		        this.side = this.input[1] = new Tone.Gain();
		        /**
				 *  recombine the mid/side into Right
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._right = new Tone.Expr('($0 - $1) * $2');
		        /**
				 *  Merge the left/right signal back into a stereo signal.
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = this.output = new Tone.Merge();
		        this.mid.connect(this._left, 0, 0);
		        this.side.connect(this._left, 0, 1);
		        this.mid.connect(this._right, 0, 0);
		        this.side.connect(this._right, 0, 1);
		        this._left.connect(this._merge, 0, 0);
		        this._right.connect(this._merge, 0, 1);
		        sqrtTwo.connect(this._left, 0, 2);
		        sqrtTwo.connect(this._right, 0, 2);
		    };
		    Tone.extend(Tone.MidSideMerge);
		    /**
			 *  A constant signal equal to 1 / sqrt(2).
			 *  @type {Number}
			 *  @signal
			 *  @private
			 *  @static
			 */
		    var sqrtTwo = null;
		    Tone._initAudioContext(function () {
		        sqrtTwo = new Tone.Signal(1 / Math.sqrt(2));
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.MidSideMerge} this
			 */
		    Tone.MidSideMerge.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._left.dispose();
		        this._left = null;
		        this._right.dispose();
		        this._right = null;
		        this._merge.dispose();
		        this._merge = null;
		        return this;
		    };
		    return Tone.MidSideMerge;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.MidSideCompressor applies two different compressors to the mid
			 *         and side signal components. See Tone.MidSideSplit. 
			 *
			 *  @extends {Tone}
			 *  @param {Object} options The options that are passed to the mid and side
			 *                          compressors. 
			 *  @constructor
			 */
		    Tone.MidSideCompressor = function (options) {
		        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);
		        /**
				 *  the mid/side split
				 *  @type  {Tone.MidSideSplit}
				 *  @private
				 */
		        this._midSideSplit = this.input = new Tone.MidSideSplit();
		        /**
				 *  the mid/side recombination
				 *  @type  {Tone.MidSideMerge}
				 *  @private
				 */
		        this._midSideMerge = this.output = new Tone.MidSideMerge();
		        /**
				 *  The compressor applied to the mid signal
				 *  @type  {Tone.Compressor}
				 */
		        this.mid = new Tone.Compressor(options.mid);
		        /**
				 *  The compressor applied to the side signal
				 *  @type  {Tone.Compressor}
				 */
		        this.side = new Tone.Compressor(options.side);
		        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);
		        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);
		        this._readOnly([
		            'mid',
		            'side'
		        ]);
		    };
		    Tone.extend(Tone.MidSideCompressor);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MidSideCompressor.defaults = {
		        'mid': {
		            'ratio': 3,
		            'threshold': -24,
		            'release': 0.03,
		            'attack': 0.02,
		            'knee': 16
		        },
		        'side': {
		            'ratio': 6,
		            'threshold': -30,
		            'release': 0.25,
		            'attack': 0.03,
		            'knee': 10
		        }
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MidSideCompressor} this
			 */
		    Tone.MidSideCompressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'mid',
		            'side'
		        ]);
		        this.mid.dispose();
		        this.mid = null;
		        this.side.dispose();
		        this.side = null;
		        this._midSideSplit.dispose();
		        this._midSideSplit = null;
		        this._midSideMerge.dispose();
		        this._midSideMerge = null;
		        return this;
		    };
		    return Tone.MidSideCompressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
			 *         where both left and right channels have the same value. This can be useful 
			 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
			 *
			 *  @extends {Tone}
			 *  @constructor
			 */
		    Tone.Mono = function () {
		        this.createInsOuts(1, 0);
		        /**
				 *  merge the signal
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = this.output = new Tone.Merge();
		        this.input.connect(this._merge, 0, 0);
		        this.input.connect(this._merge, 0, 1);
		        this.input.gain.value = this.dbToGain(-10);
		    };
		    Tone.extend(Tone.Mono);
		    /**
			 *  clean up
			 *  @returns {Tone.Mono} this
			 */
		    Tone.Mono.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._merge.dispose();
		        this._merge = null;
		        return this;
		    };
		    return Tone.Mono;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A compressor with seperate controls over low/mid/high dynamics
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {Object} options The low/mid/high compressor settings.
			 *  @example
			 *  var multiband = new Tone.MultibandCompressor({
			 *  	"lowFrequency" : 200,
			 *  	"highFrequency" : 1300
			 *  	"low" : {
			 *  		"threshold" : -12
			 *  	}
			 *  })
			 */
		    Tone.MultibandCompressor = function (options) {
		        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);
		        /**
				 *  split the incoming signal into high/mid/low
				 *  @type {Tone.MultibandSplit}
				 *  @private
				 */
		        this._splitter = this.input = new Tone.MultibandSplit({
		            'lowFrequency': options.lowFrequency,
		            'highFrequency': options.highFrequency
		        });
		        /**
				 *  low/mid crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.lowFrequency = this._splitter.lowFrequency;
		        /**
				 *  mid/high crossover frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.highFrequency = this._splitter.highFrequency;
		        /**
				 *  the output
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.output = new Tone.Gain();
		        /**
				 *  The compressor applied to the low frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.low = new Tone.Compressor(options.low);
		        /**
				 *  The compressor applied to the mid frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.mid = new Tone.Compressor(options.mid);
		        /**
				 *  The compressor applied to the high frequencies.
				 *  @type {Tone.Compressor}
				 */
		        this.high = new Tone.Compressor(options.high);
		        //connect the compressor
		        this._splitter.low.chain(this.low, this.output);
		        this._splitter.mid.chain(this.mid, this.output);
		        this._splitter.high.chain(this.high, this.output);
		        this._readOnly([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		    };
		    Tone.extend(Tone.MultibandCompressor);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MultibandCompressor.defaults = {
		        'low': Tone.Compressor.defaults,
		        'mid': Tone.Compressor.defaults,
		        'high': Tone.Compressor.defaults,
		        'lowFrequency': 250,
		        'highFrequency': 2000
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.MultibandCompressor} this
			 */
		    Tone.MultibandCompressor.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._splitter.dispose();
		        this._writable([
		            'high',
		            'mid',
		            'low',
		            'highFrequency',
		            'lowFrequency'
		        ]);
		        this.low.dispose();
		        this.mid.dispose();
		        this.high.dispose();
		        this._splitter = null;
		        this.low = null;
		        this.mid = null;
		        this.high = null;
		        this.lowFrequency = null;
		        this.highFrequency = null;
		        return this;
		    };
		    return Tone.MultibandCompressor;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
			 *          support 3D. Panner uses the StereoPannerNode when available. 
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)
			 *  @example
			 *  //pan the input signal hard right. 
			 *  var panner = new Tone.Panner(1);
			 */
		    Tone.Panner = function (initialPan) {
		        if (this._hasStereoPanner) {
		            /**
					 *  the panner node
					 *  @type {StereoPannerNode}
					 *  @private
					 */
		            this._panner = this.input = this.output = this.context.createStereoPanner();
		            /**
					 *  The pan control. -1 = hard left, 1 = hard right. 
					 *  @type {NormalRange}
					 *  @signal
					 */
		            this.pan = this._panner.pan;
		        } else {
		            /**
					 *  the dry/wet knob
					 *  @type {Tone.CrossFade}
					 *  @private
					 */
		            this._crossFade = new Tone.CrossFade();
		            /**
					 *  @type {Tone.Merge}
					 *  @private
					 */
		            this._merger = this.output = new Tone.Merge();
		            /**
					 *  @type {Tone.Split}
					 *  @private
					 */
		            this._splitter = this.input = new Tone.Split();
		            /**
					 *  The pan control. -1 = hard left, 1 = hard right. 
					 *  @type {AudioRange}
					 *  @signal
					 */
		            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);
		            /**
					 *  always sends 0
					 *  @type {Tone.Zero}
					 *  @private
					 */
		            this._zero = new Tone.Zero();
		            /**
					 *  The analog to gain conversion
					 *  @type  {Tone.AudioToGain}
					 *  @private
					 */
		            this._a2g = new Tone.AudioToGain();
		            //CONNECTIONS:
		            this._zero.connect(this._a2g);
		            this.pan.chain(this._a2g, this._crossFade.fade);
		            //left channel is a, right channel is b
		            this._splitter.connect(this._crossFade, 0, 0);
		            this._splitter.connect(this._crossFade, 1, 1);
		            //merge it back together
		            this._crossFade.a.connect(this._merger, 0, 0);
		            this._crossFade.b.connect(this._merger, 0, 1);
		        }
		        //initial value
		        this.pan.value = this.defaultArg(initialPan, 0);
		        this._readOnly('pan');
		    };
		    Tone.extend(Tone.Panner);
		    /**
			 *  indicates if the panner is using the new StereoPannerNode internally
			 *  @type  {boolean}
			 *  @private
			 */
		    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);
		    /**
			 *  Clean up.
			 *  @returns {Tone.Panner} this
			 */
		    Tone.Panner.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable('pan');
		        if (this._hasStereoPanner) {
		            this._panner.disconnect();
		            this._panner = null;
		            this.pan = null;
		        } else {
		            this._zero.dispose();
		            this._zero = null;
		            this._crossFade.dispose();
		            this._crossFade = null;
		            this._splitter.dispose();
		            this._splitter = null;
		            this._merger.dispose();
		            this._merger = null;
		            this.pan.dispose();
		            this.pan = null;
		            this._a2g.dispose();
		            this._a2g = null;
		        }
		        return this;
		    };
		    return Tone.Panner;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
			 *          Tries to normalize the API across various browsers. See Tone.Listener
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {Number} positionX The initial x position.
			 *  @param {Number} positionY The initial y position.
			 *  @param {Number} positionZ The initial z position.
			 */
		    Tone.Panner3D = function () {
		        var options = this.optionsObject(arguments, [
		            'positionX',
		            'positionY',
		            'positionZ'
		        ], Tone.Panner3D.defaults);
		        /**
				 *  The panner node
				 *  @type {PannerNode}
				 *  @private
				 */
		        this._panner = this.input = this.output = this.context.createPanner();
		        //set some values
		        this._panner.panningModel = options.panningModel;
		        this._panner.maxDistance = options.maxDistance;
		        this._panner.distanceModel = options.distanceModel;
		        this._panner.coneOuterGain = options.coneOuterGain;
		        this._panner.coneOuterAngle = options.coneOuterAngle;
		        this._panner.coneInnerAngle = options.coneInnerAngle;
		        this._panner.refDistance = options.refDistance;
		        this._panner.rolloffFactor = options.rolloffFactor;
		        /**
				 *  Holds the current orientation
				 *  @type  {Array}
				 *  @private
				 */
		        this._orientation = [
		            options.orientationX,
		            options.orientationY,
		            options.orientationZ
		        ];
		        /**
				 *  Holds the current position
				 *  @type  {Array}
				 *  @private
				 */
		        this._position = [
		            options.positionX,
		            options.positionY,
		            options.positionZ
		        ];
		        // set the default position/orientation
		        this.orientationX = options.orientationX;
		        this.orientationY = options.orientationY;
		        this.orientationZ = options.orientationZ;
		        this.positionX = options.positionX;
		        this.positionY = options.positionY;
		        this.positionZ = options.positionZ;
		    };
		    Tone.extend(Tone.Panner3D);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 *  Defaults according to the specification
			 */
		    Tone.Panner3D.defaults = {
		        'positionX': 0,
		        'positionY': 0,
		        'positionZ': 0,
		        'orientationX': 0,
		        'orientationY': 0,
		        'orientationZ': 0,
		        'panningModel': 'equalpower',
		        'maxDistance': 10000,
		        'distanceModel': 'inverse',
		        'coneOuterGain': 0,
		        'coneOuterAngle': 360,
		        'coneInnerAngle': 360,
		        'refDistance': 1,
		        'rolloffFactor': 1
		    };
		    Tone.Panner3D.prototype._rampTimeConstant = 0.3;
		    /**
			 *  Sets the position of the source in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.setPosition = function (x, y, z) {
		        if (this._panner.positionX) {
		            var now = this.now();
		            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._panner.setPosition(x, y, z);
		        }
		        this._position = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  Sets the orientation of the source in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {
		        if (this._panner.orientationX) {
		            var now = this.now();
		            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._panner.setOrientation(x, y, z);
		        }
		        this._orientation = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  The x position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionX
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {
		        set: function (pos) {
		            this._position[0] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[0];
		        }
		    });
		    /**
			 *  The y position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionY
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {
		        set: function (pos) {
		            this._position[1] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[1];
		        }
		    });
		    /**
			 *  The z position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name positionZ
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {
		        set: function (pos) {
		            this._position[2] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[2];
		        }
		    });
		    /**
			 *  The x orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationX
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {
		        set: function (pos) {
		            this._orientation[0] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[0];
		        }
		    });
		    /**
			 *  The y orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationY
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {
		        set: function (pos) {
		            this._orientation[1] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[1];
		        }
		    });
		    /**
			 *  The z orientation of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name orientationZ
			 */
		    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {
		        set: function (pos) {
		            this._orientation[2] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[2];
		        }
		    });
		    /**
			 *  Proxy a property on the panner to an exposed public propery
			 *  @param  {String}  prop
			 *  @private
			 */
		    Tone.Panner3D._aliasProperty = function (prop) {
		        Object.defineProperty(Tone.Panner3D.prototype, prop, {
		            set: function (val) {
		                this._panner[prop] = val;
		            },
		            get: function () {
		                return this._panner[prop];
		            }
		        });
		    };
		    /**
			 *  The panning model. Either "equalpower" or "HRTF".
			 *  @type {String}
			 *  @memberOf Tone.Panner3D#
			 *  @name panningModel
			 */
		    Tone.Panner3D._aliasProperty('panningModel');
		    /**
			 *  A reference distance for reducing volume as source move further from the listener
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name refDistance
			 */
		    Tone.Panner3D._aliasProperty('refDistance');
		    /**
			 *  Describes how quickly the volume is reduced as source moves away from listener.
			 *  @type {Number}
			 *  @memberOf Tone.Panner3D#
			 *  @name rolloffFactor
			 */
		    Tone.Panner3D._aliasProperty('rolloffFactor');
		    /**
			 *  The distance model used by,  "linear", "inverse", or "exponential".
			 *  @type {String}
			 *  @memberOf Tone.Panner3D#
			 *  @name distanceModel
			 */
		    Tone.Panner3D._aliasProperty('distanceModel');
		    /**
			 *  The angle, in degrees, inside of which there will be no volume reduction
			 *  @type {Degrees}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneInnerAngle
			 */
		    Tone.Panner3D._aliasProperty('coneInnerAngle');
		    /**
			 *  The angle, in degrees, outside of which the volume will be reduced 
			 *  to a constant value of coneOuterGain
			 *  @type {Degrees}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneOuterAngle
			 */
		    Tone.Panner3D._aliasProperty('coneOuterAngle');
		    /**
			 *  The gain outside of the coneOuterAngle
			 *  @type {Gain}
			 *  @memberOf Tone.Panner3D#
			 *  @name coneOuterGain
			 */
		    Tone.Panner3D._aliasProperty('coneOuterGain');
		    /**
			 *  The maximum distance between source and listener, 
			 *  after which the volume will not be reduced any further.
			 *  @type {Positive}
			 *  @memberOf Tone.Panner3D#
			 *  @name maxDistance
			 */
		    Tone.Panner3D._aliasProperty('maxDistance');
		    /**
			 *  Clean up.
			 *  @returns {Tone.Panner3D} this
			 */
		    Tone.Panner3D.prototype.dispose = function () {
		        this._panner.disconnect();
		        this._panner = null;
		        this._orientation = null;
		        this._position = null;
		        return this;
		    };
		    return Tone.Panner3D;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
			 *
			 *  @extends {Tone}
			 *  @constructor
			 *  @param {AudioRange} pan the initial pan
			 *  @param {number} volume The output volume. 
			 *  @example
			 * //pan the incoming signal left and drop the volume
			 * var panVol = new Tone.PanVol(0.25, -12);
			 */
		    Tone.PanVol = function () {
		        var options = this.optionsObject(arguments, [
		            'pan',
		            'volume'
		        ], Tone.PanVol.defaults);
		        /**
				 *  The panning node
				 *  @type {Tone.Panner}
				 *  @private
				 */
		        this._panner = this.input = new Tone.Panner(options.pan);
		        /**
				 *  The L/R panning control.
				 *  @type {AudioRange}
				 *  @signal
				 */
		        this.pan = this._panner.pan;
		        /**
				 *  The volume node
				 *  @type {Tone.Volume}
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 *  The volume control in decibels. 
				 *  @type {Decibels}
				 *  @signal
				 */
		        this.volume = this._volume.volume;
		        //connections
		        this._panner.connect(this._volume);
		        this._readOnly([
		            'pan',
		            'volume'
		        ]);
		    };
		    Tone.extend(Tone.PanVol);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 *  @const
			 *  @static
			 */
		    Tone.PanVol.defaults = {
		        'pan': 0.5,
		        'volume': 0
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.PanVol} this
			 */
		    Tone.PanVol.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._writable([
		            'pan',
		            'volume'
		        ]);
		        this._panner.dispose();
		        this._panner = null;
		        this.pan = null;
		        this._volume.dispose();
		        this._volume = null;
		        this.volume = null;
		        return this;
		    };
		    return Tone.PanVol;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.CtrlInterpolate will interpolate between given values based
			 *         on the "index" property. Passing in an array or object literal
			 *         will interpolate each of the parameters. Note (i.e. "C3")
			 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
			 *         assumed to be numbers. 
			 *  @example
			 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
			 * interp.index = 0.75;
			 * interp.value; //returns 1.5
			 *
			 *  @example
			 * var interp = new Tone.CtrlInterpolate([
			 * 	[2, 4, 5],
			 * 	[9, 3, 2],
			 * ]);
			 * @param {Array} values The array of values to interpolate over
			 * @param {Positive} index The initial interpolation index.
			 * @extends {Tone}
			 */
		    Tone.CtrlInterpolate = function () {
		        var options = this.optionsObject(arguments, [
		            'values',
		            'index'
		        ], Tone.CtrlInterpolate.defaults);
		        /**
				 *  The values to interpolate between
				 *  @type  {Array}
				 */
		        this.values = options.values;
		        /**
				 *  The interpolated index between values. For example: a value of 1.5
				 *  would interpolate equally between the value at index 1
				 *  and the value at index 2. 
				 *  @example
				 * interp.index = 0; 
				 * interp.value; //returns the value at 0
				 * interp.index = 0.5;
				 * interp.value; //returns the value between indices 0 and 1. 
				 *  @type  {Positive}
				 */
		        this.index = options.index;
		    };
		    Tone.extend(Tone.CtrlInterpolate);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.CtrlInterpolate.defaults = {
		        'index': 0,
		        'values': []
		    };
		    /**
			 *  The current interpolated value based on the index
			 *  @readOnly
			 *  @memberOf Tone.CtrlInterpolate#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {
		        get: function () {
		            var index = this.index;
		            index = Math.min(index, this.values.length - 1);
		            var lowerPosition = Math.floor(index);
		            var lower = this.values[lowerPosition];
		            var upper = this.values[Math.ceil(index)];
		            return this._interpolate(index - lowerPosition, lower, upper);
		        }
		    });
		    /**
			 *  Internal interpolation routine
			 *  @param  {NormalRange}  index  The index between the lower and upper
			 *  @param  {*}  lower 
			 *  @param  {*}  upper 
			 *  @return  {*}  The interpolated value
			 *  @private
			 */
		    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {
		        if (this.isArray(lower)) {
		            var retArray = [];
		            for (var i = 0; i < lower.length; i++) {
		                retArray[i] = this._interpolate(index, lower[i], upper[i]);
		            }
		            return retArray;
		        } else if (this.isObject(lower)) {
		            var retObj = {};
		            for (var attr in lower) {
		                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);
		            }
		            return retObj;
		        } else {
		            lower = this._toNumber(lower);
		            upper = this._toNumber(upper);
		            return (1 - index) * lower + index * upper;
		        }
		    };
		    /**
			 *  Convert from the given type into a number
			 *  @param  {Number|String}  value
			 *  @return  {Number}
			 *  @private
			 */
		    Tone.CtrlInterpolate.prototype._toNumber = function (val) {
		        if (this.isNumber(val)) {
		            return val;
		        } else {
		            //otherwise assume that it's Time...
		            return this.toSeconds(val);
		        }
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.CtrlInterpolate}  this
			 */
		    Tone.CtrlInterpolate.prototype.dispose = function () {
		        this.values = null;
		    };
		    return Tone.CtrlInterpolate;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
			 *         to Tone.CtrlMarkov.next will move to the next state. If the next
			 *         state choice is an array, the next state is chosen randomly with
			 *         even probability for all of the choices. For a weighted probability
			 *         of the next choices, pass in an object with "state" and "probability" attributes. 
			 *         The probabilities will be normalized and then chosen. If no next options
			 *         are given for the current state, the state will stay there. 
			 *  @extends {Tone}
			 *  @example
			 * var chain = new Tone.CtrlMarkov({
			 * 	"beginning" : ["end", "middle"],
			 * 	"middle" : "end"
			 * });
			 * chain.value = "beginning";
			 * chain.next(); //returns "end" or "middle" with 50% probability
			 *
			 *  @example
			 * var chain = new Tone.CtrlMarkov({
			 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
			 * 					{"value" : "middle", "probability" : 0.2}],
			 * 	"middle" : "end"
			 * });
			 * chain.value = "beginning";
			 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
			 *  @param {Object} values An object with the state names as the keys
			 *                         and the next state(s) as the values. 
			 */
		    Tone.CtrlMarkov = function (values, initial) {
		        /**
				 *  The Markov values with states as the keys
				 *  and next state(s) as the values. 
				 *  @type {Object}
				 */
		        this.values = this.defaultArg(values, {});
		        /**
				 *  The current state of the Markov values. The next
				 *  state will be evaluated and returned when Tone.CtrlMarkov.next
				 *  is invoked.
				 *  @type {String}
				 */
		        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);
		    };
		    Tone.extend(Tone.CtrlMarkov);
		    /**
			 *  Returns the next state of the Markov values. 
			 *  @return  {String}
			 */
		    Tone.CtrlMarkov.prototype.next = function () {
		        if (this.values.hasOwnProperty(this.value)) {
		            var next = this.values[this.value];
		            if (this.isArray(next)) {
		                var distribution = this._getProbDistribution(next);
		                var rand = Math.random();
		                var total = 0;
		                for (var i = 0; i < distribution.length; i++) {
		                    var dist = distribution[i];
		                    if (rand > total && rand < total + dist) {
		                        var chosen = next[i];
		                        if (this.isObject(chosen)) {
		                            this.value = chosen.value;
		                        } else {
		                            this.value = chosen;
		                        }
		                    }
		                    total += dist;
		                }
		            } else {
		                this.value = next;
		            }
		        }
		        return this.value;
		    };
		    /**
			 *  Choose randomly from an array weighted options in the form 
			 *  {"state" : string, "probability" : number} or an array of values
			 *  @param  {Array}  options 
			 *  @return  {Array}  The randomly selected choice
			 *  @private
			 */
		    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {
		        var distribution = [];
		        var total = 0;
		        var needsNormalizing = false;
		        for (var i = 0; i < options.length; i++) {
		            var option = options[i];
		            if (this.isObject(option)) {
		                needsNormalizing = true;
		                distribution[i] = option.probability;
		            } else {
		                distribution[i] = 1 / options.length;
		            }
		            total += distribution[i];
		        }
		        if (needsNormalizing) {
		            //normalize the values
		            for (var j = 0; j < distribution.length; j++) {
		                distribution[j] = distribution[j] / total;
		            }
		        }
		        return distribution;
		    };
		    /**
			 *  Clean up
			 *  @return  {Tone.CtrlMarkov}  this
			 */
		    Tone.CtrlMarkov.prototype.dispose = function () {
		        this.values = null;
		    };
		    return Tone.CtrlMarkov;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Generate patterns from an array of values.
			 *         Has a number of arpeggiation and randomized
			 *         selection patterns. 
			 *           <ul>
			 *  	        <li>"up" - cycles upward</li>
			 *  			<li>"down" - cycles downward</li>
			 *  			<li>"upDown" - up then and down</li>
			 *  			<li>"downUp" - cycles down then and up</li>
			 *  			<li>"alternateUp" - jump up two and down one</li>
			 *  			<li>"alternateDown" - jump down two and up one</li>
			 *  			<li>"random" - randomly select an index</li>
			 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
			 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
			 *     		</ul>
			 *  @param  {Array}  values   An array of options to choose from.
			 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
			 *  @extends {Tone}
			 */
		    Tone.CtrlPattern = function () {
		        var options = this.optionsObject(arguments, [
		            'values',
		            'type'
		        ], Tone.CtrlPattern.defaults);
		        /**
				 *  The array of values to arpeggiate over
				 *  @type {Array}
				 */
		        this.values = options.values;
		        /**
				 *  The current position in the values array
				 *  @type  {Number}
				 */
		        this.index = 0;
		        /**
				 *  The type placeholder
				 *  @type {Tone.CtrlPattern.Type}
				 *  @private
				 */
		        this._type = null;
		        /**
				 *  Shuffled values for the RandomOnce type
				 *  @type {Array}
				 *  @private
				 */
		        this._shuffled = null;
		        /**
				 *  The direction of the movement
				 *  @type {String}
				 *  @private
				 */
		        this._direction = null;
		        this.type = options.type;
		    };
		    Tone.extend(Tone.CtrlPattern);
		    /**
			 *  The Control Patterns
			 *  @type  {Object}
			 *  @static
			 */
		    Tone.CtrlPattern.Type = {
		        Up: 'up',
		        Down: 'down',
		        UpDown: 'upDown',
		        DownUp: 'downUp',
		        AlternateUp: 'alternateUp',
		        AlternateDown: 'alternateDown',
		        Random: 'random',
		        RandomWalk: 'randomWalk',
		        RandomOnce: 'randomOnce'
		    };
		    /**
			 *  The default values. 
			 *  @type  {Object}
			 */
		    Tone.CtrlPattern.defaults = {
		        'type': Tone.CtrlPattern.Type.Up,
		        'values': []
		    };
		    /**
			 *  The value at the current index of the pattern.
			 *  @readOnly
			 *  @memberOf Tone.CtrlPattern#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {
		        get: function () {
		            //some safeguards
		            if (this.values.length === 0) {
		                return;
		            } else if (this.values.length === 1) {
		                return this.values[0];
		            }
		            this.index = Math.min(this.index, this.values.length - 1);
		            var val = this.values[this.index];
		            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {
		                if (this.values.length !== this._shuffled.length) {
		                    this._shuffleValues();
		                }
		                val = this.values[this._shuffled[this.index]];
		            }
		            return val;
		        }
		    });
		    /**
			 *  The pattern used to select the next
			 *  item from the values array
			 *  @memberOf Tone.CtrlPattern#
			 *  @type {Tone.CtrlPattern.Type}
			 *  @name type
			 */
		    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            this._type = type;
		            this._shuffled = null;
		            //the first index
		            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {
		                this.index = 0;
		            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
		                this.index = this.values.length - 1;
		            }
		            //the direction
		            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {
		                this._direction = Tone.CtrlPattern.Type.Up;
		            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		            //randoms
		            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {
		                this._shuffleValues();
		            } else if (this._type === Tone.CtrlPattern.Random) {
		                this.index = Math.floor(Math.random() * this.values.length);
		            }
		        }
		    });
		    /**
			 *  Return the next value given the current position
			 *  and pattern.
			 *  @return {*} The next value
			 */
		    Tone.CtrlPattern.prototype.next = function () {
		        var type = this.type;
		        //choose the next index
		        if (type === Tone.CtrlPattern.Type.Up) {
		            this.index++;
		            if (this.index >= this.values.length) {
		                this.index = 0;
		            }
		        } else if (type === Tone.CtrlPattern.Type.Down) {
		            this.index--;
		            if (this.index < 0) {
		                this.index = this.values.length - 1;
		            }
		        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index++;
		            } else {
		                this.index--;
		            }
		            if (this.index < 0) {
		                this.index = 1;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            } else if (this.index >= this.values.length) {
		                this.index = this.values.length - 2;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		        } else if (type === Tone.CtrlPattern.Type.Random) {
		            this.index = Math.floor(Math.random() * this.values.length);
		        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {
		            if (Math.random() < 0.5) {
		                this.index--;
		                this.index = Math.max(this.index, 0);
		            } else {
		                this.index++;
		                this.index = Math.min(this.index, this.values.length - 1);
		            }
		        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {
		            this.index++;
		            if (this.index >= this.values.length) {
		                this.index = 0;
		                //reshuffle the values for next time
		                this._shuffleValues();
		            }
		        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index += 2;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            } else {
		                this.index -= 1;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		            if (this.index >= this.values.length) {
		                this.index = 0;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {
		            if (this._direction === Tone.CtrlPattern.Type.Up) {
		                this.index += 1;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            } else {
		                this.index -= 2;
		                this._direction = Tone.CtrlPattern.Type.Up;
		            }
		            if (this.index < 0) {
		                this.index = this.values.length - 1;
		                this._direction = Tone.CtrlPattern.Type.Down;
		            }
		        }
		        return this.value;
		    };
		    /**
			 *  Shuffles the values and places the results into the _shuffled
			 *  @private
			 */
		    Tone.CtrlPattern.prototype._shuffleValues = function () {
		        var copy = [];
		        this._shuffled = [];
		        for (var i = 0; i < this.values.length; i++) {
		            copy[i] = i;
		        }
		        while (copy.length > 0) {
		            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
		            this._shuffled.push(randVal[0]);
		        }
		    };
		    /**
			 *  Clean up
			 *  @returns {Tone.CtrlPattern} this
			 */
		    Tone.CtrlPattern.prototype.dispose = function () {
		        this._shuffled = null;
		        this.values = null;
		    };
		    return Tone.CtrlPattern;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Choose a random value.
			 *  @extends {Tone}
			 *  @example
			 * var randomWalk = new Tone.CtrlRandom({
			 * 	"min" : 0,
			 * 	"max" : 10,
			 * 	"integer" : true
			 * });
			 * randomWalk.eval();
			 *
			 *  @param {Number|Time=} min The minimum return value.
			 *  @param {Number|Time=} max The maximum return value.
			 */
		    Tone.CtrlRandom = function () {
		        var options = this.optionsObject(arguments, [
		            'min',
		            'max'
		        ], Tone.CtrlRandom.defaults);
		        /**
				 *  The minimum return value
				 *  @type  {Number|Time}
				 */
		        this.min = options.min;
		        /**
				 *  The maximum return value
				 *  @type  {Number|Time}
				 */
		        this.max = options.max;
		        /**
				 *  If the return value should be an integer
				 *  @type  {Boolean}
				 */
		        this.integer = options.integer;
		    };
		    Tone.extend(Tone.CtrlRandom);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.CtrlRandom.defaults = {
		        'min': 0,
		        'max': 1,
		        'integer': false
		    };
		    /**
			 *  Return a random value between min and max. 
			 *  @readOnly
			 *  @memberOf Tone.CtrlRandom#
			 *  @type {*}
			 *  @name value
			 */
		    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {
		        get: function () {
		            var min = this.toSeconds(this.min);
		            var max = this.toSeconds(this.max);
		            var rand = Math.random();
		            var val = rand * min + (1 - rand) * max;
		            if (this.integer) {
		                val = Math.floor(val);
		            }
		            return val;
		        }
		    });
		    return Tone.CtrlRandom;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all 
			 *          classes that make requests for audio files such as Tone.Player,
			 *          Tone.Sampler and Tone.Convolver.
			 *          <br><br>
			 *          Aside from load callbacks from individual buffers, Tone.Buffer 
			 *  		provides static methods which keep track of the loading progress 
			 *  		of all of the buffers. These methods are Tone.Buffer.on("load" / "progress" / "error")
			 *
			 *  @constructor 
			 *  @extends {Tone}
			 *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. 
			 *  @param {Function=} onload A callback which is invoked after the buffer is loaded. 
			 *                            It's recommended to use Tone.Buffer.onload instead 
			 *                            since it will give you a callback when ALL buffers are loaded.
			 *  @param {Function=} onerror The callback to invoke if there is an error
			 *  @example
			 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
			 * 	//the buffer is now available.
			 * 	var buff = buffer.get();
			 * });
			 */
		    Tone.Buffer = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload',
		            'onerror'
		        ], Tone.Buffer.defaults);
		        /**
				 *  stores the loaded AudioBuffer
				 *  @type {AudioBuffer}
				 *  @private
				 */
		        this._buffer = null;
		        /**
				 *  indicates if the buffer should be reversed or not
				 *  @type {Boolean}
				 *  @private
				 */
		        this._reversed = options.reverse;
		        /**
				 *  The XHR
				 *  @type  {XMLHttpRequest}
				 *  @private
				 */
		        this._xhr = null;
		        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {
		            this.set(options.url);
		            // invoke the onload callback
		            if (options.onload) {
		                options.onload(this);
		            }
		        } else if (this.isString(options.url)) {
		            this.load(options.url, options.onload, options.onerror);
		        }
		    };
		    Tone.extend(Tone.Buffer);
		    /**
			 *  the default parameters
			 *  @type {Object}
			 */
		    Tone.Buffer.defaults = {
		        'url': undefined,
		        'reverse': false
		    };
		    /**
			 *  Pass in an AudioBuffer or Tone.Buffer to set the value
			 *  of this buffer.
			 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
			 *  @returns {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.set = function (buffer) {
		        if (buffer instanceof Tone.Buffer) {
		            this._buffer = buffer.get();
		        } else {
		            this._buffer = buffer;
		        }
		        return this;
		    };
		    /**
			 *  @return {AudioBuffer} The audio buffer stored in the object.
			 */
		    Tone.Buffer.prototype.get = function () {
		        return this._buffer;
		    };
		    /**
			 *  Makes an xhr reqest for the selected url then decodes
			 *  the file as an audio buffer. Invokes
			 *  the callback once the audio buffer loads.
			 *  @param {String} url The url of the buffer to load.
			 *                      filetype support depends on the
			 *                      browser.
			 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
			 */
		    Tone.Buffer.prototype.load = function (url, onload, onerror) {
		        var promise = new Promise(function (load, error) {
		            this._xhr = Tone.Buffer.load(url, //success
		            function (buff) {
		                this._xhr = null;
		                this.set(buff);
		                load(this);
		                if (onload) {
		                    onload(this);
		                }
		            }.bind(this), //error
		            function (err) {
		                this._xhr = null;
		                error(err);
		                if (onerror) {
		                    onerror(err);
		                }
		            }.bind(this));
		        }.bind(this));
		        return promise;
		    };
		    /**
			 *  dispose and disconnect
			 *  @returns {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.dispose = function () {
		        Tone.Emitter.prototype.dispose.call(this);
		        this._buffer = null;
		        if (this._xhr) {
		            Tone.Buffer._currentDownloads--;
		            this._xhr.abort();
		            this._xhr = null;
		        }
		        return this;
		    };
		    /**
			 * If the buffer is loaded or not
			 * @memberOf Tone.Buffer#
			 * @type {Boolean}
			 * @name loaded
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {
		        get: function () {
		            return this.length > 0;
		        }
		    });
		    /**
			 * The duration of the buffer. 
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name duration
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'duration', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.duration;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 * The length of the buffer in samples
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name length
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'length', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.length;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 * The number of discrete audio channels. Returns 0 if no buffer
			 * is loaded.
			 * @memberOf Tone.Buffer#
			 * @type {Number}
			 * @name numberOfChannels
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {
		        get: function () {
		            if (this._buffer) {
		                return this._buffer.numberOfChannels;
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  Set the audio buffer from the array
			 *  @param {Float32Array} array The array to fill the audio buffer
			 *  @param {Number} [channels=1] The number of channels contained in the array. 
			 *                               If the channel is more than 1, the input array
			 *                               is expected to be a multidimensional array
			 *                               with dimensions equal to the number of channels.
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.fromArray = function (array) {
		        var isMultidimensional = array[0].length > 0;
		        var channels = isMultidimensional ? array.length : 1;
		        var len = isMultidimensional ? array[0].length : array.length;
		        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);
		        if (!isMultidimensional && channels === 1) {
		            array = [array];
		        }
		        for (var c = 0; c < channels; c++) {
		            if (this.isFunction(buffer.copyToChannel)) {
		                buffer.copyToChannel(array[c], c);
		            } else {
		                var channel = buffer.getChannelData(c);
		                var channelArray = array[c];
		                for (var i = 0; i < channelArray.length; i++) {
		                    channel[i] = channelArray[i];
		                }
		            }
		        }
		        this._buffer = buffer;
		        return this;
		    };
		    /**
			 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional 
			 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
			 *  @param {Number=} channel Optionally only copy a single channel from the array.
			 *  @return {Array}
			 */
		    Tone.Buffer.prototype.toArray = function (channel) {
		        if (this.isNumber(channel)) {
		            return this._buffer.getChannelData(channel);
		        } else {
		            var ret = [];
		            for (var c = 0; c < this.numberOfChannels; c++) {
		                ret[c] = new Float32Array(this.length);
		                if (this.isFunction(this._buffer.copyFromChannel)) {
		                    this._buffer.copyFromChannel(ret[c], c);
		                } else {
		                    var channelData = this._buffer.getChannelData(c);
		                    var retArray = ret[c];
		                    for (var i = 0; i < channelData.length; i++) {
		                        retArray[i] = channelData[i];
		                    }
		                }
		            }
		            if (ret.length === 1) {
		                return ret[0];
		            } else {
		                return ret;
		            }
		        }
		    };
		    /**
			 *  Cut a subsection of the array and return a buffer of the
			 *  subsection. Does not modify the original buffer
			 *  @param {Time} start The time to start the slice
			 *  @param {Time=} end The end time to slice. If none is given
			 *                     will default to the end of the buffer
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype.slice = function (start, end) {
		        end = this.defaultArg(end, this.duration);
		        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));
		        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));
		        var replacement = [];
		        for (var i = 0; i < this.numberOfChannels; i++) {
		            replacement[i] = this.toArray(i).slice(startSamples, endSamples);
		        }
		        var retBuffer = new Tone.Buffer().fromArray(replacement);
		        return retBuffer;
		    };
		    /**
			 *  Reverse the buffer.
			 *  @private
			 *  @return {Tone.Buffer} this
			 */
		    Tone.Buffer.prototype._reverse = function () {
		        if (this.loaded) {
		            for (var i = 0; i < this._buffer.numberOfChannels; i++) {
		                Array.prototype.reverse.call(this._buffer.getChannelData(i));
		            }
		        }
		        return this;
		    };
		    /**
			 * Reverse the buffer.
			 * @memberOf Tone.Buffer#
			 * @type {Boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {
		        get: function () {
		            return this._reversed;
		        },
		        set: function (rev) {
		            if (this._reversed !== rev) {
		                this._reversed = rev;
		                this._reverse();
		            }
		        }
		    });
		    ///////////////////////////////////////////////////////////////////////////
		    // STATIC METHODS
		    ///////////////////////////////////////////////////////////////////////////
		    //statically inherits Emitter methods
		    Tone.Emitter.mixin(Tone.Buffer);
		    /**
			 *  the static queue for all of the xhr requests
			 *  @type {Array}
			 *  @private
			 */
		    Tone.Buffer._downloadQueue = [];
		    /**
			 *  the total number of downloads
			 *  @type {Number}
			 *  @private
			 */
		    Tone.Buffer._currentDownloads = 0;
		    /**
			 *  A path which is prefixed before every url.
			 *  @type  {String}
			 *  @static
			 */
		    Tone.Buffer.baseUrl = '';
		    /**
			 *  Loads a url using XMLHttpRequest.
			 *  @param {String} url
			 *  @param {Function} onload
			 *  @param {Function} onerror
			 *  @param {Function} onprogress
			 *  @return {XMLHttpRequest}
			 */
		    Tone.Buffer.load = function (url, onload, onerror) {
		        //default
		        onload = onload || Tone.noOp;
		        function onError(e) {
		            Tone.Buffer._currentDownloads--;
		            if (onerror) {
		                onerror(e);
		            } else {
		                throw new Error(e);
		            }
		        }
		        function onProgress() {
		            //calculate the progress
		            var totalProgress = 0;
		            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {
		                totalProgress += Tone.Buffer._downloadQueue[i].progress;
		            }
		            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);
		        }
		        var request = new XMLHttpRequest();
		        request.open('GET', Tone.Buffer.baseUrl + url, true);
		        request.responseType = 'arraybuffer';
		        //start out as 0
		        request.progress = 0;
		        Tone.Buffer._currentDownloads++;
		        Tone.Buffer._downloadQueue.push(request);
		        request.addEventListener('load', function () {
		            if (request.status === 200) {
		                Tone.context.decodeAudioData(request.response, function (buff) {
		                    request.progress = 1;
		                    onProgress();
		                    onload(buff);
		                    Tone.Buffer._currentDownloads--;
		                    if (Tone.Buffer._currentDownloads === 0) {
		                        // clear the downloads
		                        Tone.Buffer._downloadQueue = [];
		                        //emit the event at the end
		                        Tone.Buffer.emit('load');
		                    }
		                }, function () {
		                    onError('Tone.Buffer: could not decode audio data: ' + url);
		                });
		            } else {
		                onError('Tone.Buffer: could not locate file: ' + url);
		            }
		        });
		        request.addEventListener('error', onError);
		        request.addEventListener('progress', function (event) {
		            if (event.lengthComputable) {
		                //only go to 95%, the last 5% is when the audio is decoded
		                request.progress = event.loaded / event.total * 0.95;
		                onProgress();
		            }
		        });
		        request.send();
		        return request;
		    };
		    /**
			 *  Checks a url's extension to see if the current browser can play that file type.
			 *  @param {String} url The url/extension to test
			 *  @return {Boolean} If the file extension can be played
			 *  @static
			 *  @example
			 * Tone.Buffer.supportsType("wav"); //returns true
			 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
			 */
		    Tone.Buffer.supportsType = function (url) {
		        var extension = url.split('.');
		        extension = extension[extension.length - 1];
		        var response = document.createElement('audio').canPlayType('audio/' + extension);
		        return response !== '';
		    };
		    return Tone.Buffer;
		});
		Module(function (Tone) {
		    /**
			 *  @class A data structure for holding multiple buffers.
			 *  
			 *  @param  {Object|Array}    urls      An object literal or array
			 *                                      of urls to load.
			 *  @param  {Function=}  callback  The callback to invoke when
			 *                                 the buffers are loaded. 
			 *  @extends {Tone}
			 *  @example
			 * //load a whole bank of piano samples
			 * var pianoSamples = new Tone.Buffers({
			 * 	"C4" : "path/to/C4.mp3"
			 * 	"C#4" : "path/to/C#4.mp3"
			 * 	"D4" : "path/to/D4.mp3"
			 * 	"D#4" : "path/to/D#4.mp3"
			 * 	...
			 * }, function(){
			 * 	//play one of the samples when they all load
			 * 	player.buffer = pianoSamples.get("C4");
			 * 	player.start();
			 * });
			 * 
			 */
		    Tone.Buffers = function (urls, onload, baseUrl) {
		        /**
				 *  All of the buffers
				 *  @type  {Object}
				 *  @private
				 */
		        this._buffers = {};
		        /**
				 *  A path which is prefixed before every url.
				 *  @type  {String}
				 */
		        this.baseUrl = this.defaultArg(baseUrl, '');
		        urls = this._flattenUrls(urls);
		        this._loadingCount = 0;
		        //add each one
		        for (var key in urls) {
		            this._loadingCount++;
		            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));
		        }
		    };
		    Tone.extend(Tone.Buffers);
		    /**
			 *  True if the buffers object has a buffer by that name.
			 *  @param  {String|Number}  name  The key or index of the 
			 *                                 buffer.
			 *  @return  {Boolean}
			 */
		    Tone.Buffers.prototype.has = function (name) {
		        return this._buffers.hasOwnProperty(name);
		    };
		    /**
			 *  Get a buffer by name. If an array was loaded, 
			 *  then use the array index.
			 *  @param  {String|Number}  name  The key or index of the 
			 *                                 buffer.
			 *  @return  {Tone.Buffer}
			 */
		    Tone.Buffers.prototype.get = function (name) {
		        if (this.has(name)) {
		            return this._buffers[name];
		        } else {
		            throw new Error('Tone.Buffers: no buffer named ' + name);
		        }
		    };
		    /**
			 *  A buffer was loaded. decrement the counter.
			 *  @param  {Function}  callback 
			 *  @private
			 */
		    Tone.Buffers.prototype._bufferLoaded = function (callback) {
		        this._loadingCount--;
		        if (this._loadingCount === 0 && callback) {
		            callback(this);
		        }
		    };
		    /**
			 * If the buffers are loaded or not
			 * @memberOf Tone.Buffers#
			 * @type {Boolean}
			 * @name loaded
			 * @readOnly
			 */
		    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {
		        get: function () {
		            var isLoaded = true;
		            for (var buffName in this._buffers) {
		                var buff = this.get(buffName);
		                isLoaded = isLoaded && buff.loaded;
		            }
		            return isLoaded;
		        }
		    });
		    /**
			 *  Add a buffer by name and url to the Buffers
			 *  @param  {String}    name      A unique name to give
			 *                                the buffer
			 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
			 *                                                 or a buffer which will be added
			 *                                                 with the given name.
			 *  @param  {Function=}  callback  The callback to invoke 
			 *                                 when the url is loaded.
			 */
		    Tone.Buffers.prototype.add = function (name, url, callback) {
		        callback = this.defaultArg(callback, Tone.noOp);
		        if (url instanceof Tone.Buffer) {
		            this._buffers[name] = url;
		            callback(this);
		        } else if (url instanceof AudioBuffer) {
		            this._buffers[name] = new Tone.Buffer(url);
		            callback(this);
		        } else if (this.isString(url)) {
		            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);
		        }
		        return this;
		    };
		    /**
			 *  Flatten an object into a single depth object. 
			 *  thanks to https://gist.github.com/penguinboy/762197
			 *  @param   {Object} ob 	
			 *  @return  {Object}    
			 *  @private
			 */
		    Tone.Buffers.prototype._flattenUrls = function (ob) {
		        var toReturn = {};
		        for (var i in ob) {
		            if (!ob.hasOwnProperty(i))
		                continue;
		            if (this.isObject(ob[i])) {
		                var flatObject = this._flattenUrls(ob[i]);
		                for (var x in flatObject) {
		                    if (!flatObject.hasOwnProperty(x))
		                        continue;
		                    toReturn[i + '.' + x] = flatObject[x];
		                }
		            } else {
		                toReturn[i] = ob[i];
		            }
		        }
		        return toReturn;
		    };
		    /**
			 *  Clean up.
			 *  @return  {Tone.Buffers} this
			 */
		    Tone.Buffers.prototype.dispose = function () {
		        for (var name in this._buffers) {
		            this._buffers[name].dispose();
		        }
		        this._buffers = null;
		        return this;
		    };
		    return Tone.Buffers;
		});
		Module(function (Tone) {
		    
		    /**
			 *  buses are another way of routing audio
			 *
			 *  augments Tone.prototype to include send and recieve
			 */
		    /**
			  *  All of the routes
			  *  
			  *  @type {Object}
			  *  @static
			  *  @private
			  */
		    var Buses = {};
		    /**
			 *  Send this signal to the channel name. 
			 *  @param  {string} channelName A named channel to send the signal to.
			 *  @param  {Decibels} amount The amount of the source to send to the bus. 
			 *  @return {GainNode} The gain node which connects this node to the desired channel. 
			 *                     Can be used to adjust the levels of the send.
			 *  @example
			 * source.send("reverb", -12);
			 */
		    Tone.prototype.send = function (channelName, amount) {
		        if (!Buses.hasOwnProperty(channelName)) {
		            Buses[channelName] = this.context.createGain();
		        }
		        amount = this.defaultArg(amount, 0);
		        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);
		        this.output.chain(sendKnob, Buses[channelName]);
		        return sendKnob;
		    };
		    /**
			 *  Recieve the input from the desired channelName to the input
			 *
			 *  @param  {string} channelName A named channel to send the signal to.
			 *  @param {AudioNode} [input] If no input is selected, the
			 *                                         input of the current node is
			 *                                         chosen. 
			 *  @returns {Tone} this
			 *  @example
			 * reverbEffect.receive("reverb");
			 */
		    Tone.prototype.receive = function (channelName, input) {
		        if (!Buses.hasOwnProperty(channelName)) {
		            Buses[channelName] = this.context.createGain();
		        }
		        if (this.isUndef(input)) {
		            input = this.input;
		        }
		        Buses[channelName].connect(input);
		        return this;
		    };
		    //remove all the send/receives when a new audio context is passed in
		    Tone._initAudioContext(function () {
		        Buses = {};
		    });
		    return Tone;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space 
			 *          using a right-handed cartesian coordinate system. 
			 *          The units used in the coordinate system are not defined; 
			 *          these coordinates are independent/invariant of any particular 
			 *          units such as meters or feet. Tone.Panner3D objects have an forward 
			 *          vector representing the direction the sound is projecting. Additionally, 
			 *          they have a sound cone representing how directional the sound is. 
			 *          For example, the sound could be omnidirectional, in which case it would 
			 *          be heard anywhere regardless of its forward, or it can be more directional 
			 *          and heard only if it is facing the listener. Tone.Listener objects 
			 *          (representing a person's ears) have an forward and up vector 
			 *          representing in which direction the person is facing. Because both the 
			 *          source stream and the listener can be moving, they both have a velocity 
			 *          vector representing both the speed and direction of movement. Taken together, 
			 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
			 *          <br><br>
			 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 *  @singleton
			 *  @param {Number} positionX The initial x position.
			 *  @param {Number} positionY The initial y position.
			 *  @param {Number} positionZ The initial z position.
			 */
		    Tone.Listener = function () {
		        var options = this.optionsObject(arguments, [
		            'positionX',
		            'positionY',
		            'positionZ'
		        ], ListenerConstructor.defaults);
		        /**
				 *  The listener node
				 *  @type {AudioListener}
				 *  @private
				 */
		        this._listener = this.context.listener;
		        /**
				 *  Holds the current forward orientation
				 *  @type  {Array}
				 *  @private
				 */
		        this._orientation = [
		            options.forwardX,
		            options.forwardY,
		            options.forwardZ,
		            options.upX,
		            options.upY,
		            options.upZ
		        ];
		        /**
				 *  Holds the current position
				 *  @type  {Array}
				 *  @private
				 */
		        this._position = [
		            options.positionX,
		            options.positionY,
		            options.positionZ
		        ];
		        // set the default position/forward
		        this.forwardX = options.forwardX;
		        this.forwardY = options.forwardY;
		        this.forwardZ = options.forwardZ;
		        this.upX = options.upX;
		        this.upY = options.upY;
		        this.upZ = options.upZ;
		        this.positionX = options.positionX;
		        this.positionY = options.positionY;
		        this.positionZ = options.positionZ;
		    };
		    Tone.extend(Tone.Listener);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 *  Defaults according to the specification
			 */
		    Tone.Listener.defaults = {
		        'positionX': 0,
		        'positionY': 0,
		        'positionZ': 0,
		        'forwardX': 0,
		        'forwardY': 0,
		        'forwardZ': 1,
		        'upX': 0,
		        'upY': 1,
		        'upZ': 0
		    };
		    Tone.Listener.prototype._rampTimeConstant = 0.3;
		    /**
			 *  Sets the position of the listener in 3d space.	
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @return {Tone.Listener} this
			 */
		    Tone.Listener.prototype.setPosition = function (x, y, z) {
		        if (this._listener.positionX) {
		            var now = this.now();
		            this._listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
		        } else {
		            this._listener.setPosition(x, y, z);
		        }
		        this._position = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  Sets the orientation of the listener using two vectors, the forward
			 *  vector (which direction the listener is facing) and the up vector 
			 *  (which the up direction of the listener). An up vector
			 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. 
			 *  @param  {Number}  x
			 *  @param  {Number}  y
			 *  @param  {Number}  z
			 *  @param  {Number}  upX
			 *  @param  {Number}  upY
			 *  @param  {Number}  upZ
			 *  @return {Tone.Listener} this
			 */
		    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {
		        if (this._listener.forwardX) {
		            var now = this.now();
		            this._listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);
		            this._listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);
		            this._listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);
		            this._listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);
		            this._listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);
		            this._listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);
		        } else {
		            this._listener.setOrientation(x, y, z, upX, upY, upZ);
		        }
		        this._orientation = Array.prototype.slice.call(arguments);
		        return this;
		    };
		    /**
			 *  The x position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionX', {
		        set: function (pos) {
		            this._position[0] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[0];
		        }
		    });
		    /**
			 *  The y position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionY', {
		        set: function (pos) {
		            this._position[1] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[1];
		        }
		    });
		    /**
			 *  The z position of the panner object.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name positionZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {
		        set: function (pos) {
		            this._position[2] = pos;
		            this.setPosition.apply(this, this._position);
		        },
		        get: function () {
		            return this._position[2];
		        }
		    });
		    /**
			 *  The x coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {
		        set: function (pos) {
		            this._orientation[0] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[0];
		        }
		    });
		    /**
			 *  The y coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {
		        set: function (pos) {
		            this._orientation[1] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[1];
		        }
		    });
		    /**
			 *  The z coordinate of the listeners front direction. i.e. 
			 *  which way they are facing.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name forwardZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {
		        set: function (pos) {
		            this._orientation[2] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[2];
		        }
		    });
		    /**
			 *  The x coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upX
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upX', {
		        set: function (pos) {
		            this._orientation[3] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[3];
		        }
		    });
		    /**
			 *  The y coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upY
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upY', {
		        set: function (pos) {
		            this._orientation[4] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[4];
		        }
		    });
		    /**
			 *  The z coordinate of the listener's up direction. i.e.
			 *  the direction the listener is standing in.
			 *  @type {Number}
			 *  @memberOf Tone.Listener#
			 *  @name upZ
			 */
		    Object.defineProperty(Tone.Listener.prototype, 'upZ', {
		        set: function (pos) {
		            this._orientation[5] = pos;
		            this.setOrientation.apply(this, this._orientation);
		        },
		        get: function () {
		            return this._orientation[5];
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Listener} this
			 */
		    Tone.Listener.prototype.dispose = function () {
		        this._listener.disconnect();
		        this._listener = null;
		        this._orientation = null;
		        this._position = null;
		        return this;
		    };
		    //SINGLETON SETUP
		    var ListenerConstructor = Tone.Listener;
		    Tone._initAudioContext(function () {
		        if (typeof Tone.Listener === 'function') {
		            //a single listener object
		            Tone.Listener = new Tone.Listener();
		        } else {
		            //make new Listener insides
		            ListenerConstructor.call(Tone.Listener);
		        }
		    });
		    //END SINGLETON SETUP
		    return Tone.Listener;
		});
		Module(function (Tone) {
		    
		    /**
			 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
			 * 	        the effectSend and effectReturn GainNodes, then control the amount of
			 * 	        effect which goes to the output using the wet control.
			 *
			 *  @constructor
			 *  @extends {Tone}
			 *  @param {NormalRange|Object} [wet] The starting wet value. 
			 */
		    Tone.Effect = function () {
		        this.createInsOuts(1, 1);
		        //get all of the defaults
		        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
		        /**
				 *  the drywet knob to control the amount of effect
				 *  @type {Tone.CrossFade}
				 *  @private
				 */
		        this._dryWet = new Tone.CrossFade(options.wet);
		        /**
				 *  The wet control is how much of the effected
				 *  will pass through to the output. 1 = 100% effected
				 *  signal, 0 = 100% dry signal. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.wet = this._dryWet.fade;
		        /**
				 *  connect the effectSend to the input of hte effect
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.effectSend = new Tone.Gain();
		        /**
				 *  connect the output of the effect to the effectReturn
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this.effectReturn = new Tone.Gain();
		        //connections
		        this.input.connect(this._dryWet.a);
		        this.input.connect(this.effectSend);
		        this.effectReturn.connect(this._dryWet.b);
		        this._dryWet.connect(this.output);
		        this._readOnly(['wet']);
		    };
		    Tone.extend(Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Effect.defaults = { 'wet': 1 };
		    /**
			 *  chains the effect in between the effectSend and effectReturn
			 *  @param  {Tone} effect
			 *  @private
			 *  @returns {Tone.Effect} this
			 */
		    Tone.Effect.prototype.connectEffect = function (effect) {
		        this.effectSend.chain(effect, this.effectReturn);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Effect} this
			 */
		    Tone.Effect.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._dryWet.dispose();
		        this._dryWet = null;
		        this.effectSend.dispose();
		        this.effectSend = null;
		        this.effectReturn.dispose();
		        this.effectReturn = null;
		        this._writable(['wet']);
		        this.wet = null;
		        return this;
		    };
		    return Tone.Effect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
			 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
			 *         and depth.
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Time|Object} [frequency] The rate of the LFO.
			 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
		 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
			 *  @example
			 * //create an autofilter and start it's LFO
			 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
			 * //route an oscillator through the filter and start it
			 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
			 */
		    Tone.AutoFilter = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'baseFrequency',
		            'octaves'
		        ], Tone.AutoFilter.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the lfo which drives the filter cutoff
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'frequency': options.frequency,
		            'amplitude': options.depth
		        });
		        /**
				 * The range of the filter modulating between the min and max frequency. 
				 * 0 = no modulation. 1 = full modulation.
				 * @type {NormalRange}
				 * @signal
				 */
		        this.depth = this._lfo.amplitude;
		        /**
				 * How fast the filter modulates between min and max. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfo.frequency;
		        /**
				 *  The filter node
				 *  @type {Tone.Filter}
				 */
		        this.filter = new Tone.Filter(options.filter);
		        /**
				 *  The octaves placeholder
				 *  @type {Positive}
				 *  @private
				 */
		        this._octaves = 0;
		        //connections
		        this.connectEffect(this.filter);
		        this._lfo.connect(this.filter.frequency);
		        this.type = options.type;
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.octaves = options.octaves;
		        this.baseFrequency = options.baseFrequency;
		    };
		    //extend Effect
		    Tone.extend(Tone.AutoFilter, Tone.Effect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoFilter.defaults = {
		        'frequency': 1,
		        'type': 'sine',
		        'depth': 1,
		        'baseFrequency': 200,
		        'octaves': 2.6,
		        'filter': {
		            'type': 'lowpass',
		            'rolloff': -12,
		            'Q': 1
		        }
		    };
		    /**
			 * Start the effect.
			 * @param {Time} [time=now] When the LFO will start. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.start = function (time) {
		        this._lfo.start(time);
		        return this;
		    };
		    /**
			 * Stop the effect.
			 * @param {Time} [time=now] When the LFO will stop. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.stop = function (time) {
		        this._lfo.stop(time);
		        return this;
		    };
		    /**
			 * Sync the filter to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                               Transport has started. 
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.sync = function (delay) {
		        this._lfo.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the filter from the transport.
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.unsync = function () {
		        this._lfo.unsync();
		        return this;
		    };
		    /**
			 * Type of oscillator attached to the AutoFilter. 
			 * Possible values: "sine", "square", "triangle", "sawtooth".
			 * @memberOf Tone.AutoFilter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 * The minimum value of the filter's cutoff frequency.
			 * @memberOf Tone.AutoFilter#
			 * @type {Frequency}
			 * @name min
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {
		        get: function () {
		            return this._lfo.min;
		        },
		        set: function (freq) {
		            this._lfo.min = this.toFrequency(freq);
		            //and set the max
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 * The maximum value of the filter's cutoff frequency. 
			 * @memberOf Tone.AutoFilter#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (oct) {
		            this._octaves = oct;
		            this._lfo.max = this.baseFrequency * Math.pow(2, oct);
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.AutoFilter} this
			 */
		    Tone.AutoFilter.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._lfo.dispose();
		        this._lfo = null;
		        this.filter.dispose();
		        this.filter = null;
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.AutoFilter;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
			 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
			 *  @example
			 * //create an autopanner and start it's LFO
			 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
			 * //route an oscillator through the panner and start it
			 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
			 */
		    Tone.AutoPanner = function () {
		        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the lfo which drives the panning
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'frequency': options.frequency,
		            'amplitude': options.depth,
		            'min': -1,
		            'max': 1
		        });
		        /**
				 * The amount of panning between left and right. 
				 * 0 = always center. 1 = full range between left and right. 
				 * @type {NormalRange}
				 * @signal
				 */
		        this.depth = this._lfo.amplitude;
		        /**
				 *  the panner node which does the panning
				 *  @type {Tone.Panner}
				 *  @private
				 */
		        this._panner = new Tone.Panner();
		        /**
				 * How fast the panner modulates between left and right. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfo.frequency;
		        //connections
		        this.connectEffect(this._panner);
		        this._lfo.connect(this._panner.pan);
		        this.type = options.type;
		        this._readOnly([
		            'depth',
		            'frequency'
		        ]);
		    };
		    //extend Effect
		    Tone.extend(Tone.AutoPanner, Tone.Effect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoPanner.defaults = {
		        'frequency': 1,
		        'type': 'sine',
		        'depth': 1
		    };
		    /**
			 * Start the effect.
			 * @param {Time} [time=now] When the LFO will start. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.start = function (time) {
		        this._lfo.start(time);
		        return this;
		    };
		    /**
			 * Stop the effect.
			 * @param {Time} [time=now] When the LFO will stop. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.stop = function (time) {
		        this._lfo.stop(time);
		        return this;
		    };
		    /**
			 * Sync the panner to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                               Transport has started. 
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.sync = function (delay) {
		        this._lfo.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the panner from the transport
			 * @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.unsync = function () {
		        this._lfo.unsync();
		        return this;
		    };
		    /**
			 * Type of oscillator attached to the AutoFilter. 
			 * Possible values: "sine", "square", "triangle", "sawtooth".
			 * @memberOf Tone.AutoFilter#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.AutoPanner} this
			 */
		    Tone.AutoPanner.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._lfo.dispose();
		        this._lfo = null;
		        this._panner.dispose();
		        this._panner = null;
		        this._writable([
		            'depth',
		            'frequency'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.AutoPanner;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
			 *          The frequency of the filter is adjusted proportionally to the 
			 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set 
			 *                                            to at the low point of the wah
			 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
			 *                                the filter will sweep to when fully open
			 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for 
			 *                                   the incoming signal. Normal range of -40 to 0. 
			 *  @example
			 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
			 * //initialize the synth and connect to autowah
			 * var synth = new Synth.connect(autoWah);
			 * //Q value influences the effect of the wah - default is 2
			 * autoWah.Q.value = 6;
			 * //more audible on higher notes
			 * synth.triggerAttackRelease("C4", "8n")
			 */
		    Tone.AutoWah = function () {
		        var options = this.optionsObject(arguments, [
		            'baseFrequency',
		            'octaves',
		            'sensitivity'
		        ], Tone.AutoWah.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  The envelope follower. Set the attack/release
				 *  timing to adjust how the envelope is followed. 
				 *  @type {Tone.Follower}
				 *  @private
				 */
		        this.follower = new Tone.Follower(options.follower);
		        /**
				 *  scales the follower value to the frequency domain
				 *  @type {Tone}
				 *  @private
				 */
		        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);
		        /**
				 *  @type {number}
				 *  @private
				 */
		        this._baseFrequency = options.baseFrequency;
		        /**
				 *  @type {number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  the input gain to adjust the sensitivity
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._inputBoost = new Tone.Gain();
		        /**
				 *  @type {BiquadFilterNode}
				 *  @private
				 */
		        this._bandpass = new Tone.Filter({
		            'rolloff': -48,
		            'frequency': 0,
		            'Q': options.Q
		        });
		        /**
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._peaking = new Tone.Filter(0, 'peaking');
		        this._peaking.gain.value = options.gain;
		        /**
				 * The gain of the filter.
				 * @type {Number}
				 * @signal
				 */
		        this.gain = this._peaking.gain;
		        /**
				 * The quality of the filter.
				 * @type {Positive}
				 * @signal
				 */
		        this.Q = this._bandpass.Q;
		        //the control signal path
		        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);
		        this._sweepRange.connect(this._bandpass.frequency);
		        this._sweepRange.connect(this._peaking.frequency);
		        //the filtered path
		        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);
		        //set the initial value
		        this._setSweepRange();
		        this.sensitivity = options.sensitivity;
		        this._readOnly([
		            'gain',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.AutoWah, Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AutoWah.defaults = {
		        'baseFrequency': 100,
		        'octaves': 6,
		        'sensitivity': 0,
		        'Q': 2,
		        'gain': 2,
		        'follower': {
		            'attack': 0.3,
		            'release': 0.5
		        }
		    };
		    /**
			 * The number of octaves that the filter will sweep above the 
			 * baseFrequency. 
			 * @memberOf Tone.AutoWah#
			 * @type {Number}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            this._setSweepRange();
		        }
		    });
		    /**
			 * The base frequency from which the sweep will start from.
			 * @memberOf Tone.AutoWah#
			 * @type {Frequency}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {
		        get: function () {
		            return this._baseFrequency;
		        },
		        set: function (baseFreq) {
		            this._baseFrequency = baseFreq;
		            this._setSweepRange();
		        }
		    });
		    /**
			 * The sensitivity to control how responsive to the input signal the filter is. 
			 * @memberOf Tone.AutoWah#
			 * @type {Decibels}
			 * @name sensitivity
			 */
		    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {
		        get: function () {
		            return this.gainToDb(1 / this._inputBoost.gain.value);
		        },
		        set: function (sensitivy) {
		            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);
		        }
		    });
		    /**
			 *  sets the sweep range of the scaler
			 *  @private
			 */
		    Tone.AutoWah.prototype._setSweepRange = function () {
		        this._sweepRange.min = this._baseFrequency;
		        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.AutoWah} this
			 */
		    Tone.AutoWah.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this.follower.dispose();
		        this.follower = null;
		        this._sweepRange.dispose();
		        this._sweepRange = null;
		        this._bandpass.dispose();
		        this._bandpass = null;
		        this._peaking.dispose();
		        this._peaking = null;
		        this._inputBoost.dispose();
		        this._inputBoost = null;
		        this._writable([
		            'gain',
		            'Q'
		        ]);
		        this.gain = null;
		        this.Q = null;
		        return this;
		    };
		    return Tone.AutoWah;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. 
			 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
			 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
			 *                       of 1 to 8. 
			 *  @example
			 * //initialize crusher and route a synth through it
			 * var crusher = new Tone.BitCrusher(4).toMaster();
			 * var synth = new Tone.MonoSynth().connect(crusher);
			 */
		    Tone.BitCrusher = function () {
		        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);
		        Tone.Effect.call(this, options);
		        var invStepSize = 1 / Math.pow(2, options.bits - 1);
		        /**
				 *  Subtract the input signal and the modulus of the input signal
				 *  @type {Tone.Subtract}
				 *  @private
				 */
		        this._subtract = new Tone.Subtract();
		        /**
				 *  The mod function
				 *  @type  {Tone.Modulo}
				 *  @private
				 */
		        this._modulo = new Tone.Modulo(invStepSize);
		        /**
				 *  keeps track of the bits
				 *  @type {number}
				 *  @private
				 */
		        this._bits = options.bits;
		        //connect it up
		        this.effectSend.fan(this._subtract, this._modulo);
		        this._modulo.connect(this._subtract, 0, 1);
		        this._subtract.connect(this.effectReturn);
		    };
		    Tone.extend(Tone.BitCrusher, Tone.Effect);
		    /**
			 *  the default values
			 *  @static
			 *  @type {Object}
			 */
		    Tone.BitCrusher.defaults = { 'bits': 4 };
		    /**
			 * The bit depth of the effect. Nominal range of 1-8. 
			 * @memberOf Tone.BitCrusher#
			 * @type {number}
			 * @name bits
			 */
		    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {
		        get: function () {
		            return this._bits;
		        },
		        set: function (bits) {
		            this._bits = bits;
		            var invStepSize = 1 / Math.pow(2, bits - 1);
		            this._modulo.value = invStepSize;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.BitCrusher} this
			 */
		    Tone.BitCrusher.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._subtract.dispose();
		        this._subtract = null;
		        this._modulo.dispose();
		        this._modulo = null;
		        return this;
		    };
		    return Tone.BitCrusher;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
			 *         for making different types of distortion sounds.
			 *         Note that odd orders sound very different from even ones, 
			 *         and order = 1 is no change. 
			 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
			 *  @example
			 * //create a new cheby
			 * var cheby = new Tone.Chebyshev(50);
			 * //create a monosynth connected to our cheby
			 * synth = new Tone.MonoSynth().connect(cheby);
			 */
		    Tone.Chebyshev = function () {
		        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._shaper = new Tone.WaveShaper(4096);
		        /**
				 * holds onto the order of the filter
				 * @type {number}
				 * @private
				 */
		        this._order = options.order;
		        this.connectEffect(this._shaper);
		        this.order = options.order;
		        this.oversample = options.oversample;
		    };
		    Tone.extend(Tone.Chebyshev, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Chebyshev.defaults = {
		        'order': 1,
		        'oversample': 'none'
		    };
		    /**
			 *  get the coefficient for that degree
			 *  @param {number} x the x value
			 *  @param   {number} degree 
			 *  @param {Object} memo memoize the computed value. 
			 *                       this speeds up computation greatly. 
			 *  @return  {number}       the coefficient 
			 *  @private
			 */
		    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {
		        if (memo.hasOwnProperty(degree)) {
		            return memo[degree];
		        } else if (degree === 0) {
		            memo[degree] = 0;
		        } else if (degree === 1) {
		            memo[degree] = x;
		        } else {
		            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);
		        }
		        return memo[degree];
		    };
		    /**
			 * The order of the Chebyshev polynomial which creates
			 * the equation which is applied to the incoming 
			 * signal through a Tone.WaveShaper. The equations
			 * are in the form:<br>
			 * order 2: 2x^2 + 1<br>
			 * order 3: 4x^3 + 3x <br>
			 * @memberOf Tone.Chebyshev#
			 * @type {Positive}
			 * @name order
			 */
		    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {
		        get: function () {
		            return this._order;
		        },
		        set: function (order) {
		            this._order = order;
		            var curve = new Array(4096);
		            var len = curve.length;
		            for (var i = 0; i < len; ++i) {
		                var x = i * 2 / len - 1;
		                if (x === 0) {
		                    //should output 0 when input is 0
		                    curve[i] = 0;
		                } else {
		                    curve[i] = this._getCoefficient(x, order, {});
		                }
		            }
		            this._shaper.curve = curve;
		        }
		    });
		    /**
			 * The oversampling of the effect. Can either be "none", "2x" or "4x".
			 * @memberOf Tone.Chebyshev#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            this._shaper.oversample = oversampling;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Chebyshev} this
			 */
		    Tone.Chebyshev.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        return this;
		    };
		    return Tone.Chebyshev;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. 
			 *
			 *	@constructor
			 *	@extends {Tone.Effect}
			 */
		    Tone.StereoEffect = function () {
		        this.createInsOuts(1, 1);
		        //get the defaults
		        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);
		        /**
				 *  the drywet knob to control the amount of effect
				 *  @type {Tone.CrossFade}
				 *  @private
				 */
		        this._dryWet = new Tone.CrossFade(options.wet);
		        /**
				 *  The wet control, i.e. how much of the effected
				 *  will pass through to the output. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.wet = this._dryWet.fade;
		        /**
				 *  then split it
				 *  @type {Tone.Split}
				 *  @private
				 */
		        this._split = new Tone.Split();
		        /**
				 *  the effects send LEFT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectSendL = this._split.left;
		        /**
				 *  the effects send RIGHT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectSendR = this._split.right;
		        /**
				 *  the stereo effect merger
				 *  @type {Tone.Merge}
				 *  @private
				 */
		        this._merge = new Tone.Merge();
		        /**
				 *  the effect return LEFT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectReturnL = this._merge.left;
		        /**
				 *  the effect return RIGHT
				 *  @type {GainNode}
				 *  @private
				 */
		        this.effectReturnR = this._merge.right;
		        //connections
		        this.input.connect(this._split);
		        //dry wet connections
		        this.input.connect(this._dryWet, 0, 0);
		        this._merge.connect(this._dryWet, 0, 1);
		        this._dryWet.connect(this.output);
		        this._readOnly(['wet']);
		    };
		    Tone.extend(Tone.StereoEffect, Tone.Effect);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.StereoEffect} this
			 */
		    Tone.StereoEffect.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._dryWet.dispose();
		        this._dryWet = null;
		        this._split.dispose();
		        this._split = null;
		        this._merge.dispose();
		        this._merge = null;
		        this.effectSendL = null;
		        this.effectSendR = null;
		        this.effectReturnL = null;
		        this.effectReturnR = null;
		        this._writable(['wet']);
		        this.wet = null;
		        return this;
		    };
		    return Tone.StereoEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 * 	@class  Tone.FeedbackEffect provides a loop between an 
			 * 	        audio source and its own output. This is a base-class
			 * 	        for feedback effects. 
			 *
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {NormalRange|Object} [feedback] The initial feedback value.
			 */
		    Tone.FeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback']);
		        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  the gain which controls the feedback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  The amount of signal which is fed back into the effect input. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = this._feedbackGain.gain;
		        //the feedback loop
		        this.effectReturn.chain(this._feedbackGain, this.effectSend);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.FeedbackEffect, Tone.Effect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.FeedbackEffect} this
			 */
		    Tone.FeedbackEffect.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this._feedbackGain.dispose();
		        this._feedbackGain = null;
		        this.feedback = null;
		        return this;
		    };
		    return Tone.FeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
			 *         and right to left instead of on the same channel.
			 *
			 *	@constructor
			 *	@extends {Tone.FeedbackEffect}
			 */
		    Tone.StereoXFeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The amount of feedback from the output
				 *  back into the input of the effect (routed
				 *  across left and right channels).
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  the left side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackLR = new Tone.Gain();
		        /**
				 *  the right side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackRL = new Tone.Gain();
		        //connect it up
		        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);
		        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);
		        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);
		    /**
			 *  clean up
			 *  @returns {Tone.StereoXFeedbackEffect} this
			 */
		    Tone.StereoXFeedbackEffect.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this.feedback.dispose();
		        this.feedback = null;
		        this._feedbackLR.dispose();
		        this._feedbackLR = null;
		        this._feedbackRL.dispose();
		        this._feedbackRL = null;
		        return this;
		    };
		    return Tone.StereoXFeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Chorus is a stereo chorus effect with feedback composed of 
			 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. 
			 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
			 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
			 *
			 *	@constructor
			 *	@extends {Tone.StereoXFeedbackEffect}
			 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
			 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. 
			 *	@param {NormalRange} [depth] The depth of the chorus.
			 *	@example
			 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
			 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
			 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
			 */
		    Tone.Chorus = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'delayTime',
		            'depth'
		        ], Tone.Chorus.defaults);
		        Tone.StereoXFeedbackEffect.call(this, options);
		        /**
				 *  the depth of the chorus
				 *  @type {number}
				 *  @private
				 */
		        this._depth = options.depth;
		        /**
				 *  the delayTime
				 *  @type {number}
				 *  @private
				 */
		        this._delayTime = options.delayTime / 1000;
		        /**
				 *  the lfo which controls the delayTime
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO({
		            'frequency': options.frequency,
		            'min': 0,
		            'max': 1
		        });
		        /**
				 *  another LFO for the right side with a 180 degree phase diff
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO({
		            'frequency': options.frequency,
		            'min': 0,
		            'max': 1,
		            'phase': 180
		        });
		        /**
				 *  delay for left
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNodeL = new Tone.Delay();
		        /**
				 *  delay for right
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNodeR = new Tone.Delay();
		        /**
				 * The frequency of the LFO which modulates the delayTime. 
				 * @type {Frequency}
				 * @signal
				 */
		        this.frequency = this._lfoL.frequency;
		        //connections
		        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);
		        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);
		        //and pass through to make the detune apparent
		        this.effectSendL.connect(this.effectReturnL);
		        this.effectSendR.connect(this.effectReturnR);
		        //lfo setup
		        this._lfoL.connect(this._delayNodeL.delayTime);
		        this._lfoR.connect(this._delayNodeR.delayTime);
		        //start the lfo
		        this._lfoL.start();
		        this._lfoR.start();
		        //have one LFO frequency control the other
		        this._lfoL.frequency.connect(this._lfoR.frequency);
		        //set the initial values
		        this.depth = this._depth;
		        this.frequency.value = options.frequency;
		        this.type = options.type;
		        this._readOnly(['frequency']);
		        this.spread = options.spread;
		    };
		    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Chorus.defaults = {
		        'frequency': 1.5,
		        'delayTime': 3.5,
		        'depth': 0.7,
		        'feedback': 0.1,
		        'type': 'sine',
		        'spread': 180
		    };
		    /**
			 * The depth of the effect. A depth of 1 makes the delayTime
			 * modulate between 0 and 2*delayTime (centered around the delayTime). 
			 * @memberOf Tone.Chorus#
			 * @type {NormalRange}
			 * @name depth
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'depth', {
		        get: function () {
		            return this._depth;
		        },
		        set: function (depth) {
		            this._depth = depth;
		            var deviation = this._delayTime * depth;
		            this._lfoL.min = Math.max(this._delayTime - deviation, 0);
		            this._lfoL.max = this._delayTime + deviation;
		            this._lfoR.min = Math.max(this._delayTime - deviation, 0);
		            this._lfoR.max = this._delayTime + deviation;
		        }
		    });
		    /**
			 * The delayTime in milliseconds of the chorus. A larger delayTime
			 * will give a more pronounced effect. Nominal range a delayTime
			 * is between 2 and 20ms. 
			 * @memberOf Tone.Chorus#
			 * @type {Milliseconds}
			 * @name delayTime
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {
		        get: function () {
		            return this._delayTime * 1000;
		        },
		        set: function (delayTime) {
		            this._delayTime = delayTime / 1000;
		            this.depth = this._depth;
		        }
		    });
		    /**
			 * The oscillator type of the LFO. 
			 * @memberOf Tone.Chorus#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'type', {
		        get: function () {
		            return this._lfoL.type;
		        },
		        set: function (type) {
		            this._lfoL.type = type;
		            this._lfoR.type = type;
		        }
		    });
		    /** 
			 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
			 * When set to 180, LFO's will be panned hard left and right respectively.
			 * @memberOf Tone.Chorus#
			 * @type {Degrees}
			 * @name spread
			 */
		    Object.defineProperty(Tone.Chorus.prototype, 'spread', {
		        get: function () {
		            return this._lfoR.phase - this._lfoL.phase;    //180
		        },
		        set: function (spread) {
		            this._lfoL.phase = 90 - spread / 2;
		            this._lfoR.phase = spread / 2 + 90;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Chorus} this
			 */
		    Tone.Chorus.prototype.dispose = function () {
		        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        this._delayNodeL.dispose();
		        this._delayNodeL = null;
		        this._delayNodeR.dispose();
		        this._delayNodeR = null;
		        this._writable('frequency');
		        this.frequency = null;
		        return this;
		    };
		    return Tone.Chorus;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Convolver is a wrapper around the Native Web Audio 
			 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
			 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
			 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
			 *  
			 *  @constructor
			 *  @extends {Tone.Effect}
			 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
			 *                                           contianing the impulse response. 
			 *  @param {Function} onload The callback to invoke when the url is loaded.
			 *  @example
			 * //initializing the convolver with an impulse response
			 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
			 */
		    Tone.Convolver = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.Convolver.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  convolver node
				 *  @type {ConvolverNode}
				 *  @private
				 */
		        this._convolver = this.context.createConvolver();
		        /**
				 *  the convolution buffer
				 *  @type {Tone.Buffer}
				 *  @private
				 */
		        this._buffer = new Tone.Buffer();
		        if (this.isString(options.url)) {
		            this._buffer.load(options.url, function (buffer) {
		                this.buffer = buffer;
		                options.onload();
		            }.bind(this));
		        } else if (options.url) {
		            this.buffer = options.url;
		            options.onload();
		        }
		        this.connectEffect(this._convolver);
		    };
		    Tone.extend(Tone.Convolver, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Convolver.defaults = { 'onload': Tone.noOp };
		    /**
			 *  The convolver's buffer
			 *  @memberOf Tone.Convolver#
			 *  @type {AudioBuffer}
			 *  @name buffer
			 */
		    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {
		        get: function () {
		            return this._buffer.get();
		        },
		        set: function (buffer) {
		            this._buffer.set(buffer);
		            this._convolver.buffer = this._buffer.get();
		        }
		    });
		    /**
			 *  Load an impulse response url as an audio buffer.
			 *  Decodes the audio asynchronously and invokes
			 *  the callback once the audio buffer loads.
			 *  @param {string} url The url of the buffer to load.
			 *                      filetype support depends on the
			 *                      browser.
			 *  @param  {function=} callback
			 *  @returns {Tone.Convolver} this
			 */
		    Tone.Convolver.prototype.load = function (url, callback) {
		        this._buffer.load(url, function (buff) {
		            this.buffer = buff;
		            if (callback) {
		                callback();
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Convolver} this
			 */
		    Tone.Convolver.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._convolver.disconnect();
		        this._convolver = null;
		        this._buffer.dispose();
		        this._buffer = null;
		        return this;
		    };
		    return Tone.Convolver;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
			 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
			 *  @example
			 * var dist = new Tone.Distortion(0.8).toMaster();
			 * var fm = new Tone.SimpleFM().connect(dist);
			 * //this sounds good on bass notes
			 * fm.triggerAttackRelease("A1", "8n");
			 */
		    Tone.Distortion = function () {
		        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._shaper = new Tone.WaveShaper(4096);
		        /**
				 * holds the distortion amount
				 * @type {number}
				 * @private
				 */
		        this._distortion = options.distortion;
		        this.connectEffect(this._shaper);
		        this.distortion = options.distortion;
		        this.oversample = options.oversample;
		    };
		    Tone.extend(Tone.Distortion, Tone.Effect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Distortion.defaults = {
		        'distortion': 0.4,
		        'oversample': 'none'
		    };
		    /**
			 * The amount of distortion.
			 * @memberOf Tone.Distortion#
			 * @type {NormalRange}
			 * @name distortion
			 */
		    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {
		        get: function () {
		            return this._distortion;
		        },
		        set: function (amount) {
		            this._distortion = amount;
		            var k = amount * 100;
		            var deg = Math.PI / 180;
		            this._shaper.setMap(function (x) {
		                if (Math.abs(x) < 0.001) {
		                    //should output 0 when input is 0
		                    return 0;
		                } else {
		                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
		                }
		            });
		        }
		    });
		    /**
			 * The oversampling of the effect. Can either be "none", "2x" or "4x".
			 * @memberOf Tone.Distortion#
			 * @type {string}
			 * @name oversample
			 */
		    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {
		        get: function () {
		            return this._shaper.oversample;
		        },
		        set: function (oversampling) {
		            this._shaper.oversample = oversampling;
		        }
		    });
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Distortion} this
			 */
		    Tone.Distortion.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._shaper.dispose();
		        this._shaper = null;
		        return this;
		    };
		    return Tone.Distortion;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
			 *          signal is fed back into the delay. 
			 *
			 *  @constructor
			 *  @extends {Tone.FeedbackEffect}
			 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. 
			 *  @param {NormalRange=} feedback The amount of the effected signal which 
			 *                            is fed back through the delay.
			 *  @example
			 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
			 * var tom = new Tone.DrumSynth({
			 * 	"octaves" : 4,
			 * 	"pitchDecay" : 0.1
			 * }).connect(feedbackDelay);
			 * tom.triggerAttackRelease("A2","32n");
			 */
		    Tone.FeedbackDelay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'feedback'
		        ], Tone.FeedbackDelay.defaults);
		        Tone.FeedbackEffect.call(this, options);
		        /**
				 *  the delay node
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNode = new Tone.Delay(options.delayTime);
		        /**
				 *  The delayTime of the DelayNode. 
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._delayNode.delayTime;
		        // connect it up
		        this.connectEffect(this._delayNode);
		        this._readOnly(['delayTime']);
		    };
		    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);
		    /**
			 *  The default values. 
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };
		    /**
			 *  clean up
			 *  @returns {Tone.FeedbackDelay} this
			 */
		    Tone.FeedbackDelay.prototype.dispose = function () {
		        Tone.FeedbackEffect.prototype.dispose.call(this);
		        this._delayNode.dispose();
		        this._delayNode = null;
		        this._writable(['delayTime']);
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.FeedbackDelay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  an array of comb filter delay values from Freeverb implementation
			 *  @static
			 *  @private
			 *  @type {Array}
			 */
		    var combFilterTunings = [
		        1557 / 44100,
		        1617 / 44100,
		        1491 / 44100,
		        1422 / 44100,
		        1277 / 44100,
		        1356 / 44100,
		        1188 / 44100,
		        1116 / 44100
		    ];
		    /**
			 *  an array of allpass filter frequency values from Freeverb implementation
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var allpassFilterFrequencies = [
		        225,
		        556,
		        441,
		        341
		    ];
		    /**
			 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
			 *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. 
			 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part 
			 *                                 of the reverb. 
			 *  @example
			 * var freeverb = new Tone.Freeverb().toMaster();
			 * freeverb.dampening.value = 1000;
			 * //routing synth through the reverb
			 * var synth = new Tone.AMSynth().connect(freeverb);
			 */
		    Tone.Freeverb = function () {
		        var options = this.optionsObject(arguments, [
		            'roomSize',
		            'dampening'
		        ], Tone.Freeverb.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The roomSize value between. A larger roomSize
				 *  will result in a longer decay. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
		        /**
				 *  The amount of dampening of the reverberant signal. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);
		        /**
				 *  the comb filters
				 *  @type {Array}
				 *  @private
				 */
		        this._combFilters = [];
		        /**
				 *  the allpass filters on the left
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFiltersL = [];
		        /**
				 *  the allpass filters on the right
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFiltersR = [];
		        //make the allpass filters on teh right
		        for (var l = 0; l < allpassFilterFrequencies.length; l++) {
		            var allpassL = this.context.createBiquadFilter();
		            allpassL.type = 'allpass';
		            allpassL.frequency.value = allpassFilterFrequencies[l];
		            this._allpassFiltersL.push(allpassL);
		        }
		        //make the allpass filters on the left
		        for (var r = 0; r < allpassFilterFrequencies.length; r++) {
		            var allpassR = this.context.createBiquadFilter();
		            allpassR.type = 'allpass';
		            allpassR.frequency.value = allpassFilterFrequencies[r];
		            this._allpassFiltersR.push(allpassR);
		        }
		        //make the comb filters
		        for (var c = 0; c < combFilterTunings.length; c++) {
		            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);
		            if (c < combFilterTunings.length / 2) {
		                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);
		            } else {
		                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);
		            }
		            this.roomSize.connect(lfpf.resonance);
		            this.dampening.connect(lfpf.dampening);
		            this._combFilters.push(lfpf);
		        }
		        //chain the allpass filters togetehr
		        this.connectSeries.apply(this, this._allpassFiltersL);
		        this.connectSeries.apply(this, this._allpassFiltersR);
		        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);
		        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);
		        this._readOnly([
		            'roomSize',
		            'dampening'
		        ]);
		    };
		    Tone.extend(Tone.Freeverb, Tone.StereoEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Freeverb.defaults = {
		        'roomSize': 0.7,
		        'dampening': 3000
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.Freeverb} this
			 */
		    Tone.Freeverb.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        for (var al = 0; al < this._allpassFiltersL.length; al++) {
		            this._allpassFiltersL[al].disconnect();
		            this._allpassFiltersL[al] = null;
		        }
		        this._allpassFiltersL = null;
		        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {
		            this._allpassFiltersR[ar].disconnect();
		            this._allpassFiltersR[ar] = null;
		        }
		        this._allpassFiltersR = null;
		        for (var cf = 0; cf < this._combFilters.length; cf++) {
		            this._combFilters[cf].dispose();
		            this._combFilters[cf] = null;
		        }
		        this._combFilters = null;
		        this._writable([
		            'roomSize',
		            'dampening'
		        ]);
		        this.roomSize.dispose();
		        this.roomSize = null;
		        this.dampening.dispose();
		        this.dampening = null;
		        return this;
		    };
		    return Tone.Freeverb;
		});
		Module(function (Tone) {
		    
		    /**
			 *  an array of the comb filter delay time values
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var combFilterDelayTimes = [
		        1687 / 25000,
		        1601 / 25000,
		        2053 / 25000,
		        2251 / 25000
		    ];
		    /**
			 *  the resonances of each of the comb filters
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var combFilterResonances = [
		        0.773,
		        0.802,
		        0.753,
		        0.733
		    ];
		    /**
			 *  the allpass filter frequencies
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var allpassFilterFreqs = [
		        347,
		        113,
		        37
		    ];
		    /**
			 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
			 *         tuned by John Chowning in 1970.
			 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. 
			 *         
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
			 *  @example
			 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
			 * var delay = new Tone.FeedbackDelay(0.5); 
			 * //connecting the synth to reverb through delay
			 * var synth = new Tone.DuoSynth().chain(delay, reverb);
			 * synth.triggerAttackRelease("A4","8n");
			 */
		    Tone.JCReverb = function () {
		        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  room size control values between [0,1]
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
		        /**
				 *  scale the room size
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);
		        /**
				 *  a series of allpass filters
				 *  @type {Array}
				 *  @private
				 */
		        this._allpassFilters = [];
		        /**
				 *  parallel feedback comb filters
				 *  @type {Array}
				 *  @private
				 */
		        this._feedbackCombFilters = [];
		        //make the allpass filters
		        for (var af = 0; af < allpassFilterFreqs.length; af++) {
		            var allpass = this.context.createBiquadFilter();
		            allpass.type = 'allpass';
		            allpass.frequency.value = allpassFilterFreqs[af];
		            this._allpassFilters.push(allpass);
		        }
		        //and the comb filters
		        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {
		            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);
		            this._scaleRoomSize.connect(fbcf.resonance);
		            fbcf.resonance.value = combFilterResonances[cf];
		            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);
		            if (cf < combFilterDelayTimes.length / 2) {
		                fbcf.connect(this.effectReturnL);
		            } else {
		                fbcf.connect(this.effectReturnR);
		            }
		            this._feedbackCombFilters.push(fbcf);
		        }
		        //chain the allpass filters together
		        this.roomSize.connect(this._scaleRoomSize);
		        this.connectSeries.apply(this, this._allpassFilters);
		        this.effectSendL.connect(this._allpassFilters[0]);
		        this.effectSendR.connect(this._allpassFilters[0]);
		        this._readOnly(['roomSize']);
		    };
		    Tone.extend(Tone.JCReverb, Tone.StereoEffect);
		    /**
			 *  the default values
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.JCReverb.defaults = { 'roomSize': 0.5 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.JCReverb} this
			 */
		    Tone.JCReverb.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        for (var apf = 0; apf < this._allpassFilters.length; apf++) {
		            this._allpassFilters[apf].disconnect();
		            this._allpassFilters[apf] = null;
		        }
		        this._allpassFilters = null;
		        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {
		            this._feedbackCombFilters[fbcf].dispose();
		            this._feedbackCombFilters[fbcf] = null;
		        }
		        this._feedbackCombFilters = null;
		        this._writable(['roomSize']);
		        this.roomSize.dispose();
		        this.roomSize = null;
		        this._scaleRoomSize.dispose();
		        this._scaleRoomSize = null;
		        return this;
		    };
		    return Tone.JCReverb;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Mid/Side processing separates the the 'mid' signal 
			 *         (which comes out of both the left and the right channel) 
			 *         and the 'side' (which only comes out of the the side channels) 
			 *         and effects them separately before being recombined.
			 *         Applies a Mid/Side seperation and recombination.
			 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
			 *         <br><br>
			 *         This is a base-class for Mid/Side Effects. 
			 *
			 *  @extends {Tone.Effect}
			 *  @constructor
			 */
		    Tone.MidSideEffect = function () {
		        Tone.Effect.apply(this, arguments);
		        /**
				 *  The mid/side split
				 *  @type  {Tone.MidSideSplit}
				 *  @private
				 */
		        this._midSideSplit = new Tone.MidSideSplit();
		        /**
				 *  The mid/side merge
				 *  @type  {Tone.MidSideMerge}
				 *  @private
				 */
		        this._midSideMerge = new Tone.MidSideMerge();
		        /**
				 *  The mid send. Connect to mid processing
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this.midSend = this._midSideSplit.mid;
		        /**
				 *  The side send. Connect to side processing
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this.sideSend = this._midSideSplit.side;
		        /**
				 *  The mid return connection
				 *  @type {GainNode}
				 *  @private
				 */
		        this.midReturn = this._midSideMerge.mid;
		        /**
				 *  The side return connection
				 *  @type {GainNode}
				 *  @private
				 */
		        this.sideReturn = this._midSideMerge.side;
		        //the connections
		        this.effectSend.connect(this._midSideSplit);
		        this._midSideMerge.connect(this.effectReturn);
		    };
		    Tone.extend(Tone.MidSideEffect, Tone.Effect);
		    /**
			 *  Clean up. 
			 *  @returns {Tone.MidSideEffect} this
			 */
		    Tone.MidSideEffect.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._midSideSplit.dispose();
		        this._midSideSplit = null;
		        this._midSideMerge.dispose();
		        this._midSideMerge = null;
		        this.midSend = null;
		        this.sideSend = null;
		        this.midReturn = null;
		        this.sideReturn = null;
		        return this;
		    };
		    return Tone.MidSideEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
			 *         of different frequency components of an incoming signal. Read more on 
			 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). 
			 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
			 *
			 *	@extends {Tone.StereoEffect}
			 *	@constructor
			 *	@param {Frequency|Object} [frequency] The speed of the phasing. 
			 *	@param {number} [octaves] The octaves of the effect. 
			 *	@param {Frequency} [baseFrequency] The base frequency of the filters. 
			 *	@example
			 * var phaser = new Tone.Phaser({
			 * 	"frequency" : 15, 
			 * 	"octaves" : 5, 
			 * 	"baseFrequency" : 1000
			 * }).toMaster();
			 * var synth = new Tone.FMSynth().connect(phaser);
			 * synth.triggerAttackRelease("E3", "2n");
			 */
		    Tone.Phaser = function () {
		        //set the defaults
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'octaves',
		            'baseFrequency'
		        ], Tone.Phaser.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  the lfo which controls the frequency on the left side
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO(options.frequency, 0, 1);
		        /**
				 *  the lfo which controls the frequency on the right side
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO(options.frequency, 0, 1);
		        this._lfoR.phase = 180;
		        /**
				 *  the base modulation frequency
				 *  @type {number}
				 *  @private
				 */
		        this._baseFrequency = options.baseFrequency;
		        /**
				 *  the octaves of the phasing
				 *  @type {number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  The quality factor of the filters
				 *  @type {Positive}
				 *  @signal
				 */
		        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);
		        /**
				 *  the array of filters for the left side
				 *  @type {Array}
				 *  @private
				 */
		        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);
		        /**
				 *  the array of filters for the left side
				 *  @type {Array}
				 *  @private
				 */
		        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);
		        /**
				 * the frequency of the effect
				 * @type {Tone.Signal}
				 */
		        this.frequency = this._lfoL.frequency;
		        this.frequency.value = options.frequency;
		        //connect them up
		        this.effectSendL.connect(this._filtersL[0]);
		        this.effectSendR.connect(this._filtersR[0]);
		        this._filtersL[options.stages - 1].connect(this.effectReturnL);
		        this._filtersR[options.stages - 1].connect(this.effectReturnR);
		        //control the frequency with one LFO
		        this._lfoL.frequency.connect(this._lfoR.frequency);
		        //set the options
		        this.baseFrequency = options.baseFrequency;
		        this.octaves = options.octaves;
		        //start the lfo
		        this._lfoL.start();
		        this._lfoR.start();
		        this._readOnly([
		            'frequency',
		            'Q'
		        ]);
		    };
		    Tone.extend(Tone.Phaser, Tone.StereoEffect);
		    /**
			 *  defaults
			 *  @static
			 *  @type {object}
			 */
		    Tone.Phaser.defaults = {
		        'frequency': 0.5,
		        'octaves': 3,
		        'stages': 10,
		        'Q': 10,
		        'baseFrequency': 350
		    };
		    /**
			 *  @param {number} stages
			 *  @returns {Array} the number of filters all connected together
			 *  @private
			 */
		    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {
		        var filters = new Array(stages);
		        //make all the filters
		        for (var i = 0; i < stages; i++) {
		            var filter = this.context.createBiquadFilter();
		            filter.type = 'allpass';
		            Q.connect(filter.Q);
		            connectToFreq.connect(filter.frequency);
		            filters[i] = filter;
		        }
		        this.connectSeries.apply(this, filters);
		        return filters;
		    };
		    /**
			 * The number of octaves the phase goes above
			 * the baseFrequency
			 * @memberOf Tone.Phaser#
			 * @type {Positive}
			 * @name octaves
			 */
		    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octaves) {
		            this._octaves = octaves;
		            var max = this._baseFrequency * Math.pow(2, octaves);
		            this._lfoL.max = max;
		            this._lfoR.max = max;
		        }
		    });
		    /**
			 * The the base frequency of the filters. 
			 * @memberOf Tone.Phaser#
			 * @type {number}
			 * @name baseFrequency
			 */
		    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {
		        get: function () {
		            return this._baseFrequency;
		        },
		        set: function (freq) {
		            this._baseFrequency = freq;
		            this._lfoL.min = freq;
		            this._lfoR.min = freq;
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Phaser} this
			 */
		    Tone.Phaser.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'Q'
		        ]);
		        this.Q.dispose();
		        this.Q = null;
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        for (var i = 0; i < this._filtersL.length; i++) {
		            this._filtersL[i].disconnect();
		            this._filtersL[i] = null;
		        }
		        this._filtersL = null;
		        for (var j = 0; j < this._filtersR.length; j++) {
		            this._filtersR[j].disconnect();
		            this._filtersR[j] = null;
		        }
		        this._filtersR = null;
		        this.frequency = null;
		        return this;
		    };
		    return Tone.Phaser;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
			 *          first in one channel and next in the opposite channel. In a stereo
			 *          system these are the right and left channels.
			 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays 
			 *          with independent delay values. Each delay is routed to one channel
			 *          (left or right), and the channel triggered second will always 
			 *          trigger at the same interval after the first.
			 *
			 * 	@constructor
			 * 	@extends {Tone.StereoXFeedbackEffect}
			 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
			 *  @param {NormalRange=} feedback The amount of the effected signal which 
			 *                                 is fed back through the delay.
			 *  @example
			 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
			 * var drum = new Tone.DrumSynth().connect(pingPong);
			 * drum.triggerAttackRelease("C4", "32n");
			 */
		    Tone.PingPongDelay = function () {
		        var options = this.optionsObject(arguments, [
		            'delayTime',
		            'feedback'
		        ], Tone.PingPongDelay.defaults);
		        Tone.StereoXFeedbackEffect.call(this, options);
		        /**
				 *  the delay node on the left side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the delay node on the right side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the predelay on the right side
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);
		        /**
				 *  the delay time signal
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);
		        //connect it up
		        this.effectSendL.chain(this._leftDelay, this.effectReturnL);
		        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);
		        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);
		        //rearranged the feedback to be after the rightPreDelay
		        this._feedbackLR.disconnect();
		        this._feedbackLR.connect(this._rightDelay);
		        this._readOnly(['delayTime']);
		    };
		    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.PingPongDelay.defaults = {
		        'delayTime': 0.25,
		        'maxDelayTime': 1
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.PingPongDelay} this
			 */
		    Tone.PingPongDelay.prototype.dispose = function () {
		        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
		        this._leftDelay.dispose();
		        this._leftDelay = null;
		        this._rightDelay.dispose();
		        this._rightDelay = null;
		        this._rightPreDelay.dispose();
		        this._rightPreDelay = null;
		        this._writable(['delayTime']);
		        this.delayTime.dispose();
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.PingPongDelay;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. 
			 *         The effect is achieved by speeding up or slowing down the delayTime
			 *         of a DelayNode using a sawtooth wave. 
			 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
			 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
			 *         
			 *  @extends {Tone.FeedbackEffect}
			 *  @param {Interval=} pitch The interval to transpose the incoming signal by. 
			 */
		    Tone.PitchShift = function () {
		        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);
		        Tone.FeedbackEffect.call(this, options);
		        /**
				 *  The pitch signal
				 *  @type  {Tone.Signal}
				 *  @private
				 */
		        this._frequency = new Tone.Signal(0);
		        /**
				 *  Uses two DelayNodes to cover up the jump in
				 *  the sawtooth wave. 
				 *  @type  {DelayNode}
				 *  @private
				 */
		        this._delayA = new Tone.Delay(0, 1);
		        /**
				 *  The first LFO.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoA = new Tone.LFO({
		            'min': 0,
		            'max': 0.1,
		            'type': 'sawtooth'
		        }).connect(this._delayA.delayTime);
		        /**
				 *  The second DelayNode
				 *  @type  {DelayNode}
				 *  @private
				 */
		        this._delayB = new Tone.Delay(0, 1);
		        /**
				 *  The first LFO.
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoB = new Tone.LFO({
		            'min': 0,
		            'max': 0.1,
		            'type': 'sawtooth',
		            'phase': 180
		        }).connect(this._delayB.delayTime);
		        /**
				 *  Crossfade quickly between the two delay lines
				 *  to cover up the jump in the sawtooth wave
				 *  @type  {Tone.CrossFade}
				 *  @private
				 */
		        this._crossFade = new Tone.CrossFade();
		        /**
				 *  LFO which alternates between the two
				 *  delay lines to cover up the disparity in the
				 *  sawtooth wave. 
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._crossFadeLFO = new Tone.LFO({
		            'min': 0,
		            'max': 1,
		            'type': 'triangle',
		            'phase': 90
		        }).connect(this._crossFade.fade);
		        /**
				 *  The delay node
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._feedbackDelay = new Tone.Delay(options.delayTime);
		        /**
				 *  The amount of delay on the input signal
				 *  @type {Time}
				 *  @signal
				 */
		        this.delayTime = this._feedbackDelay.delayTime;
		        this._readOnly('delayTime');
		        /**
				 *  Hold the current pitch
				 *  @type {Number}
				 *  @private
				 */
		        this._pitch = options.pitch;
		        /**
				 *  Hold the current windowSize
				 *  @type {Number}
				 *  @private
				 */
		        this._windowSize = options.windowSize;
		        //connect the two delay lines up
		        this._delayA.connect(this._crossFade.a);
		        this._delayB.connect(this._crossFade.b);
		        //connect the frequency
		        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);
		        //route the input
		        this.effectSend.fan(this._delayA, this._delayB);
		        this._crossFade.chain(this._feedbackDelay, this.effectReturn);
		        //start the LFOs at the same time
		        var now = this.now();
		        this._lfoA.start(now);
		        this._lfoB.start(now);
		        this._crossFadeLFO.start(now);
		        //set the initial value
		        this.windowSize = this._windowSize;
		    };
		    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.PitchShift.defaults = {
		        'pitch': 0,
		        'windowSize': 0.1,
		        'delayTime': 0,
		        'feedback': 0
		    };
		    /**
			 * Repitch the incoming signal by some interval (measured
			 * in semi-tones). 
			 * @memberOf Tone.PitchShift#
			 * @type {Interval}
			 * @name pitch
			 * @example
			 * pitchShift.pitch = -12; //down one octave
			 * pitchShift.pitch = 7; //up a fifth
			 */
		    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {
		        get: function () {
		            return this._pitch;
		        },
		        set: function (interval) {
		            this._pitch = interval;
		            var factor = 0;
		            if (interval < 0) {
		                this._lfoA.min = 0;
		                this._lfoA.max = this._windowSize;
		                this._lfoB.min = 0;
		                this._lfoB.max = this._windowSize;
		                factor = this.intervalToFrequencyRatio(interval - 1) + 1;
		            } else {
		                this._lfoA.min = this._windowSize;
		                this._lfoA.max = 0;
		                this._lfoB.min = this._windowSize;
		                this._lfoB.max = 0;
		                factor = this.intervalToFrequencyRatio(interval) - 1;
		            }
		            this._frequency.value = factor * (1.2 / this._windowSize);
		        }
		    });
		    /**
			 * The window size corresponds roughly to the sample length in a looping sampler. 
			 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
			 * signal, but larger values will result in smoother pitch shifting for larger intervals. 
			 * A nominal range of 0.03 to 0.1 is recommended. 
			 * @memberOf Tone.PitchShift#
			 * @type {Time}
			 * @name windowSize
			 * @example
			 * pitchShift.windowSize = 0.1;
			 */
		    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {
		        get: function () {
		            return this._windowSize;
		        },
		        set: function (size) {
		            this._windowSize = this.toSeconds(size);
		            this.pitch = this._pitch;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.PitchShift}  this
			 */
		    Tone.PitchShift.prototype.dispose = function () {
		        Tone.FeedbackEffect.prototype.dispose.call(this);
		        this._frequency.dispose();
		        this._frequency = null;
		        this._delayA.disconnect();
		        this._delayA = null;
		        this._delayB.disconnect();
		        this._delayB = null;
		        this._lfoA.dispose();
		        this._lfoA = null;
		        this._lfoB.dispose();
		        this._lfoB = null;
		        this._crossFade.dispose();
		        this._crossFade = null;
		        this._crossFadeLFO.dispose();
		        this._crossFadeLFO = null;
		        this._writable('delayTime');
		        this._feedbackDelay.dispose();
		        this._feedbackDelay = null;
		        this.delayTime = null;
		        return this;
		    };
		    return Tone.PitchShift;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Base class for stereo feedback effects where the effectReturn
			 *         is fed back into the same channel. 
			 *
			 *	@constructor
			 *	@extends {Tone.FeedbackEffect}
			 */
		    Tone.StereoFeedbackEffect = function () {
		        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  controls the amount of feedback
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
		        /**
				 *  the left side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackL = new Tone.Gain();
		        /**
				 *  the right side feeback
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._feedbackR = new Tone.Gain();
		        //connect it up
		        this.effectReturnL.chain(this._feedbackL, this.effectSendL);
		        this.effectReturnR.chain(this._feedbackR, this.effectSendR);
		        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
		        this._readOnly(['feedback']);
		    };
		    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);
		    /**
			 *  clean up
			 *  @returns {Tone.StereoFeedbackEffect} this
			 */
		    Tone.StereoFeedbackEffect.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable(['feedback']);
		        this.feedback.dispose();
		        this.feedback = null;
		        this._feedbackL.dispose();
		        this._feedbackL = null;
		        this._feedbackR.dispose();
		        this._feedbackR = null;
		        return this;
		    };
		    return Tone.StereoFeedbackEffect;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Applies a width factor to the mid/side seperation. 
			 *         0 is all mid and 1 is all side.
			 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
			 *         <br><br>
			 *         <code>
			 *         Mid *= 2*(1-width)<br>
			 *         Side *= 2*width
			 *         </code>
			 *
			 *  @extends {Tone.MidSideEffect}
			 *  @constructor
			 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
			 */
		    Tone.StereoWidener = function () {
		        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);
		        Tone.MidSideEffect.call(this, options);
		        /**
				 *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
		        /**
				 *  Mid multiplier
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');
		        /**
				 *  Side multiplier
				 *  @type {Tone.Expr}
				 *  @private
				 */
		        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');
		        /**
				 *  constant output of 2
				 *  @type {Tone}
				 *  @private
				 */
		        this._two = new Tone.Signal(2);
		        //the mid chain
		        this._two.connect(this._midMult, 0, 1);
		        this.width.connect(this._midMult, 0, 2);
		        //the side chain
		        this._two.connect(this._sideMult, 0, 1);
		        this.width.connect(this._sideMult, 0, 2);
		        //connect it to the effect send/return
		        this.midSend.chain(this._midMult, this.midReturn);
		        this.sideSend.chain(this._sideMult, this.sideReturn);
		        this._readOnly(['width']);
		    };
		    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);
		    /**
			 *  the default values
			 *  @static
			 *  @type {Object}
			 */
		    Tone.StereoWidener.defaults = { 'width': 0.5 };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.StereoWidener} this
			 */
		    Tone.StereoWidener.prototype.dispose = function () {
		        Tone.MidSideEffect.prototype.dispose.call(this);
		        this._writable(['width']);
		        this.width.dispose();
		        this.width = null;
		        this._midMult.dispose();
		        this._midMult = null;
		        this._sideMult.dispose();
		        this._sideMult = null;
		        this._two.dispose();
		        this._two = null;
		        return this;
		    };
		    return Tone.StereoWidener;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
			 *         The type, frequency, and depth of the LFO is controllable.
			 *
			 *  @extends {Tone.StereoEffect}
			 *  @constructor
			 *  @param {Frequency} [frequency] The rate of the effect.
			 *  @param {NormalRange} [depth] The depth of the effect.
			 *  @example
			 * //create a tremolo and start it's LFO
			 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
			 * //route an oscillator through the tremolo and start it
			 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
			 */
		    Tone.Tremolo = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'depth'
		        ], Tone.Tremolo.defaults);
		        Tone.StereoEffect.call(this, options);
		        /**
				 *  The tremelo LFO in the left channel
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoL = new Tone.LFO({
		            'phase': options.spread,
		            'min': 1,
		            'max': 0
		        });
		        /**
				 *  The tremelo LFO in the left channel
				 *  @type  {Tone.LFO}
				 *  @private
				 */
		        this._lfoR = new Tone.LFO({
		            'phase': options.spread,
		            'min': 1,
		            'max': 0
		        });
		        /**
				 *  Where the gain is multiplied
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._amplitudeL = new Tone.Gain();
		        /**
				 *  Where the gain is multiplied
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._amplitudeR = new Tone.Gain();
		        /**
				 *  The frequency of the tremolo.
				 *  @type  {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The depth of the effect. A depth of 0, has no effect
				 *  on the amplitude, and a depth of 1 makes the amplitude
				 *  modulate fully between 0 and 1.
				 *  @type  {NormalRange}
				 *  @signal
				 */
		        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);
		        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);
		        this._lfoL.connect(this._amplitudeL.gain);
		        this._lfoR.connect(this._amplitudeR.gain);
		        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
		        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
		        this.type = options.type;
		        this.spread = options.spread;
		    };
		    Tone.extend(Tone.Tremolo, Tone.StereoEffect);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Tremolo.defaults = {
		        'frequency': 10,
		        'type': 'sine',
		        'depth': 0.5,
		        'spread': 180
		    };
		    /**
			 * Start the tremolo.
			 * @param {Time} [time=now] When the tremolo begins.
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.start = function (time) {
		        this._lfoL.start(time);
		        this._lfoR.start(time);
		        return this;
		    };
		    /**
			 * Stop the tremolo.
			 * @param {Time} [time=now] When the tremolo stops.
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.stop = function (time) {
		        this._lfoL.stop(time);
		        this._lfoR.stop(time);
		        return this;
		    };
		    /**
			 * Sync the effect to the transport.
			 * @param {Time} [delay=0] Delay time before starting the effect after the
			 *                              Transport has started.
			 * @returns {Tone.AutoFilter} this
			 */
		    Tone.Tremolo.prototype.sync = function (delay) {
		        this._lfoL.sync(delay);
		        this._lfoR.sync(delay);
		        return this;
		    };
		    /**
			 * Unsync the filter from the transport
			 * @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.unsync = function () {
		        this._lfoL.unsync();
		        this._lfoR.unsync();
		        return this;
		    };
		    /**
			 * The Tremolo's oscillator type.
			 * @memberOf Tone.Tremolo#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Tremolo.prototype, 'type', {
		        get: function () {
		            return this._lfoL.type;
		        },
		        set: function (type) {
		            this._lfoL.type = type;
		            this._lfoR.type = type;
		        }
		    });
		    /** 
			 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
			 * When set to 180, LFO's will be panned hard left and right respectively.
			 * @memberOf Tone.Tremolo#
			 * @type {Degrees}
			 * @name spread
			 */
		    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {
		        get: function () {
		            return this._lfoR.phase - this._lfoL.phase;    //180
		        },
		        set: function (spread) {
		            this._lfoL.phase = 90 - spread / 2;
		            this._lfoR.phase = spread / 2 + 90;
		        }
		    });
		    /**
			 *  clean up
			 *  @returns {Tone.Tremolo} this
			 */
		    Tone.Tremolo.prototype.dispose = function () {
		        Tone.StereoEffect.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this._lfoL.dispose();
		        this._lfoL = null;
		        this._lfoR.dispose();
		        this._lfoR = null;
		        this._amplitudeL.dispose();
		        this._amplitudeL = null;
		        this._amplitudeR.dispose();
		        this._amplitudeR = null;
		        this.frequency = null;
		        this.depth = null;
		        return this;
		    };
		    return Tone.Tremolo;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
			 *         modulates the delayTime of the delay, causing the pitch to rise
			 *         and fall. 
			 *  @extends {Tone.Effect}
			 *  @param {Frequency} frequency The frequency of the vibrato.
			 *  @param {NormalRange} depth The amount the pitch is modulated.
			 */
		    Tone.Vibrato = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'depth'
		        ], Tone.Vibrato.defaults);
		        Tone.Effect.call(this, options);
		        /**
				 *  The delay node used for the vibrato effect
				 *  @type {Tone.Delay}
				 *  @private
				 */
		        this._delayNode = new Tone.Delay(0, options.maxDelay);
		        /**
				 *  The LFO used to control the vibrato
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._lfo = new Tone.LFO({
		            'type': options.type,
		            'min': 0,
		            'max': options.maxDelay,
		            'frequency': options.frequency,
		            'phase': -90    //offse the phase so the resting position is in the center
		        }).start().connect(this._delayNode.delayTime);
		        /**
				 *  The frequency of the vibrato
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._lfo.frequency;
		        /**
				 *  The depth of the vibrato. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.depth = this._lfo.amplitude;
		        this.depth.value = options.depth;
		        this._readOnly([
		            'frequency',
		            'depth'
		        ]);
		        this.effectSend.chain(this._delayNode, this.effectReturn);
		    };
		    Tone.extend(Tone.Vibrato, Tone.Effect);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Vibrato.defaults = {
		        'maxDelay': 0.005,
		        'frequency': 5,
		        'depth': 0.1,
		        'type': 'sine'
		    };
		    /**
			 * Type of oscillator attached to the Vibrato.
			 * @memberOf Tone.Vibrato#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.Vibrato.prototype, 'type', {
		        get: function () {
		            return this._lfo.type;
		        },
		        set: function (type) {
		            this._lfo.type = type;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Vibrato} this
			 */
		    Tone.Vibrato.prototype.dispose = function () {
		        Tone.Effect.prototype.dispose.call(this);
		        this._delayNode.dispose();
		        this._delayNode = null;
		        this._lfo.dispose();
		        this._lfo = null;
		        this._writable([
		            'frequency',
		            'depth'
		        ]);
		        this.frequency = null;
		        this.depth = null;
		    };
		    return Tone.Vibrato;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
			 *          callback for a single or repeatable events along the timeline. 
			 *
			 *  @extends {Tone}
			 *  @param {function} callback The callback to invoke at the time. 
			 *  @param {*} value The value or values which should be passed to
			 *                      the callback function on invocation.  
			 *  @example
			 * var chord = new Tone.Event(function(time, chord){
			 * 	//the chord as well as the exact time of the event
			 * 	//are passed in as arguments to the callback function
			 * }, ["D4", "E4", "F4"]);
			 * //start the chord at the beginning of the transport timeline
			 * chord.start();
			 * //loop it every measure for 8 measures
			 * chord.loop = 8;
			 * chord.loopEnd = "1m";
			 */
		    Tone.Event = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'value'
		        ], Tone.Event.defaults);
		        /**
				 *  Loop value
				 *  @type  {Boolean|Positive}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  The callback to invoke. 
				 *  @type  {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  The value which is passed to the
				 *  callback function.
				 *  @type  {*}
				 *  @private
				 */
		        this.value = options.value;
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopStart = this.toTicks(options.loopStart);
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopEnd = this.toTicks(options.loopEnd);
		        /**
				 *  Tracks the scheduled events
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  The playback speed of the note. A speed of 1
				 *  is no change. 
				 *  @private
				 *  @type {Positive}
				 */
		        this._playbackRate = 1;
		        /**
				 *  A delay time from when the event is scheduled to start
				 *  @type {Ticks}
				 *  @private
				 */
		        this._startOffset = 0;
		        /**
				 *  The probability that the callback will be invoked
				 *  at the scheduled time. 
				 *  @type {NormalRange}
				 *  @example
				 * //the callback will be invoked 50% of the time
				 * event.probability = 0.5;
				 */
		        this.probability = options.probability;
		        /**
				 *  If set to true, will apply small (+/-0.02 seconds) random variation
				 *  to the callback time. If the value is given as a time, it will randomize
				 *  by that amount.
				 *  @example
				 * event.humanize = true;
				 *  @type {Boolean|Time}
				 */
		        this.humanize = options.humanize;
		        /**
				 *  If mute is true, the callback won't be
				 *  invoked.
				 *  @type {Boolean}
				 */
		        this.mute = options.mute;
		        //set the initial values
		        this.playbackRate = options.playbackRate;
		    };
		    Tone.extend(Tone.Event);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Event.defaults = {
		        'callback': Tone.noOp,
		        'loop': false,
		        'loopEnd': '1m',
		        'loopStart': 0,
		        'playbackRate': 1,
		        'value': null,
		        'probability': 1,
		        'mute': false,
		        'humanize': false
		    };
		    /**
			 *  Reschedule all of the events along the timeline
			 *  with the updated values.
			 *  @param {Time} after Only reschedules events after the given time.
			 *  @return  {Tone.Event}  this
			 *  @private
			 */
		    Tone.Event.prototype._rescheduleEvents = function (after) {
		        //if no argument is given, schedules all of the events
		        after = this.defaultArg(after, -1);
		        this._state.forEachFrom(after, function (event) {
		            var duration;
		            if (event.state === Tone.State.Started) {
		                if (!this.isUndef(event.id)) {
		                    Tone.Transport.clear(event.id);
		                }
		                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);
		                if (this._loop) {
		                    duration = Infinity;
		                    if (this.isNumber(this._loop)) {
		                        duration = this._loop * this._getLoopDuration();
		                    }
		                    var nextEvent = this._state.getEventAfter(startTick);
		                    if (nextEvent !== null) {
		                        duration = Math.min(duration, nextEvent.time - startTick);
		                    }
		                    if (duration !== Infinity) {
		                        //schedule a stop since it's finite duration
		                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);
		                        duration = Tone.Time(duration, 'i');
		                    }
		                    var interval = Tone.Time(this._getLoopDuration(), 'i');
		                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);
		                } else {
		                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');
		                }
		            }
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Returns the playback state of the note, either "started" or "stopped".
			 *  @type {String}
			 *  @readOnly
			 *  @memberOf Tone.Event#
			 *  @name state
			 */
		    Object.defineProperty(Tone.Event.prototype, 'state', {
		        get: function () {
		            return this._state.getStateAtTime(Tone.Transport.ticks);
		        }
		    });
		    /**
			 *  The start from the scheduled start time
			 *  @type {Ticks}
			 *  @memberOf Tone.Event#
			 *  @name startOffset
			 *  @private
			 */
		    Object.defineProperty(Tone.Event.prototype, 'startOffset', {
		        get: function () {
		            return this._startOffset;
		        },
		        set: function (offset) {
		            this._startOffset = offset;
		        }
		    });
		    /**
			 *  Start the note at the given time. 
			 *  @param  {TimelinePosition}  time  When the note should start.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.start = function (time) {
		        time = this.toTicks(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Stopped) {
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': time,
		                'id': undefined
		            });
		            this._rescheduleEvents(time);
		        }
		        return this;
		    };
		    /**
			 *  Stop the Event at the given time.
			 *  @param  {TimelinePosition}  time  When the note should stop.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.stop = function (time) {
		        this.cancel(time);
		        time = this.toTicks(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            this._state.setStateAtTime(Tone.State.Stopped, time);
		            var previousEvent = this._state.getEventBefore(time);
		            var reschedulTime = time;
		            if (previousEvent !== null) {
		                reschedulTime = previousEvent.time;
		            }
		            this._rescheduleEvents(reschedulTime);
		        }
		        return this;
		    };
		    /**
			 *  Cancel all scheduled events greater than or equal to the given time
			 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.cancel = function (time) {
		        time = this.defaultArg(time, -Infinity);
		        time = this.toTicks(time);
		        this._state.forEachFrom(time, function (event) {
		            Tone.Transport.clear(event.id);
		        });
		        this._state.cancel(time);
		        return this;
		    };
		    /**
			 *  The callback function invoker. Also 
			 *  checks if the Event is done playing
			 *  @param  {Number}  time  The time of the event in seconds
			 *  @private
			 */
		    Tone.Event.prototype._tick = function (time) {
		        if (!this.mute && this._state.getStateAtTime(Tone.Transport.ticks) === Tone.State.Started) {
		            if (this.probability < 1 && Math.random() > this.probability) {
		                return;
		            }
		            if (this.humanize) {
		                var variation = 0.02;
		                if (!this.isBoolean(this.humanize)) {
		                    variation = this.toSeconds(this.humanize);
		                }
		                time += (Math.random() * 2 - 1) * variation;
		            }
		            this.callback(time, this.value);
		        }
		    };
		    /**
			 *  Get the duration of the loop.
			 *  @return  {Ticks}
			 *  @private
			 */
		    Tone.Event.prototype._getLoopDuration = function () {
		        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
		    };
		    /**
			 *  If the note should loop or not
			 *  between Tone.Event.loopStart and 
			 *  Tone.Event.loopEnd. An integer
			 *  value corresponds to the number of
			 *  loops the Event does after it starts.
			 *  @memberOf Tone.Event#
			 *  @type {Boolean|Positive}
			 *  @name loop
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            this._rescheduleEvents();
		        }
		    });
		    /**
			 * 	The playback rate of the note. Defaults to 1.
			 *  @memberOf Tone.Event#
			 *  @type {Positive}
			 *  @name playbackRate
			 *  @example
			 * note.loop = true;
			 * //repeat the note twice as fast
			 * note.playbackRate = 2;
			 */
		    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this._rescheduleEvents();
		        }
		    });
		    /**
			 *  The loopEnd point is the time the event will loop
			 *  if Tone.Event.loop is true.
			 *  @memberOf Tone.Event#
			 *  @type {TransportTime}
			 *  @name loopEnd
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
		        },
		        set: function (loopEnd) {
		            this._loopEnd = this.toTicks(loopEnd);
		            if (this._loop) {
		                this._rescheduleEvents();
		            }
		        }
		    });
		    /**
			 *  The time when the loop should start. 
			 *  @memberOf Tone.Event#
			 *  @type {TransportTime}
			 *  @name loopStart
			 */
		    Object.defineProperty(Tone.Event.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toNotation();
		        },
		        set: function (loopStart) {
		            this._loopStart = this.toTicks(loopStart);
		            if (this._loop) {
		                this._rescheduleEvents();
		            }
		        }
		    });
		    /**
			 *  The current progress of the loop interval.
			 *  Returns 0 if the event is not started yet or
			 *  it is not set to loop.
			 *  @memberOf Tone.Event#
			 *  @type {NormalRange}
			 *  @name progress
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Event.prototype, 'progress', {
		        get: function () {
		            if (this._loop) {
		                var ticks = Tone.Transport.ticks;
		                var lastEvent = this._state.getEvent(ticks);
		                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {
		                    var loopDuration = this._getLoopDuration();
		                    var progress = (ticks - lastEvent.time) % loopDuration;
		                    return progress / loopDuration;
		                } else {
		                    return 0;
		                }
		            } else {
		                return 0;
		            }
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Event}  this
			 */
		    Tone.Event.prototype.dispose = function () {
		        this.cancel();
		        this._state.dispose();
		        this._state = null;
		        this.callback = null;
		        this.value = null;
		    };
		    return Tone.Event;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Loop creates a looped callback at the 
			 *         specified interval. The callback can be 
			 *         started, stopped and scheduled along
			 *         the Transport's timeline. 
			 *  @example
			 * var loop = new Tone.Loop(function(time){
			 * 	//triggered every eighth note. 
			 * 	console.log(time);
			 * }, "8n").start(0);
			 * Tone.Transport.start();
			 *  @extends {Tone}
			 *  @param {Function} callback The callback to invoke with the event.
			 *  @param {Time} interval The time between successive callback calls. 
			 */
		    Tone.Loop = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'interval'
		        ], Tone.Loop.defaults);
		        /**
				 *  The event which produces the callbacks
				 */
		        this._event = new Tone.Event({
		            'callback': this._tick.bind(this),
		            'loop': true,
		            'loopEnd': options.interval,
		            'playbackRate': options.playbackRate,
		            'probability': options.probability
		        });
		        /**
				 *  The callback to invoke with the next event in the pattern
				 *  @type {Function}
				 */
		        this.callback = options.callback;
		        //set the iterations
		        this.iterations = options.iterations;
		    };
		    Tone.extend(Tone.Loop);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Loop.defaults = {
		        'interval': '4n',
		        'callback': Tone.noOp,
		        'playbackRate': 1,
		        'iterations': Infinity,
		        'probability': true,
		        'mute': false
		    };
		    /**
			 *  Start the loop at the specified time along the Transport's
			 *  timeline.
			 *  @param  {TimelinePosition=}  time  When to start the Loop.
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.start = function (time) {
		        this._event.start(time);
		        return this;
		    };
		    /**
			 *  Stop the loop at the given time.
			 *  @param  {TimelinePosition=}  time  When to stop the Arpeggio
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.stop = function (time) {
		        this._event.stop(time);
		        return this;
		    };
		    /**
			 *  Cancel all scheduled events greater than or equal to the given time
			 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.cancel = function (time) {
		        this._event.cancel(time);
		        return this;
		    };
		    /**
			 *  Internal function called when the notes should be called
			 *  @param  {Number}  time  The time the event occurs
			 *  @private
			 */
		    Tone.Loop.prototype._tick = function (time) {
		        this.callback(time);
		    };
		    /**
			 *  The state of the Loop, either started or stopped.
			 *  @memberOf Tone.Loop#
			 *  @type {String}
			 *  @name state
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'state', {
		        get: function () {
		            return this._event.state;
		        }
		    });
		    /**
			 *  The progress of the loop as a value between 0-1. 0, when
			 *  the loop is stopped or done iterating. 
			 *  @memberOf Tone.Loop#
			 *  @type {NormalRange}
			 *  @name progress
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'progress', {
		        get: function () {
		            return this._event.progress;
		        }
		    });
		    /**
			 *  The time between successive callbacks. 
			 *  @example
			 * loop.interval = "8n"; //loop every 8n
			 *  @memberOf Tone.Loop#
			 *  @type {Time}
			 *  @name interval
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'interval', {
		        get: function () {
		            return this._event.loopEnd;
		        },
		        set: function (interval) {
		            this._event.loopEnd = interval;
		        }
		    });
		    /**
			 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
			 *  A `playbackRate` of 2 would be twice as fast. 
			 *  @memberOf Tone.Loop#
			 *  @type {Time}
			 *  @name playbackRate
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {
		        get: function () {
		            return this._event.playbackRate;
		        },
		        set: function (rate) {
		            this._event.playbackRate = rate;
		        }
		    });
		    /**
			 *  Random variation +/-0.01s to the scheduled time. 
			 *  Or give it a time value which it will randomize by.
			 *  @type {Boolean|Time}
			 *  @memberOf Tone.Loop#
			 *  @name humanize
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'humanize', {
		        get: function () {
		            return this._event.humanize;
		        },
		        set: function (variation) {
		            this._event.humanize = variation;
		        }
		    });
		    /**
			 *  The probably of the callback being invoked.
			 *  @memberOf Tone.Loop#
			 *  @type {NormalRange}
			 *  @name probability
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'probability', {
		        get: function () {
		            return this._event.probability;
		        },
		        set: function (prob) {
		            this._event.probability = prob;
		        }
		    });
		    /**
			 *  Muting the Loop means that no callbacks are invoked.
			 *  @memberOf Tone.Loop#
			 *  @type {Boolean}
			 *  @name mute
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'mute', {
		        get: function () {
		            return this._event.mute;
		        },
		        set: function (mute) {
		            this._event.mute = mute;
		        }
		    });
		    /**
			 *  The number of iterations of the loop. The default
			 *  value is Infinity (loop forever).
			 *  @memberOf Tone.Loop#
			 *  @type {Positive}
			 *  @name iterations
			 */
		    Object.defineProperty(Tone.Loop.prototype, 'iterations', {
		        get: function () {
		            if (this._event.loop === true) {
		                return Infinity;
		            } else {
		                return this._event.loop;
		            }
		            return this._pattern.index;
		        },
		        set: function (iters) {
		            if (iters === Infinity) {
		                this._event.loop = true;
		            } else {
		                this._event.loop = iters;
		            }
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Loop}  this
			 */
		    Tone.Loop.prototype.dispose = function () {
		        this._event.dispose();
		        this._event = null;
		        this.callback = null;
		    };
		    return Tone.Loop;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.Part is a collection Tone.Events which can be
			 *         started/stoped and looped as a single unit.
			 *
			 *  @extends {Tone.Event}
			 *  @param {Function} callback The callback to invoke on each event
			 *  @param {Array} events the array of events
			 *  @example
			 * var part = new Tone.Part(function(time, note){
			 * 	//the notes given as the second element in the array
			 * 	//will be passed in as the second argument
			 * 	synth.triggerAttackRelease(note, "8n", time);
			 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
			 *  @example
			 * //use an array of objects as long as the object has a "time" attribute
			 * var part = new Tone.Part(function(time, value){
			 * 	//the value is an object which contains both the note and the velocity
			 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
			 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9}, 
			 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
			 * ]).start(0);
			 */
		    Tone.Part = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'events'
		        ], Tone.Part.defaults);
		        /**
				 *  If the part is looping or not
				 *  @type  {Boolean|Positive}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._loopStart = this.toTicks(options.loopStart);
		        /**
				 *  When the note is scheduled to start.
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._loopEnd = this.toTicks(options.loopEnd);
		        /**
				 *  The playback rate of the part
				 *  @type  {Positive}
				 *  @private
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  private holder of probability value
				 *  @type {NormalRange}
				 *  @private
				 */
		        this._probability = options.probability;
		        /**
				 *  the amount of variation from the
				 *  given time. 
				 *  @type {Boolean|Time}
				 *  @private
				 */
		        this._humanize = options.humanize;
		        /**
				 *  The start offset
				 *  @type {Ticks}
				 *  @private
				 */
		        this._startOffset = 0;
		        /**
				 *  Keeps track of the current state
				 *  @type {Tone.TimelineState}
				 *  @private
				 */
		        this._state = new Tone.TimelineState(Tone.State.Stopped);
		        /**
				 *  An array of Objects. 
				 *  @type  {Array}
				 *  @private
				 */
		        this._events = [];
		        /**
				 *  The callback to invoke at all the scheduled events.
				 *  @type {Function}
				 */
		        this.callback = options.callback;
		        /**
				 *  If mute is true, the callback won't be
				 *  invoked.
				 *  @type {Boolean}
				 */
		        this.mute = options.mute;
		        //add the events
		        var events = this.defaultArg(options.events, []);
		        if (!this.isUndef(options.events)) {
		            for (var i = 0; i < events.length; i++) {
		                if (Array.isArray(events[i])) {
		                    this.add(events[i][0], events[i][1]);
		                } else {
		                    this.add(events[i]);
		                }
		            }
		        }
		    };
		    Tone.extend(Tone.Part, Tone.Event);
		    /**
			 *  The default values
			 *  @type  {Object}
			 *  @const
			 */
		    Tone.Part.defaults = {
		        'callback': Tone.noOp,
		        'loop': false,
		        'loopEnd': '1m',
		        'loopStart': 0,
		        'playbackRate': 1,
		        'probability': 1,
		        'humanize': false,
		        'mute': false
		    };
		    /**
			 *  Start the part at the given time. 
			 *  @param  {TransportTime}  time    When to start the part.
			 *  @param  {Time=}  offset  The offset from the start of the part
			 *                           to begin playing at.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.start = function (time, offset) {
		        var ticks = this.toTicks(time);
		        if (this._state.getStateAtTime(ticks) !== Tone.State.Started) {
		            if (this._loop) {
		                offset = this.defaultArg(offset, this._loopStart);
		            } else {
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toTicks(offset);
		            this._state.addEvent({
		                'state': Tone.State.Started,
		                'time': ticks,
		                'offset': offset
		            });
		            this._forEach(function (event) {
		                this._startNote(event, ticks, offset);
		            });
		        }
		        return this;
		    };
		    /**
			 *  Start the event in the given event at the correct time given
			 *  the ticks and offset and looping.
			 *  @param  {Tone.Event}  event 
			 *  @param  {Ticks}  ticks
			 *  @param  {Ticks}  offset
			 *  @private
			 */
		    Tone.Part.prototype._startNote = function (event, ticks, offset) {
		        ticks -= offset;
		        if (this._loop) {
		            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
		                if (event.startOffset < offset) {
		                    //start it on the next loop
		                    ticks += this._getLoopDuration();
		                }
		                event.start(Tone.TransportTime(ticks, 'i'));
		            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
		                event.loop = false;
		                event.start(Tone.TransportTime(ticks, 'i'));
		            }
		        } else {
		            if (event.startOffset >= offset) {
		                event.start(Tone.TransportTime(ticks, 'i'));
		            }
		        }
		    };
		    /**
			 *  The start from the scheduled start time
			 *  @type {Ticks}
			 *  @memberOf Tone.Part#
			 *  @name startOffset
			 *  @private
			 */
		    Object.defineProperty(Tone.Part.prototype, 'startOffset', {
		        get: function () {
		            return this._startOffset;
		        },
		        set: function (offset) {
		            this._startOffset = offset;
		            this._forEach(function (event) {
		                event.startOffset += this._startOffset;
		            });
		        }
		    });
		    /**
			 *  Stop the part at the given time.
			 *  @param  {TimelinePosition}  time  When to stop the part.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.stop = function (time) {
		        var ticks = this.toTicks(time);
		        this._state.cancel(ticks);
		        this._state.setStateAtTime(Tone.State.Stopped, ticks);
		        this._forEach(function (event) {
		            event.stop(time);
		        });
		        return this;
		    };
		    /**
			 *  Get/Set an Event's value at the given time. 
			 *  If a value is passed in and no event exists at
			 *  the given time, one will be created with that value. 
			 *  If two events are at the same time, the first one will
			 *  be returned.
			 *  @example
			 * part.at("1m"); //returns the part at the first measure
			 *
			 * part.at("2m", "C2"); //set the value at "2m" to C2. 
			 * //if an event didn't exist at that time, it will be created.
			 *  @param {TransportTime} time The time of the event to get or set.
			 *  @param {*=} value If a value is passed in, the value of the
			 *                    event at the given time will be set to it.
			 *  @return {Tone.Event} the event at the time
			 */
		    Tone.Part.prototype.at = function (time, value) {
		        time = Tone.TransportTime(time);
		        var tickTime = Tone.Time(1, 'i').toSeconds();
		        for (var i = 0; i < this._events.length; i++) {
		            var event = this._events[i];
		            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {
		                if (!this.isUndef(value)) {
		                    event.value = value;
		                }
		                return event;
		            }
		        }
		        //if there was no event at that time, create one
		        if (!this.isUndef(value)) {
		            this.add(time, value);
		            //return the new event
		            return this._events[this._events.length - 1];
		        } else {
		            return null;
		        }
		    };
		    /**
			 *  Add a an event to the part. 
			 *  @param {Time} time The time the note should start.
			 *                            If an object is passed in, it should
			 *                            have a 'time' attribute and the rest
			 *                            of the object will be used as the 'value'.
			 *  @param  {Tone.Event|*}  value 
			 *  @returns {Tone.Part} this
			 *  @example
			 * part.add("1m", "C#+11");
			 */
		    Tone.Part.prototype.add = function (time, value) {
		        //extract the parameters
		        if (time.hasOwnProperty('time')) {
		            value = time;
		            time = value.time;
		        }
		        time = this.toTicks(time);
		        var event;
		        if (value instanceof Tone.Event) {
		            event = value;
		            event.callback = this._tick.bind(this);
		        } else {
		            event = new Tone.Event({
		                'callback': this._tick.bind(this),
		                'value': value
		            });
		        }
		        //the start offset
		        event.startOffset = time;
		        //initialize the values
		        event.set({
		            'loopEnd': this.loopEnd,
		            'loopStart': this.loopStart,
		            'loop': this.loop,
		            'humanize': this.humanize,
		            'playbackRate': this.playbackRate,
		            'probability': this.probability
		        });
		        this._events.push(event);
		        //start the note if it should be played right now
		        this._restartEvent(event);
		        return this;
		    };
		    /**
			 *  Restart the given event
			 *  @param  {Tone.Event}  event 
			 *  @private
			 */
		    Tone.Part.prototype._restartEvent = function (event) {
		        var stateEvent = this._state.getEvent(Tone.Transport.ticks);
		        if (stateEvent && stateEvent.state === Tone.State.Started) {
		            this._startNote(event, stateEvent.time, stateEvent.offset);
		        }
		    };
		    /**
			 *  Remove an event from the part. Will recursively iterate
			 *  into nested parts to find the event.
			 *  @param {Time} time The time of the event
			 *  @param {*} value Optionally select only a specific event value
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.remove = function (time, value) {
		        //extract the parameters
		        if (time.hasOwnProperty('time')) {
		            value = time;
		            time = value.time;
		        }
		        time = this.toTicks(time);
		        for (var i = this._events.length - 1; i >= 0; i--) {
		            var event = this._events[i];
		            if (event instanceof Tone.Part) {
		                event.remove(time, value);
		            } else {
		                if (event.startOffset === time) {
		                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {
		                        this._events.splice(i, 1);
		                        event.dispose();
		                    }
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Remove all of the notes from the group. 
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.removeAll = function () {
		        this._forEach(function (event) {
		            event.dispose();
		        });
		        this._events = [];
		        return this;
		    };
		    /**
			 *  Cancel scheduled state change events: i.e. "start" and "stop".
			 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.cancel = function (after) {
		        after = this.toTicks(after);
		        this._forEach(function (event) {
		            event.cancel(after);
		        });
		        this._state.cancel(after);
		        return this;
		    };
		    /**
			 *  Iterate over all of the events
			 *  @param {Function} callback
			 *  @param {Object} ctx The context
			 *  @private
			 */
		    Tone.Part.prototype._forEach = function (callback, ctx) {
		        ctx = this.defaultArg(ctx, this);
		        for (var i = this._events.length - 1; i >= 0; i--) {
		            var e = this._events[i];
		            if (e instanceof Tone.Part) {
		                e._forEach(callback, ctx);
		            } else {
		                callback.call(ctx, e);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Set the attribute of all of the events
			 *  @param  {String}  attr  the attribute to set
			 *  @param  {*}  value      The value to set it to
			 *  @private
			 */
		    Tone.Part.prototype._setAll = function (attr, value) {
		        this._forEach(function (event) {
		            event[attr] = value;
		        });
		    };
		    /**
			 *  Internal tick method
			 *  @param  {Number}  time  The time of the event in seconds
			 *  @private
			 */
		    Tone.Part.prototype._tick = function (time, value) {
		        if (!this.mute) {
		            this.callback(time, value);
		        }
		    };
		    /**
			 *  Determine if the event should be currently looping
			 *  given the loop boundries of this Part.
			 *  @param  {Tone.Event}  event  The event to test
			 *  @private
			 */
		    Tone.Part.prototype._testLoopBoundries = function (event) {
		        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {
		            event.cancel();
		        } else {
		            //reschedule it if it's stopped
		            if (event.state === Tone.State.Stopped) {
		                this._restartEvent(event);
		            }
		        }
		    };
		    /**
			 *  The probability of the notes being triggered.
			 *  @memberOf Tone.Part#
			 *  @type {NormalRange}
			 *  @name probability
			 */
		    Object.defineProperty(Tone.Part.prototype, 'probability', {
		        get: function () {
		            return this._probability;
		        },
		        set: function (prob) {
		            this._probability = prob;
		            this._setAll('probability', prob);
		        }
		    });
		    /**
			 *  If set to true, will apply small random variation
			 *  to the callback time. If the value is given as a time, it will randomize
			 *  by that amount.
			 *  @example
			 * event.humanize = true;
			 *  @type {Boolean|Time}
			 *  @name humanize
			 */
		    Object.defineProperty(Tone.Part.prototype, 'humanize', {
		        get: function () {
		            return this._humanize;
		        },
		        set: function (variation) {
		            this._humanize = variation;
		            this._setAll('humanize', variation);
		        }
		    });
		    /**
			 *  If the part should loop or not
			 *  between Tone.Part.loopStart and 
			 *  Tone.Part.loopEnd. An integer
			 *  value corresponds to the number of
			 *  loops the Part does after it starts.
			 *  @memberOf Tone.Part#
			 *  @type {Boolean|Positive}
			 *  @name loop
			 *  @example
			 * //loop the part 8 times
			 * part.loop = 8;
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            this._forEach(function (event) {
		                event._loopStart = this._loopStart;
		                event._loopEnd = this._loopEnd;
		                event.loop = loop;
		                this._testLoopBoundries(event);
		            });
		        }
		    });
		    /**
			 *  The loopEnd point determines when it will 
			 *  loop if Tone.Part.loop is true.
			 *  @memberOf Tone.Part#
			 *  @type {TransportTime}
			 *  @name loopEnd
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {
		        get: function () {
		            return Tone.TransportTime(this._loopEnd, 'i').toNotation();
		        },
		        set: function (loopEnd) {
		            this._loopEnd = this.toTicks(loopEnd);
		            if (this._loop) {
		                this._forEach(function (event) {
		                    event.loopEnd = this.loopEnd;
		                    this._testLoopBoundries(event);
		                });
		            }
		        }
		    });
		    /**
			 *  The loopStart point determines when it will 
			 *  loop if Tone.Part.loop is true.
			 *  @memberOf Tone.Part#
			 *  @type {TransportTime}
			 *  @name loopStart
			 */
		    Object.defineProperty(Tone.Part.prototype, 'loopStart', {
		        get: function () {
		            return Tone.TransportTime(this._loopStart, 'i').toNotation();
		        },
		        set: function (loopStart) {
		            this._loopStart = this.toTicks(loopStart);
		            if (this._loop) {
		                this._forEach(function (event) {
		                    event.loopStart = this.loopStart;
		                    this._testLoopBoundries(event);
		                });
		            }
		        }
		    });
		    /**
			 * 	The playback rate of the part
			 *  @memberOf Tone.Part#
			 *  @type {Positive}
			 *  @name playbackRate
			 */
		    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this._setAll('playbackRate', rate);
		        }
		    });
		    /**
			 * 	The number of scheduled notes in the part. 
			 *  @memberOf Tone.Part#
			 *  @type {Positive}
			 *  @name length
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Part.prototype, 'length', {
		        get: function () {
		            return this._events.length;
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Part}  this
			 */
		    Tone.Part.prototype.dispose = function () {
		        this.removeAll();
		        this._state.dispose();
		        this._state = null;
		        this.callback = null;
		        this._events = null;
		        return this;
		    };
		    return Tone.Part;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.Pattern arpeggiates between the given notes
			 *         in a number of patterns. See Tone.CtrlPattern for
			 *         a full list of patterns.
			 *  @example
			 * var pattern = new Tone.Pattern(function(time, note){
			 *   //the order of the notes passed in depends on the pattern
			 * }, ["C2", "D4", "E5", "A6"], "upDown");
			 *  @extends {Tone.Loop}
			 *  @param {Function} callback The callback to invoke with the
			 *                             event.
			 *  @param {Array} values The values to arpeggiate over.
			 */
		    Tone.Pattern = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'values',
		            'pattern'
		        ], Tone.Pattern.defaults);
		        Tone.Loop.call(this, options);
		        /**
				 *  The pattern manager
				 *  @type {Tone.CtrlPattern}
				 *  @private
				 */
		        this._pattern = new Tone.CtrlPattern({
		            'values': options.values,
		            'type': options.pattern,
		            'index': options.index
		        });
		    };
		    Tone.extend(Tone.Pattern, Tone.Loop);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.Pattern.defaults = {
		        'pattern': Tone.CtrlPattern.Type.Up,
		        'values': []
		    };
		    /**
			 *  Internal function called when the notes should be called
			 *  @param  {Number}  time  The time the event occurs
			 *  @private
			 */
		    Tone.Pattern.prototype._tick = function (time) {
		        this.callback(time, this._pattern.value);
		        this._pattern.next();
		    };
		    /**
			 *  The current index in the values array.
			 *  @memberOf Tone.Pattern#
			 *  @type {Positive}
			 *  @name index
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'index', {
		        get: function () {
		            return this._pattern.index;
		        },
		        set: function (i) {
		            this._pattern.index = i;
		        }
		    });
		    /**
			 *  The array of events.
			 *  @memberOf Tone.Pattern#
			 *  @type {Array}
			 *  @name values
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'values', {
		        get: function () {
		            return this._pattern.values;
		        },
		        set: function (vals) {
		            this._pattern.values = vals;
		        }
		    });
		    /**
			 *  The current value of the pattern.
			 *  @memberOf Tone.Pattern#
			 *  @type {*}
			 *  @name value
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'value', {
		        get: function () {
		            return this._pattern.value;
		        }
		    });
		    /**
			 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
			 *  @memberOf Tone.Pattern#
			 *  @type {String}
			 *  @name pattern
			 */
		    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {
		        get: function () {
		            return this._pattern.type;
		        },
		        set: function (pattern) {
		            this._pattern.type = pattern;
		        }
		    });
		    /**
			 *  Clean up
			 *  @return  {Tone.Pattern}  this
			 */
		    Tone.Pattern.prototype.dispose = function () {
		        Tone.Loop.prototype.dispose.call(this);
		        this._pattern.dispose();
		        this._pattern = null;
		    };
		    return Tone.Pattern;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class A sequence is an alternate notation of a part. Instead
			 *         of passing in an array of [time, event] pairs, pass
			 *         in an array of events which will be spaced at the
			 *         given subdivision. Sub-arrays will subdivide that beat
			 *         by the number of items are in the array. 
			 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
			 *  @param  {Function}  callback  The callback to invoke with every note
			 *  @param  {Array}    events  The sequence
			 *  @param  {Time} subdivision  The subdivision between which events are placed. 
			 *  @extends {Tone.Part}
			 *  @example
			 * var seq = new Tone.Sequence(function(time, note){
			 * 	console.log(note);
			 * //straight quater notes
			 * }, ["C4", "E4", "G4", "A4"], "4n");
			 *  @example
			 * var seq = new Tone.Sequence(function(time, note){
			 * 	console.log(note);
			 * //subdivisions are given as subarrays
			 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
			 */
		    Tone.Sequence = function () {
		        var options = this.optionsObject(arguments, [
		            'callback',
		            'events',
		            'subdivision'
		        ], Tone.Sequence.defaults);
		        //remove the events
		        var events = options.events;
		        delete options.events;
		        Tone.Part.call(this, options);
		        /**
				 *  The subdivison of each note
				 *  @type  {Ticks}
				 *  @private
				 */
		        this._subdivision = this.toTicks(options.subdivision);
		        //if no time was passed in, the loop end is the end of the cycle
		        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {
		            this._loopEnd = events.length * this._subdivision;
		        }
		        //defaults to looping
		        this._loop = true;
		        //add all of the events
		        if (!this.isUndef(events)) {
		            for (var i = 0; i < events.length; i++) {
		                this.add(i, events[i]);
		            }
		        }
		    };
		    Tone.extend(Tone.Sequence, Tone.Part);
		    /**
			 *  The default values.
			 *  @type  {Object}
			 */
		    Tone.Sequence.defaults = { 'subdivision': '4n' };
		    /**
			 *  The subdivision of the sequence. This can only be 
			 *  set in the constructor. The subdivision is the 
			 *  interval between successive steps. 
			 *  @type {Time}
			 *  @memberOf Tone.Sequence#
			 *  @name subdivision
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {
		        get: function () {
		            return Tone.Time(this._subdivision, 'i').toNotation();
		        }
		    });
		    /**
			 *  Get/Set an index of the sequence. If the index contains a subarray, 
			 *  a Tone.Sequence representing that sub-array will be returned. 
			 *  @example
			 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
			 * sequence.at(0)// => returns "E4"
			 * //set a value
			 * sequence.at(0, "G3");
			 * //get a nested sequence
			 * sequence.at(3).at(1)// => returns "Bb3"
			 * @param {Positive} index The index to get or set
			 * @param {*} value Optionally pass in the value to set at the given index.
			 */
		    Tone.Sequence.prototype.at = function (index, value) {
		        //if the value is an array, 
		        if (this.isArray(value)) {
		            //remove the current event at that index
		            this.remove(index);
		        }
		        //call the parent's method
		        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);
		    };
		    /**
			 *  Add an event at an index, if there's already something
			 *  at that index, overwrite it. If `value` is an array, 
			 *  it will be parsed as a subsequence.
			 *  @param {Number} index The index to add the event to
			 *  @param {*} value The value to add at that index
			 *  @returns {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.add = function (index, value) {
		        if (value === null) {
		            return this;
		        }
		        if (this.isArray(value)) {
		            //make a subsequence and add that to the sequence
		            var subSubdivision = Math.round(this._subdivision / value.length);
		            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));
		        }
		        Tone.Part.prototype.add.call(this, this._indexTime(index), value);
		        return this;
		    };
		    /**
			 *  Remove a value from the sequence by index
			 *  @param {Number} index The index of the event to remove
			 *  @returns {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.remove = function (index, value) {
		        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);
		        return this;
		    };
		    /**
			 *  Get the time of the index given the Sequence's subdivision
			 *  @param  {Number}  index 
			 *  @return  {Time}  The time of that index
			 *  @private
			 */
		    Tone.Sequence.prototype._indexTime = function (index) {
		        if (index instanceof Tone.TransportTime) {
		            return index;
		        } else {
		            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');
		        }
		    };
		    /**
			 *  Clean up.
			 *  @return {Tone.Sequence} this
			 */
		    Tone.Sequence.prototype.dispose = function () {
		        Tone.Part.prototype.dispose.call(this);
		        return this;
		    };
		    return Tone.Sequence;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
			 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is 
			 *         a square and only odd-numbered harmonics are present. At all other widths 
			 *         even-numbered harmonics are present. Read more 
			 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
			 *
			 *  @constructor
			 *  @extends {Tone.Oscillator}
			 *  @param {Frequency} [frequency] The frequency of the oscillator
			 *  @param {NormalRange} [width] The width of the pulse
			 *  @example
			 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
			 */
		    Tone.PulseOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'width'
		        ], Tone.Oscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The width of the pulse. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
		        /**
				 *  gate the width amount
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._widthGate = new Tone.Gain();
		        /**
				 *  the sawtooth oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._sawtooth = new Tone.Oscillator({
		            frequency: options.frequency,
		            detune: options.detune,
		            type: 'sawtooth',
		            phase: options.phase
		        });
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._sawtooth.frequency;
		        /**
				 *  The detune in cents. 
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._sawtooth.detune;
		        /**
				 *  Threshold the signal to turn it into a square
				 *  @type {Tone.WaveShaper}
				 *  @private
				 */
		        this._thresh = new Tone.WaveShaper(function (val) {
		            if (val < 0) {
		                return -1;
		            } else {
		                return 1;
		            }
		        });
		        //connections
		        this._sawtooth.chain(this._thresh, this.output);
		        this.width.chain(this._widthGate, this._thresh);
		        this._readOnly([
		            'width',
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);
		    /**
			 *  The default parameters.
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.PulseOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'width': 0.2
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} time 
			 *  @private
			 */
		    Tone.PulseOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._sawtooth.start(time);
		        this._widthGate.gain.setValueAtTime(1, time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time 
			 *  @private
			 */
		    Tone.PulseOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._sawtooth.stop(time);
		        //the width is still connected to the output. 
		        //that needs to be stopped also
		        this._widthGate.gain.setValueAtTime(0, time);
		    };
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.PulseOscillator#
			 * @type {Degrees}
			 * @name phase
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {
		        get: function () {
		            return this._sawtooth.phase;
		        },
		        set: function (phase) {
		            this._sawtooth.phase = phase;
		        }
		    });
		    /**
			 * The type of the oscillator. Always returns "pulse".
			 * @readOnly
			 * @memberOf Tone.PulseOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {
		        get: function () {
		            return 'pulse';
		        }
		    });
		    /**
			 * The partials of the waveform. Cannot set partials for this waveform type
			 * @memberOf Tone.PulseOscillator#
			 * @type {Array}
			 * @name partials
			 * @private
			 */
		    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {
		        get: function () {
		            return [];
		        }
		    });
		    /**
			 *  Clean up method.
			 *  @return {Tone.PulseOscillator} this
			 */
		    Tone.PulseOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._sawtooth.dispose();
		        this._sawtooth = null;
		        this._writable([
		            'width',
		            'frequency',
		            'detune'
		        ]);
		        this.width.dispose();
		        this.width = null;
		        this._widthGate.dispose();
		        this._widthGate = null;
		        this._thresh.dispose();
		        this._thresh = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.PulseOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator 
			 *         at the modulationFrequency. This has the effect of continuously
			 *         changing the timbre of the oscillator by altering the harmonics 
			 *         generated.
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. 
			 *  @example
			 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
			 */
		    Tone.PWMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'modulationFrequency'
		        ], Tone.PWMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  the pulse oscillator
				 *  @type {Tone.PulseOscillator}
				 *  @private
				 */
		        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);
		        //change the pulse oscillator type
		        this._pulse._sawtooth.type = 'sine';
		        /**
				 *  the modulator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator({
		            'frequency': options.frequency,
		            'detune': options.detune,
		            'phase': options.phase
		        });
		        /**
				 *  Scale the oscillator so it doesn't go silent 
				 *  at the extreme values.
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._scale = new Tone.Multiply(2);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._modulator.frequency;
		        /**
				 *  The detune of the oscillator.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._modulator.detune;
		        /**
				 *  The modulation rate of the oscillator. 
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.modulationFrequency = this._pulse.frequency;
		        //connections
		        this._modulator.chain(this._scale, this._pulse.width);
		        this._pulse.connect(this.output);
		        this._readOnly([
		            'modulationFrequency',
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.PWMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationFrequency': 0.4
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.PWMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._pulse.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.PWMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._pulse.stop(time);
		    };
		    /**
			 * The type of the oscillator. Always returns "pwm".
			 * @readOnly
			 * @memberOf Tone.PWMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {
		        get: function () {
		            return 'pwm';
		        }
		    });
		    /**
			 * The partials of the waveform. Cannot set partials for this waveform type
			 * @memberOf Tone.PWMOscillator#
			 * @type {Array}
			 * @name partials
			 * @private
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {
		        get: function () {
		            return [];
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.PWMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._modulator.phase;
		        },
		        set: function (phase) {
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.PWMOscillator} this
			 */
		    Tone.PWMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._pulse.dispose();
		        this._pulse = null;
		        this._scale.dispose();
		        this._scale = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._writable([
		            'modulationFrequency',
		            'frequency',
		            'detune'
		        ]);
		        this.frequency = null;
		        this.detune = null;
		        this.modulationFrequency = null;
		        return this;
		    };
		    return Tone.PWMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FMOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.FMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'modulationType'
		        ], Tone.FMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The carrier oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._carrier = new Tone.Oscillator(options.frequency, options.type);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._carrier.detune;
		        this.detune.value = options.detune;
		        /**
				 *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
				 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
				 *  modulating signal (ma) -- as in ma/mf. 
				 *	@type {Positive}
				 *	@signal
				 */
		        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
		        this.modulationIndex.units = Tone.Type.Positive;
		        /**
				 *  The modulating oscillator
				 *  @type  {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
		        /**
				 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
				 *  A harmonicity of 1 gives both oscillators the same frequency. 
				 *  Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch the modulator an octave below carrier
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //connections
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.frequency.chain(this.modulationIndex, this._modulationNode);
		        this._modulator.connect(this._modulationNode.gain);
		        this._modulationNode.connect(this._carrier.frequency);
		        this._carrier.connect(this.output);
		        this.detune.connect(this._modulator.detune);
		        this.phase = options.phase;
		        this._readOnly([
		            'modulationIndex',
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		    };
		    Tone.extend(Tone.FMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.FMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationIndex': 2,
		        'modulationType': 'square',
		        'harmonicity': 1
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.FMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._carrier.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.FMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._carrier.stop(time);
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.FMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {
		        get: function () {
		            return this._carrier.type;
		        },
		        set: function (type) {
		            this._carrier.type = type;
		        }
		    });
		    /**
			 * The type of the modulator oscillator
			 * @memberOf Tone.FMOscillator#
			 * @type {String}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {
		        get: function () {
		            return this._modulator.type;
		        },
		        set: function (type) {
		            this._modulator.type = type;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.FMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._carrier.phase;
		        },
		        set: function (phase) {
		            this._carrier.phase = phase;
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.FMOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {
		        get: function () {
		            return this._carrier.partials;
		        },
		        set: function (partials) {
		            this._carrier.partials = partials;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.FMOscillator} this
			 */
		    Tone.FMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'modulationIndex',
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.modulationIndex.dispose();
		        this.modulationIndex = null;
		        return this;
		    };
		    return Tone.FMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.AMOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.AMOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'modulationType'
		        ], Tone.AMOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The carrier oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._carrier = new Tone.Oscillator(options.frequency, options.type);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this._carrier.frequency;
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this._carrier.detune;
		        this.detune.value = options.detune;
		        /**
				 *  The modulating oscillator
				 *  @type  {Tone.Oscillator}
				 *  @private
				 */
		        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
		        /**
				 *  convert the -1,1 output to 0,1
				 *  @type {Tone.AudioToGain}
				 *  @private
				 */
		        this._modulationScale = new Tone.AudioToGain();
		        /**
				 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
				 *  A harmonicity of 1 gives both oscillators the same frequency. 
				 *  Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch the modulator an octave below carrier
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //connections
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.detune.connect(this._modulator.detune);
		        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
		        this._carrier.chain(this._modulationNode, this.output);
		        this.phase = options.phase;
		        this._readOnly([
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		    };
		    Tone.extend(Tone.AMOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.AMOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'modulationType': 'square',
		        'harmonicity': 1
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.AMOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.start(time);
		        this._carrier.start(time);
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.AMOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._modulator.stop(time);
		        this._carrier.stop(time);
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.AMOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {
		        get: function () {
		            return this._carrier.type;
		        },
		        set: function (type) {
		            this._carrier.type = type;
		        }
		    });
		    /**
			 * The type of the modulator oscillator
			 * @memberOf Tone.AMOscillator#
			 * @type {string}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {
		        get: function () {
		            return this._modulator.type;
		        },
		        set: function (type) {
		            this._modulator.type = type;
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.AMOscillator#
			 * @type {number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {
		        get: function () {
		            return this._carrier.phase;
		        },
		        set: function (phase) {
		            this._carrier.phase = phase;
		            this._modulator.phase = phase;
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.AMOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {
		        get: function () {
		            return this._carrier.partials;
		        },
		        set: function (partials) {
		            this._carrier.partials = partials;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.AMOscillator} this
			 */
		    Tone.AMOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune',
		            'harmonicity'
		        ]);
		        this.frequency = null;
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this._modulationScale.dispose();
		        this._modulationScale = null;
		        return this;
		    };
		    return Tone.AMOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.FatOscillator 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The starting frequency of the oscillator. 
			 *  @param {String} type The type of the carrier oscillator.
			 *  @param {String} modulationType The type of the modulator oscillator.
			 *  @example
			 * //a sine oscillator frequency-modulated by a square wave
			 * var fmOsc = new Tone.FatOscillator("Ab3", "sine", "square").toMaster().start();
			 */
		    Tone.FatOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type',
		            'spread'
		        ], Tone.FatOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The oscillator's frequency
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control signal.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  The array of oscillators
				 *  @type {Array}
				 *  @private
				 */
		        this._oscillators = [];
		        /**
				 *  The total spread of the oscillators
				 *  @type  {Cents}
				 *  @private
				 */
		        this._spread = options.spread;
		        /**
				 *  The type of the oscillator
				 *  @type {String}
				 *  @private
				 */
		        this._type = options.type;
		        /**
				 *  The phase of the oscillators
				 *  @type {Degrees}
				 *  @private
				 */
		        this._phase = options.phase;
		        /**
				 *  The partials array
				 *  @type {Array}
				 *  @private
				 */
		        this._partials = this.defaultArg(options.partials, []);
		        //set the count initially
		        this.count = options.count;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.FatOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.FatOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'phase': 0,
		        'spread': 20,
		        'count': 3,
		        'type': 'sawtooth'
		    };
		    /**
			 *  start the oscillator
			 *  @param  {Time} [time=now]
			 *  @private
			 */
		    Tone.FatOscillator.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._forEach(function (osc) {
		            osc.start(time);
		        });
		    };
		    /**
			 *  stop the oscillator
			 *  @param  {Time} time (optional) timing parameter
			 *  @private
			 */
		    Tone.FatOscillator.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._forEach(function (osc) {
		            osc.stop(time);
		        });
		    };
		    /**
			 *  Iterate over all of the oscillators
			 *  @param  {Function}  iterator  The iterator function
			 *  @private
			 */
		    Tone.FatOscillator.prototype._forEach = function (iterator) {
		        for (var i = 0; i < this._oscillators.length; i++) {
		            iterator.call(this, this._oscillators[i], i);
		        }
		    };
		    /**
			 * The type of the carrier oscillator
			 * @memberOf Tone.FatOscillator#
			 * @type {string}
			 * @name type
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {
		        get: function () {
		            return this._type;
		        },
		        set: function (type) {
		            this._type = type;
		            this._forEach(function (osc) {
		                osc.type = type;
		            });
		        }
		    });
		    /**
			 * The detune spread between the oscillators. If "count" is
			 * set to 3 oscillators and the "spread" is set to 40,
			 * the three oscillators would be detuned like this: [-20, 0, 20]
			 * for a total detune spread of 40 cents.
			 * @memberOf Tone.FatOscillator#
			 * @type {Cents}
			 * @name spread
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {
		        get: function () {
		            return this._spread;
		        },
		        set: function (spread) {
		            this._spread = spread;
		            if (this._oscillators.length > 1) {
		                var start = -spread / 2;
		                var step = spread / (this._oscillators.length - 1);
		                this._forEach(function (osc, i) {
		                    osc.detune.value = start + step * i;
		                });
		            }
		        }
		    });
		    /**
			 * The number of detuned oscillators
			 * @memberOf Tone.FatOscillator#
			 * @type {Number}
			 * @name count
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {
		        get: function () {
		            return this._oscillators.length;
		        },
		        set: function (count) {
		            count = Math.max(count, 1);
		            if (this._oscillators.length !== count) {
		                // var partials = this.partials;
		                // var type = this.type;
		                //dispose the previous oscillators
		                this._forEach(function (osc) {
		                    osc.dispose();
		                });
		                this._oscillators = [];
		                for (var i = 0; i < count; i++) {
		                    var osc = new Tone.Oscillator();
		                    if (this.type === Tone.Oscillator.Type.Custom) {
		                        osc.partials = this._partials;
		                    } else {
		                        osc.type = this._type;
		                    }
		                    osc.phase = this._phase;
		                    osc.volume.value = -6 - count;
		                    this.frequency.connect(osc.frequency);
		                    this.detune.connect(osc.detune);
		                    osc.connect(this.output);
		                    this._oscillators[i] = osc;
		                }
		                //set the spread
		                this.spread = this._spread;
		                if (this.state === Tone.State.Started) {
		                    this._forEach(function (osc) {
		                        osc.start();
		                    });
		                }
		            }
		        }
		    });
		    /**
			 * The phase of the oscillator in degrees.
			 * @memberOf Tone.FatOscillator#
			 * @type {Number}
			 * @name phase
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {
		        get: function () {
		            return this._phase;
		        },
		        set: function (phase) {
		            this._phase = phase;
		            this._forEach(function (osc) {
		                osc.phase = phase;
		            });
		        }
		    });
		    /**
			 * The partials of the carrier waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * @memberOf Tone.FatOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {
		        get: function () {
		            return this._partials;
		        },
		        set: function (partials) {
		            this._partials = partials;
		            this._type = Tone.Oscillator.Type.Custom;
		            this._forEach(function (osc) {
		                osc.partials = partials;
		            });
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.FatOscillator} this
			 */
		    Tone.FatOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this._forEach(function (osc) {
		            osc.dispose();
		        });
		        this._oscillators = null;
		        this._partials = null;
		        return this;
		    };
		    return Tone.FatOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
			 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
			 *         into one class. The oscillator class can be changed by setting the `type`. 
			 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
			 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
			 *         will use the FMOscillator, AMOscillator or FatOscillator respectively. 
			 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
			 *         to a FatOscillator of type "sawtooth". 
			 *
			 *  @extends {Tone.Oscillator}
			 *  @constructor
			 *  @param {Frequency} frequency The initial frequency of the oscillator.
			 *  @param {String} type The type of the oscillator.
			 *  @example
			 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
			 */
		    Tone.OmniOscillator = function () {
		        var options = this.optionsObject(arguments, [
		            'frequency',
		            'type'
		        ], Tone.OmniOscillator.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The detune control
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  the type of the oscillator source
				 *  @type {String}
				 *  @private
				 */
		        this._sourceType = undefined;
		        /**
				 *  the oscillator
				 *  @type {Tone.Oscillator}
				 *  @private
				 */
		        this._oscillator = null;
		        //set the oscillator
		        this.type = options.type;
		        this._readOnly([
		            'frequency',
		            'detune'
		        ]);
		        //set the options
		        this.set(options);
		    };
		    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);
		    /**
			 *  default values
			 *  @static
			 *  @type {Object}
			 *  @const
			 */
		    Tone.OmniOscillator.defaults = {
		        'frequency': 440,
		        'detune': 0,
		        'type': 'sine',
		        'phase': 0
		    };
		    /**
			 *  @enum {String}
			 *  @private
			 */
		    var OmniOscType = {
		        Pulse: 'PulseOscillator',
		        PWM: 'PWMOscillator',
		        Osc: 'Oscillator',
		        FM: 'FMOscillator',
		        AM: 'AMOscillator',
		        Fat: 'FatOscillator'
		    };
		    /**
			 *  start the oscillator
			 *  @param {Time} [time=now] the time to start the oscillator
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._start = function (time) {
		        this._oscillator.start(time);
		    };
		    /**
			 *  start the oscillator
			 *  @param {Time} [time=now] the time to start the oscillator
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._stop = function (time) {
		        this._oscillator.stop(time);
		    };
		    /**
			 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
			 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
			 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
			 * oscillator's class are accessible when the oscillator is set to that type, but throws an error 
			 * when it's not.
			 * 
			 * @memberOf Tone.OmniOscillator#
			 * @type {String}
			 * @name type
			 * @example
			 * omniOsc.type = "pwm";
			 * //modulationFrequency is parameter which is available
			 * //only when the type is "pwm". 
			 * omniOsc.modulationFrequency.value = 0.5;
			 * @example
			 * //an square wave frequency modulated by a sawtooth
			 * omniOsc.type = "fmsquare";
			 * omniOsc.modulationType = "sawtooth";
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {
		        get: function () {
		            var prefix = '';
		            if (this._sourceType === OmniOscType.FM) {
		                prefix = 'fm';
		            } else if (this._sourceType === OmniOscType.AM) {
		                prefix = 'am';
		            } else if (this._sourceType === OmniOscType.Fat) {
		                prefix = 'fat';
		            }
		            return prefix + this._oscillator.type;
		        },
		        set: function (type) {
		            if (type.substr(0, 2) === 'fm') {
		                this._createNewOscillator(OmniOscType.FM);
		                this._oscillator.type = type.substr(2);
		            } else if (type.substr(0, 2) === 'am') {
		                this._createNewOscillator(OmniOscType.AM);
		                this._oscillator.type = type.substr(2);
		            } else if (type.substr(0, 3) === 'fat') {
		                this._createNewOscillator(OmniOscType.Fat);
		                this._oscillator.type = type.substr(3);
		            } else if (type === 'pwm') {
		                this._createNewOscillator(OmniOscType.PWM);
		            } else if (type === 'pulse') {
		                this._createNewOscillator(OmniOscType.Pulse);
		            } else {
		                this._createNewOscillator(OmniOscType.Osc);
		                this._oscillator.type = type;
		            }
		        }
		    });
		    /**
			 * The partials of the waveform. A partial represents 
			 * the amplitude at a harmonic. The first harmonic is the 
			 * fundamental frequency, the second is the octave and so on
			 * following the harmonic series. 
			 * Setting this value will automatically set the type to "custom". 
			 * The value is an empty array when the type is not "custom". 
			 * This is not available on "pwm" and "pulse" oscillator types.
			 * @memberOf Tone.OmniOscillator#
			 * @type {Array}
			 * @name partials
			 * @example
			 * osc.partials = [1, 0.2, 0.01];
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {
		        get: function () {
		            return this._oscillator.partials;
		        },
		        set: function (partials) {
		            this._oscillator.partials = partials;
		        }
		    });
		    /**
			 *  Set a member/attribute of the oscillator. 
			 *  @param {Object|String} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone.OmniOscillator} this
			 */
		    Tone.OmniOscillator.prototype.set = function (params, value) {
		        //make sure the type is set first
		        if (params === 'type') {
		            this.type = value;
		        } else if (this.isObject(params) && params.hasOwnProperty('type')) {
		            this.type = params.type;
		        }
		        //then set the rest
		        Tone.prototype.set.apply(this, arguments);
		        return this;
		    };
		    /**
			 *  connect the oscillator to the frequency and detune signals
			 *  @private
			 */
		    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {
		        if (oscType !== this._sourceType) {
		            this._sourceType = oscType;
		            var OscillatorConstructor = Tone[oscType];
		            //short delay to avoid clicks on the change
		            var now = this.now() + this.blockTime;
		            if (this._oscillator !== null) {
		                var oldOsc = this._oscillator;
		                oldOsc.stop(now);
		                //dispose the old one
		                setTimeout(function () {
		                    oldOsc.dispose();
		                    oldOsc = null;
		                }, this.blockTime * 1000);
		            }
		            this._oscillator = new OscillatorConstructor();
		            this.frequency.connect(this._oscillator.frequency);
		            this.detune.connect(this._oscillator.detune);
		            this._oscillator.connect(this.output);
		            if (this.state === Tone.State.Started) {
		                this._oscillator.start(now);
		            }
		        }
		    };
		    /**
			 * The phase of the oscillator in degrees. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {Degrees}
			 * @name phase
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {
		        get: function () {
		            return this._oscillator.phase;
		        },
		        set: function (phase) {
		            this._oscillator.phase = phase;
		        }
		    });
		    /**
			 * The width of the oscillator (only if the oscillator is set to "pulse")
			 * @memberOf Tone.OmniOscillator#
			 * @type {NormalRange}
			 * @signal
			 * @name width
			 * @example
			 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
			 * //can access the width attribute only if type === "pulse"
			 * omniOsc.width.value = 0.2; 
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Pulse) {
		                return this._oscillator.width;
		            }
		        }
		    });
		    /**
			 * The number of detuned oscillators
			 * @memberOf Tone.OmniOscillator#
			 * @type {Number}
			 * @name count
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Fat) {
		                return this._oscillator.count;
		            }
		        },
		        set: function (count) {
		            if (this._sourceType === OmniOscType.Fat) {
		                this._oscillator.count = count;
		            }
		        }
		    });
		    /**
			 * The detune spread between the oscillators. If "count" is
			 * set to 3 oscillators and the "spread" is set to 40,
			 * the three oscillators would be detuned like this: [-20, 0, 20]
			 * for a total detune spread of 40 cents. See Tone.FatOscillator
			 * for more info.
			 * @memberOf Tone.OmniOscillator#
			 * @type {Cents}
			 * @name spread
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {
		        get: function () {
		            if (this._sourceType === OmniOscType.Fat) {
		                return this._oscillator.spread;
		            }
		        },
		        set: function (spread) {
		            if (this._sourceType === OmniOscType.Fat) {
		                this._oscillator.spread = spread;
		            }
		        }
		    });
		    /**
			 * The type of the modulator oscillator. Only if the oscillator
			 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
			 * for more info. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {String}
			 * @name modulationType
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                return this._oscillator.modulationType;
		            }
		        },
		        set: function (mType) {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                this._oscillator.modulationType = mType;
		            }
		        }
		    });
		    /**
			 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the 
			 * ratio of the frequency of the modulating signal (mf) to the amplitude of the 
			 * modulating signal (ma) -- as in ma/mf. 
			 * See Tone.FMOscillator for more info. 
			 * @type {Positive}
			 * @signal
			 * @name modulationIndex
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM) {
		                return this._oscillator.modulationIndex;
		            }
		        }
		    });
		    /**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. 
			 *  A harmonicity of 1 gives both oscillators the same frequency. 
			 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
			 *  for more info. 
			 *  @memberOf Tone.OmniOscillator#
			 *  @signal
			 *  @type {Positive}
			 *  @name harmonicity
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {
		        get: function () {
		            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
		                return this._oscillator.harmonicity;
		            }
		        }
		    });
		    /**
			 * The modulationFrequency Signal of the oscillator 
			 * (only if the oscillator type is set to pwm). See 
			 * Tone.PWMOscillator for more info. 
			 * @memberOf Tone.OmniOscillator#
			 * @type {Frequency}
			 * @signal
			 * @name modulationFrequency
			 * @example
			 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
			 * //can access the modulationFrequency attribute only if type === "pwm"
			 * omniOsc.modulationFrequency.value = 0.2; 
			 */
		    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {
		        get: function () {
		            if (this._sourceType === OmniOscType.PWM) {
		                return this._oscillator.modulationFrequency;
		            }
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return {Tone.OmniOscillator} this
			 */
		    Tone.OmniOscillator.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'detune'
		        ]);
		        this.detune.dispose();
		        this.detune = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._oscillator.dispose();
		        this._oscillator = null;
		        this._sourceType = null;
		        return this;
		    };
		    return Tone.OmniOscillator;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Base-class for all instruments
			 *  
			 *  @constructor
			 *  @extends {Tone}
			 */
		    Tone.Instrument = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Instrument.defaults);
		        /**
				 *  The output and volume triming node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		    };
		    Tone.extend(Tone.Instrument);
		    /**
			 *  the default attributes
			 *  @type {object}
			 */
		    Tone.Instrument.defaults = {
		        /** the volume of the output in decibels */
		        'volume': 0
		    };
		    /**
			 *  @abstract
			 *  @param {string|number} note the note to trigger
			 *  @param {Time} [time=now] the time to trigger the ntoe
			 *  @param {number} [velocity=1] the velocity to trigger the note
			 */
		    Tone.Instrument.prototype.triggerAttack = Tone.noOp;
		    /**
			 *  @abstract
			 *  @param {Time} [time=now] when to trigger the release
			 */
		    Tone.Instrument.prototype.triggerRelease = Tone.noOp;
		    /**
			 *  Trigger the attack and then the release after the duration. 
			 *  @param  {Frequency} note     The note to trigger.
			 *  @param  {Time} duration How long the note should be held for before
			 *                          triggering the release.
			 *  @param {Time} [time=now]  When the note should be triggered.
			 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
			 *  @returns {Tone.Instrument} this
			 *  @example
			 * //trigger "C4" for the duration of an 8th note
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        duration = this.toSeconds(duration);
		        this.triggerAttack(note, time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Instrument} this
			 */
		    Tone.Instrument.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._volume.dispose();
		        this._volume = null;
		        this._writable(['volume']);
		        this.volume = null;
		        return this;
		    };
		    return Tone.Instrument;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  This is an abstract base class for other monophonic instruments to 
			 *          extend. IMPORTANT: It does not make any sound on its own and
			 *          shouldn't be directly instantiated.
			 *
			 *  @constructor
			 *  @abstract
			 *  @extends {Tone.Instrument}
			 */
		    Tone.Monophonic = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Monophonic.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The glide time between notes. 
				 *  @type {Time}
				 */
		        this.portamento = options.portamento;
		    };
		    Tone.extend(Tone.Monophonic, Tone.Instrument);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Monophonic.defaults = { 'portamento': 0 };
		    /**
			 *  Trigger the attack of the note optionally with a given velocity. 
			 *  
			 *  
			 *  @param  {Frequency} note     The note to trigger.
			 *  @param  {Time} [time=now]     When the note should start.
			 *  @param  {number} [velocity=1] velocity The velocity scaler 
			 *                                determines how "loud" the note 
			 *                                will be triggered.
			 *  @returns {Tone.Monophonic} this
			 *  @example
			 * synth.triggerAttack("C4");
			 *  @example
			 * //trigger the note a half second from now at half velocity
			 * synth.triggerAttack("C4", "+0.5", 0.5);
			 */
		    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._triggerEnvelopeAttack(time, velocity);
		        this.setNote(note, time);
		        return this;
		    };
		    /**
			 *  Trigger the release portion of the envelope
			 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
			 *  @returns {Tone.Monophonic} this
			 *  @example
			 * synth.triggerRelease();
			 */
		    Tone.Monophonic.prototype.triggerRelease = function (time) {
		        if (this.isUndef(time)) {
		            time = this.now() + this.blockTime;
		        } else {
		            time = this.toSeconds(time);
		        }
		        this._triggerEnvelopeRelease(time);
		        return this;
		    };
		    /**
			 *  override this method with the actual method
			 *  @abstract
			 *  @private
			 */
		    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {
		    };
		    /**
			 *  override this method with the actual method
			 *  @abstract
			 *  @private
			 */
		    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {
		    };
		    /**
			 *  Set the note at the given time. If no time is given, the note
			 *  will set immediately. 
			 *  @param {Frequency} note The note to change to.
			 *  @param  {Time} [time=now] The time when the note should be set. 
			 *  @returns {Tone.Monophonic} this
			 * @example
			 * //change to F#6 in one quarter note from now.
			 * synth.setNote("F#6", "+4n");
			 * @example
			 * //change to Bb4 right now
			 * synth.setNote("Bb4");
			 */
		    Tone.Monophonic.prototype.setNote = function (note, time) {
		        time = this.toSeconds(time);
		        if (this.portamento > 0) {
		            var currentNote = this.frequency.value;
		            this.frequency.setValueAtTime(currentNote, time);
		            var portTime = this.toSeconds(this.portamento);
		            this.frequency.exponentialRampToValueAtTime(note, time + portTime);
		        } else {
		            this.frequency.setValueAtTime(note, time);
		        }
		        return this;
		    };
		    return Tone.Monophonic;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
			 *          routed through a Tone.AmplitudeEnvelope. 
			 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.Synth().toMaster();
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.Synth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.Synth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.OmniOscillator}
				 */
		        this.oscillator = new Tone.OmniOscillator(options.oscillator);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this.oscillator.frequency;
		        /**
				 *  The detune control.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this.oscillator.detune;
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the oscillators to the output
		        this.oscillator.chain(this.envelope, this.output);
		        //start the oscillators
		        this.oscillator.start();
		        this._readOnly([
		            'oscillator',
		            'frequency',
		            'detune',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.Synth, Tone.Monophonic);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.Synth.defaults = {
		        'oscillator': { 'type': 'triangle' },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0.3,
		            'release': 1
		        }
		    };
		    /**
			 *  start the attack portion of the envelope
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {number} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.Synth} this
			 *  @private
			 */
		    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelope
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.Synth} this
			 *  @private
			 */
		    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Synth} this
			 */
		    Tone.Synth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'frequency',
		            'detune',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.Synth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
			 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
			 *          the two signals) affects the timbre of the output signal greatly.
			 *          Read more about Amplitude Modulation Synthesis on 
			 *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).
			 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                            see defaults below
			 *  @example
			 * var synth = new Tone.AMSynth().toMaster();
			 * synth.triggerAttackRelease("C4", "4n");
			 */
		    Tone.AMSynth = function (options) {
		        options = this.defaultArg(options, Tone.AMSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The carrier voice. 
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._carrier = new Tone.Synth();
		        this._carrier.volume.value = -10;
		        /**
				 *  The carrier's oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = this._carrier.oscillator;
		        /**
				 *  The carrier's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.envelope = this._carrier.envelope.set(options.envelope);
		        /**
				 *  The modulator voice. 
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._modulator = new Tone.Synth();
		        this._modulator.volume.value = -10;
		        /**
				 *  The modulator's oscillator which is applied
				 *  to the amplitude of the oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.modulation = this._modulator.oscillator.set(options.modulation);
		        /**
				 *  The modulator's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
		        /**
				 *  The frequency.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  convert the -1,1 output to 0,1
				 *  @type {Tone.AudioToGain}
				 *  @private
				 */
		        this._modulationScale = new Tone.AudioToGain();
		        /**
				 *  the node where the modulation happens
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain();
		        //control the two voices frequency
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.detune.fan(this._carrier.detune, this._modulator.detune);
		        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
		        this._carrier.chain(this._modulationNode, this.output);
		        this._readOnly([
		            'frequency',
		            'harmonicity',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.AMSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.AMSynth.defaults = {
		        'harmonicity': 3,
		        'detune': 0,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.01,
		            'decay': 0.01,
		            'sustain': 1,
		            'release': 0.5
		        },
		        'moduation': { 'type': 'square' },
		        'modulationEnvelope': {
		            'attack': 0.5,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.5
		        }
		    };
		    /**
			 *  trigger the attack portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will occur
			 *  @param {NormalRange} [velocity=1] the velocity of the note
			 *  @private
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the port glide
		        time = this.toSeconds(time);
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.modulationEnvelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  trigger the release portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @private
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        this.modulationEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.AMSynth} this
			 */
		    Tone.AMSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'harmonicity',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._modulationScale.dispose();
		        this._modulationScale = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.oscillator = null;
		        this.envelope = null;
		        this.modulationEnvelope = null;
		        this.modulation = null;
		        return this;
		    };
		    return Tone.AMSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
			 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the 
			 *          Tone.Filter are controlled by Tone.Envelopes. 
			 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
			 *          
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.MonoSynth({
			 * 	"oscillator" : {
			 * 		"type" : "square"
			 *  },
			 *  "envelope" : {
			 *  	"attack" : 0.1
			 *  }
			 * }).toMaster();
			 * synth.triggerAttackRelease("C4", "8n");
			 */
		    Tone.MonoSynth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.MonoSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.OmniOscillator}
				 */
		        this.oscillator = new Tone.OmniOscillator(options.oscillator);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = this.oscillator.frequency;
		        /**
				 *  The detune control.
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = this.oscillator.detune;
		        /**
				 *  The filter.
				 *  @type {Tone.Filter}
				 */
		        this.filter = new Tone.Filter(options.filter);
		        /**
				 *  The filter envelope.
				 *  @type {Tone.FrequencyEnvelope}
				 */
		        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the oscillators to the output
		        this.oscillator.chain(this.filter, this.envelope, this.output);
		        //start the oscillators
		        this.oscillator.start();
		        //connect the filter envelope
		        this.filterEnvelope.connect(this.filter.frequency);
		        this._readOnly([
		            'oscillator',
		            'frequency',
		            'detune',
		            'filter',
		            'filterEnvelope',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.MonoSynth, Tone.Monophonic);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MonoSynth.defaults = {
		        'frequency': 'C4',
		        'detune': 0,
		        'oscillator': { 'type': 'square' },
		        'filter': {
		            'Q': 6,
		            'type': 'lowpass',
		            'rolloff': -24
		        },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0.9,
		            'release': 1
		        },
		        'filterEnvelope': {
		            'attack': 0.06,
		            'decay': 0.2,
		            'sustain': 0.5,
		            'release': 2,
		            'baseFrequency': 200,
		            'octaves': 7,
		            'exponent': 2
		        }
		    };
		    /**
			 *  start the attack portion of the envelope
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.MonoSynth} this
			 *  @private
			 */
		    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.filterEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelope
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.MonoSynth} this
			 *  @private
			 */
		    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        this.filterEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.MonoSynth} this
			 */
		    Tone.MonoSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'frequency',
		            'detune',
		            'filter',
		            'filterEnvelope',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this.filterEnvelope.dispose();
		        this.filterEnvelope = null;
		        this.filter.dispose();
		        this.filter = null;
		        this.frequency = null;
		        this.detune = null;
		        return this;
		    };
		    return Tone.MonoSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.DuoSynth is a monophonic synth composed of two 
			 *          MonoSynths run in parallel with control over the 
			 *          frequency ratio between the two voices and vibrato effect.
			 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var duoSynth = new Tone.DuoSynth().toMaster();
			 * duoSynth.triggerAttackRelease("C4", "2n");
			 */
		    Tone.DuoSynth = function (options) {
		        options = this.defaultArg(options, Tone.DuoSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  the first voice
				 *  @type {Tone.MonoSynth}
				 */
		        this.voice0 = new Tone.MonoSynth(options.voice0);
		        this.voice0.volume.value = -10;
		        /**
				 *  the second voice
				 *  @type {Tone.MonoSynth}
				 */
		        this.voice1 = new Tone.MonoSynth(options.voice1);
		        this.voice1.volume.value = -10;
		        /**
				 *  The vibrato LFO. 
				 *  @type {Tone.LFO}
				 *  @private
				 */
		        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);
		        this._vibrato.start();
		        /**
				 * the vibrato frequency
				 * @type {Frequency}
				 * @signal
				 */
		        this.vibratoRate = this._vibrato.frequency;
		        /**
				 *  the vibrato gain
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);
		        /**
				 * The amount of vibrato
				 * @type {Positive}
				 * @signal
				 */
		        this.vibratoAmount = this._vibratoGain.gain;
		        /**
				 *  the frequency control
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * duoSynth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        //control the two voices frequency
		        this.frequency.connect(this.voice0.frequency);
		        this.frequency.chain(this.harmonicity, this.voice1.frequency);
		        this._vibrato.connect(this._vibratoGain);
		        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);
		        this.voice0.connect(this.output);
		        this.voice1.connect(this.output);
		        this._readOnly([
		            'voice0',
		            'voice1',
		            'frequency',
		            'vibratoAmount',
		            'vibratoRate'
		        ]);
		    };
		    Tone.extend(Tone.DuoSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.DuoSynth.defaults = {
		        'vibratoAmount': 0.5,
		        'vibratoRate': 5,
		        'harmonicity': 1.5,
		        'voice0': {
		            'volume': -10,
		            'portamento': 0,
		            'oscillator': { 'type': 'sine' },
		            'filterEnvelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            },
		            'envelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            }
		        },
		        'voice1': {
		            'volume': -10,
		            'portamento': 0,
		            'oscillator': { 'type': 'sine' },
		            'filterEnvelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            },
		            'envelope': {
		                'attack': 0.01,
		                'decay': 0,
		                'sustain': 1,
		                'release': 0.5
		            }
		        }
		    };
		    /**
			 *  start the attack portion of the envelopes
			 *  
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.DuoSynth} this
			 *  @private
			 */
		    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        this.voice0.envelope.triggerAttack(time, velocity);
		        this.voice1.envelope.triggerAttack(time, velocity);
		        this.voice0.filterEnvelope.triggerAttack(time);
		        this.voice1.filterEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  start the release portion of the envelopes
			 *  
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.DuoSynth} this
			 *  @private
			 */
		    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {
		        this.voice0.triggerRelease(time);
		        this.voice1.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.DuoSynth} this
			 */
		    Tone.DuoSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'voice0',
		            'voice1',
		            'frequency',
		            'vibratoAmount',
		            'vibratoRate'
		        ]);
		        this.voice0.dispose();
		        this.voice0 = null;
		        this.voice1.dispose();
		        this.voice1 = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._vibratoGain.dispose();
		        this._vibratoGain = null;
		        this._vibrato = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this.vibratoAmount.dispose();
		        this.vibratoAmount = null;
		        this.vibratoRate = null;
		        return this;
		    };
		    return Tone.DuoSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
			 *          the frequency of a second Tone.Synth. A lot of spectral content 
			 *          can be explored using the modulationIndex parameter. Read more about
			 *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).
			 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
			 *
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var fmSynth = new Tone.FMSynth().toMaster();
			 * fmSynth.triggerAttackRelease("C5", "4n");
			 */
		    Tone.FMSynth = function (options) {
		        options = this.defaultArg(options, Tone.FMSynth.defaults);
		        Tone.Monophonic.call(this, options);
		        /**
				 *  The carrier voice.
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._carrier = new Tone.Synth(options.carrier);
		        this._carrier.volume.value = -10;
		        /**
				 *  The carrier's oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = this._carrier.oscillator;
		        /**
				 *  The carrier's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.envelope = this._carrier.envelope.set(options.envelope);
		        /**
				 *  The modulator voice.
				 *  @type {Tone.Synth}
				 *  @private
				 */
		        this._modulator = new Tone.Synth(options.modulator);
		        this._modulator.volume.value = -10;
		        /**
				 *  The modulator's oscillator which is applied
				 *  to the amplitude of the oscillator
				 *  @type {Tone.Oscillator}
				 */
		        this.modulation = this._modulator.oscillator.set(options.modulation);
		        /**
				 *  The modulator's envelope
				 *  @type {Tone.Oscillator}
				 */
		        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
		        /**
				 *  The frequency control.
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        /**
				 *  Harmonicity is the ratio between the two voices. A harmonicity of
				 *  1 is no change. Harmonicity = 2 means a change of an octave. 
				 *  @type {Positive}
				 *  @signal
				 *  @example
				 * //pitch voice1 an octave below voice0
				 * synth.harmonicity.value = 0.5;
				 */
		        this.harmonicity = new Tone.Multiply(options.harmonicity);
		        this.harmonicity.units = Tone.Type.Positive;
		        /**
				 *  The modulation index which essentially the depth or amount of the modulation. It is the 
				 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the 
				 *  modulating signal (ma) -- as in ma/mf. 
				 *	@type {Positive}
				 *	@signal
				 */
		        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
		        this.modulationIndex.units = Tone.Type.Positive;
		        /**
				 *  the node where the modulation happens
				 *  @type {GainNode}
				 *  @private
				 */
		        this._modulationNode = new Tone.Gain(0);
		        //control the two voices frequency
		        this.frequency.connect(this._carrier.frequency);
		        this.frequency.chain(this.harmonicity, this._modulator.frequency);
		        this.frequency.chain(this.modulationIndex, this._modulationNode);
		        this.detune.fan(this._carrier.detune, this._modulator.detune);
		        this._modulator.connect(this._modulationNode.gain);
		        this._modulationNode.connect(this._carrier.frequency);
		        this._carrier.connect(this.output);
		        this._readOnly([
		            'frequency',
		            'harmonicity',
		            'modulationIndex',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		    };
		    Tone.extend(Tone.FMSynth, Tone.Monophonic);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.FMSynth.defaults = {
		        'harmonicity': 3,
		        'modulationIndex': 10,
		        'detune': 0,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.01,
		            'decay': 0.01,
		            'sustain': 1,
		            'release': 0.5
		        },
		        'moduation': { 'type': 'square' },
		        'modulationEnvelope': {
		            'attack': 0.5,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.5
		        }
		    };
		    /**
			 * 	trigger the attack portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will occur
			 *  @param {number} [velocity=1] the velocity of the note
			 *  @returns {Tone.FMSynth} this
			 *  @private
			 */
		    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
		        time = this.toSeconds(time);
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        this.modulationEnvelope.triggerAttack(time);
		        return this;
		    };
		    /**
			 *  trigger the release portion of the note
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @returns {Tone.FMSynth} this
			 *  @private
			 */
		    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        this.modulationEnvelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.FMSynth} this
			 */
		    Tone.FMSynth.prototype.dispose = function () {
		        Tone.Monophonic.prototype.dispose.call(this);
		        this._writable([
		            'frequency',
		            'harmonicity',
		            'modulationIndex',
		            'oscillator',
		            'envelope',
		            'modulation',
		            'modulationEnvelope',
		            'detune'
		        ]);
		        this._carrier.dispose();
		        this._carrier = null;
		        this._modulator.dispose();
		        this._modulator = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this.detune.dispose();
		        this.detune = null;
		        this.modulationIndex.dispose();
		        this.modulationIndex = null;
		        this.harmonicity.dispose();
		        this.harmonicity = null;
		        this._modulationNode.dispose();
		        this._modulationNode = null;
		        this.oscillator = null;
		        this.envelope = null;
		        this.modulationEnvelope = null;
		        this.modulation = null;
		        return this;
		    };
		    return Tone.FMSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
			 *          with an amplitude envelope and frequency ramp. A Tone.Oscillator
			 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
			 *          quality of the sound comes from the frequency envelope applied
			 *          during during Tone.MembraneSynth.triggerAttack(note). The frequency
			 *          envelope starts at <code>note * .octaves</code> and ramps to 
			 *          <code>note</code> over the duration of <code>.pitchDecay</code>. 
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 *  @example
			 * var synth = new Tone.MembraneSynth().toMaster();
			 * synth.triggerAttackRelease("C2", "8n");
			 */
		    Tone.MembraneSynth = function (options) {
		        options = this.defaultArg(options, Tone.MembraneSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The oscillator.
				 *  @type {Tone.Oscillator}
				 */
		        this.oscillator = new Tone.Oscillator(options.oscillator).start();
		        /**
				 *  The amplitude envelope.
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        /**
				 *  The number of octaves the pitch envelope ramps.
				 *  @type {Positive}
				 */
		        this.octaves = options.octaves;
		        /**
				 *  The amount of time the frequency envelope takes. 
				 *  @type {Time}
				 */
		        this.pitchDecay = options.pitchDecay;
		        this.oscillator.chain(this.envelope, this.output);
		        this._readOnly([
		            'oscillator',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.MembraneSynth, Tone.Instrument);
		    /**
			 *  @static
			 *  @type {Object}
			 */
		    Tone.MembraneSynth.defaults = {
		        'pitchDecay': 0.05,
		        'octaves': 10,
		        'oscillator': { 'type': 'sine' },
		        'envelope': {
		            'attack': 0.001,
		            'decay': 0.4,
		            'sustain': 0.01,
		            'release': 1.4,
		            'attackCurve': 'exponential'
		        }
		    };
		    /**
			 *  Trigger the note at the given time with the given velocity. 
			 *  
			 *  @param  {Frequency} note     the note
			 *  @param  {Time} [time=now]     the time, if not given is now
			 *  @param  {number} [velocity=1] velocity defaults to 1
			 *  @returns {Tone.MembraneSynth} this
			 *  @example
			 *  kick.triggerAttack(60);
			 */
		    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {
		        time = this.toSeconds(time);
		        note = this.toFrequency(note);
		        var maxNote = note * this.octaves;
		        this.oscillator.frequency.setValueAtTime(maxNote, time);
		        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Trigger the release portion of the note.
			 *  
			 *  @param  {Time} [time=now] the time the note will release
			 *  @returns {Tone.MembraneSynth} this
			 */
		    Tone.MembraneSynth.prototype.triggerRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.MembraneSynth} this
			 */
		    Tone.MembraneSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'oscillator',
		            'envelope'
		        ]);
		        this.oscillator.dispose();
		        this.oscillator = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.MembraneSynth;
		});
		Module(function (Tone) {
		    /**
			 *  Inharmonic ratio of frequencies based on the Roland TR-808
			 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
			 *  @private
			 *  @static
			 *  @type {Array}
			 */
		    var inharmRatios = [
		        1,
		        1.483,
		        1.932,
		        2.546,
		        2.63,
		        3.897
		    ];
		    /**
			 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
			 *          and amplitude envelope which is good for making metalophone sounds. Based
			 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
			 *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] The options availble for the synth
			 *                             see defaults below
			 */
		    Tone.MetalSynth = function (options) {
		        options = this.defaultArg(options, Tone.MetalSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The frequency of the cymbal
				 *  @type  {Frequency}
				 *  @signal
				 */
		        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
		        /**
				 *  The array of FMOscillators
				 *  @type  {Array}
				 *  @private
				 */
		        this._oscillators = [];
		        /**
				 *  The frequency multipliers
				 *  @type {Array}
				 *  @private
				 */
		        this._freqMultipliers = [];
		        /**
				 *  The amplitude for the body
				 *  @type {Tone.Gain}
				 *  @private
				 */
		        this._amplitue = new Tone.Gain(0).connect(this.output);
		        /**
				 *  highpass the output
				 *  @type {Tone.Filter}
				 *  @private
				 */
		        this._highpass = new Tone.Filter({
		            'type': 'highpass',
		            'Q': 0
		        }).connect(this._amplitue);
		        /**
				 *  The number of octaves the highpass
				 *  filter frequency ramps
				 *  @type {Number}
				 *  @private
				 */
		        this._octaves = options.octaves;
		        /**
				 *  Scale the body envelope
				 *  for the bandpass
				 *  @type {Tone.Scale}
				 *  @private
				 */
		        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);
		        /**
				 *  The envelope which is connected both to the 
				 *  amplitude and highpass filter's cutoff frequency
				 *  @type  {Tone.Envelope}
				 */
		        this.envelope = new Tone.Envelope({
		            'attack': options.envelope.attack,
		            'attackCurve': 'exponential',
		            'decay': options.envelope.decay,
		            'sustain': 0,
		            'release': options.envelope.release
		        }).chain(this._filterFreqScaler, this._highpass.frequency);
		        this.envelope.connect(this._amplitue.gain);
		        for (var i = 0; i < inharmRatios.length; i++) {
		            var osc = new Tone.FMOscillator({
		                'type': 'square',
		                'modulationType': 'square',
		                'harmonicity': options.harmonicity,
		                'modulationIndex': options.modulationIndex
		            });
		            osc.connect(this._highpass).start(0);
		            this._oscillators[i] = osc;
		            var mult = new Tone.Multiply(inharmRatios[i]);
		            this._freqMultipliers[i] = mult;
		            this.frequency.chain(mult, osc.frequency);
		        }
		        //set the octaves
		        this.octaves = options.octaves;
		    };
		    Tone.extend(Tone.MetalSynth, Tone.Instrument);
		    /**
			 *  default values
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.MetalSynth.defaults = {
		        'frequency': 200,
		        'envelope': {
		            'attack': 0.0015,
		            'decay': 1.4,
		            'release': 0.2
		        },
		        'harmonicity': 5.1,
		        'modulationIndex': 32,
		        'resonance': 4000,
		        'octaves': 1.5
		    };
		    /**
			 *  Trigger the attack.
			 *  @param  {Time}  time      When the attack should be triggered.
			 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {
		        time = this.toSeconds(time);
		        vel = this.defaultArg(vel, 1);
		        this.envelope.triggerAttack(time, vel);
		        return this;
		    };
		    /**
			 *  Trigger the release of the envelope.
			 *  @param  {Time}  time      When the release should be triggered.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Trigger the attack and release of the envelope after the given 
			 *  duration. 
			 *  @param  {Time}  duration  The duration before triggering the release
			 *  @param  {Time}  time      When the attack should be triggered.
			 *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.
			 *  @return  {Tone.MetalSynth}  this
			 */
		    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        duration = this.toSeconds(duration);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  The modulationIndex of the oscillators which make up the source.
			 *  see Tone.FMOscillator.modulationIndex
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Positive}
			 *  @name  modulationIndex
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {
		        get: function () {
		            return this._oscillators[0].modulationIndex.value;
		        },
		        set: function (val) {
		            for (var i = 0; i < this._oscillators.length; i++) {
		                this._oscillators[i].modulationIndex.value = val;
		            }
		        }
		    });
		    /**
			 *  The harmonicity of the oscillators which make up the source.
			 *  see Tone.FMOscillator.harmonicity
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Positive}
			 *  @name  harmonicity
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {
		        get: function () {
		            return this._oscillators[0].harmonicity.value;
		        },
		        set: function (val) {
		            for (var i = 0; i < this._oscillators.length; i++) {
		                this._oscillators[i].harmonicity.value = val;
		            }
		        }
		    });
		    /**
			 *  The frequency of the highpass filter attached to the envelope
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Frequency}
			 *  @name  resonance
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {
		        get: function () {
		            return this._filterFreqScaler.min;
		        },
		        set: function (val) {
		            this._filterFreqScaler.min = val;
		            this.octaves = this._octaves;
		        }
		    });
		    /**
			 *  The number of octaves above the "resonance" frequency
			 *  that the filter ramps during the attack/decay envelope
			 *  @memberOf Tone.MetalSynth#
			 *  @type {Number}
			 *  @name  octaves
			 */
		    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {
		        get: function () {
		            return this._octaves;
		        },
		        set: function (octs) {
		            this._octaves = octs;
		            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);
		        }
		    });
		    /**
			 *  Clean up
			 *  @returns {Tone.MetalSynth} this
			 */
		    Tone.MetalSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        for (var i = 0; i < this._oscillators.length; i++) {
		            this._oscillators[i].dispose();
		            this._freqMultipliers[i].dispose();
		        }
		        this._oscillators = null;
		        this._freqMultipliers = null;
		        this.frequency.dispose();
		        this.frequency = null;
		        this._filterFreqScaler.dispose();
		        this._filterFreqScaler = null;
		        this._amplitue.dispose();
		        this._amplitue = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        this._highpass.dispose();
		        this._highpass = null;
		    };
		    return Tone.MetalSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
			 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
			 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
			 *
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {string} type the noise type (white|pink|brown)
			 *  @example
			 * //initialize the noise and start
			 * var noise = new Tone.Noise("pink").start();
			 * 
			 * //make an autofilter to shape the noise
			 * var autoFilter = new Tone.AutoFilter({
			 * 	"frequency" : "8m", 
			 * 	"min" : 800, 
			 * 	"max" : 15000
			 * }).connect(Tone.Master);
			 * 
			 * //connect the noise
			 * noise.connect(autoFilter);
			 * //start the autofilter LFO
			 * autoFilter.start()
			 */
		    Tone.Noise = function () {
		        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  @private
				 *  @type {AudioBufferSourceNode}
				 */
		        this._source = null;
		        /**
				 *  the buffer
				 *  @private
				 *  @type {AudioBuffer}
				 */
		        this._buffer = null;
		        /**
				 *  The playback rate of the noise. Affects
				 *  the "frequency" of the noise.
				 *  @type {Positive}
				 *  @signal
				 */
		        this._playbackRate = options.playbackRate;
		        this.type = options.type;
		    };
		    Tone.extend(Tone.Noise, Tone.Source);
		    /**
			 *  the default parameters
			 *
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Noise.defaults = {
		        'type': 'white',
		        'playbackRate': 1
		    };
		    /**
			 * The type of the noise. Can be "white", "brown", or "pink". 
			 * @memberOf Tone.Noise#
			 * @type {string}
			 * @name type
			 * @example
			 * noise.type = "white";
			 */
		    Object.defineProperty(Tone.Noise.prototype, 'type', {
		        get: function () {
		            if (this._buffer === _whiteNoise) {
		                return 'white';
		            } else if (this._buffer === _brownNoise) {
		                return 'brown';
		            } else if (this._buffer === _pinkNoise) {
		                return 'pink';
		            }
		        },
		        set: function (type) {
		            if (this.type !== type) {
		                switch (type) {
		                case 'white':
		                    this._buffer = _whiteNoise;
		                    break;
		                case 'pink':
		                    this._buffer = _pinkNoise;
		                    break;
		                case 'brown':
		                    this._buffer = _brownNoise;
		                    break;
		                default:
		                    throw new TypeError('Tone.Noise: invalid type: ' + type);
		                }
		                //if it's playing, stop and restart it
		                if (this.state === Tone.State.Started) {
		                    var now = this.now() + this.blockTime;
		                    //remove the listener
		                    this._stop(now);
		                    this._start(now);
		                }
		            }
		        }
		    });
		    /**
			 *  The playback rate of the noise. Affects
			 *  the "frequency" of the noise.
			 *  @type {Positive}
			 *  @signal
			 */
		    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            if (this._source) {
		                this._source.playbackRate.value = rate;
		            }
		        }
		    });
		    /**
			 *  internal start method
			 *
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.Noise.prototype._start = function (time) {
		        this._source = this.context.createBufferSource();
		        this._source.buffer = this._buffer;
		        this._source.loop = true;
		        this._source.playbackRate.value = this._playbackRate;
		        this._source.connect(this.output);
		        this._source.start(this.toSeconds(time), Math.random() * (this._buffer.duration - 0.001));
		    };
		    /**
			 *  internal stop method
			 *
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.Noise.prototype._stop = function (time) {
		        if (this._source) {
		            this._source.stop(this.toSeconds(time));
		        }
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.Noise} this
			 */
		    Tone.Noise.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._source !== null) {
		            this._source.disconnect();
		            this._source = null;
		        }
		        this._buffer = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // THE BUFFERS
		    // borrowed heavily from http://noisehack.com/generate-noise-web-audio-api/
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 *	static noise buffers
			 *
			 *  @static
			 *  @private
			 *  @type {AudioBuffer}
			 */
		    var _pinkNoise = null, _brownNoise = null, _whiteNoise = null;
		    Tone._initAudioContext(function (audioContext) {
		        var sampleRate = audioContext.sampleRate;
		        //four seconds per buffer
		        var bufferLength = sampleRate * 4;
		        //fill the buffers
		        _pinkNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                var b0, b1, b2, b3, b4, b5, b6;
		                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;
		                for (var i = 0; i < bufferLength; i++) {
		                    var white = Math.random() * 2 - 1;
		                    b0 = 0.99886 * b0 + white * 0.0555179;
		                    b1 = 0.99332 * b1 + white * 0.0750759;
		                    b2 = 0.969 * b2 + white * 0.153852;
		                    b3 = 0.8665 * b3 + white * 0.3104856;
		                    b4 = 0.55 * b4 + white * 0.5329522;
		                    b5 = -0.7616 * b5 - white * 0.016898;
		                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
		                    channel[i] *= 0.11;
		                    // (roughly) compensate for gain
		                    b6 = white * 0.115926;
		                }
		            }
		            return buffer;
		        }();
		        _brownNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                var lastOut = 0;
		                for (var i = 0; i < bufferLength; i++) {
		                    var white = Math.random() * 2 - 1;
		                    channel[i] = (lastOut + 0.02 * white) / 1.02;
		                    lastOut = channel[i];
		                    channel[i] *= 3.5;    // (roughly) compensate for gain
		                }
		            }
		            return buffer;
		        }();
		        _whiteNoise = function () {
		            var buffer = audioContext.createBuffer(2, bufferLength, sampleRate);
		            for (var channelNum = 0; channelNum < buffer.numberOfChannels; channelNum++) {
		                var channel = buffer.getChannelData(channelNum);
		                for (var i = 0; i < bufferLength; i++) {
		                    channel[i] = Math.random() * 2 - 1;
		                }
		            }
		            return buffer;
		        }();
		    });
		    return Tone.Noise;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), 
			 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
			 *          of the noise and the other is controls the cutoff frequency of the filter. 
			 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] the options available for the synth 
			 *                          see defaults below
			 * @example
			 * var noiseSynth = new Tone.NoiseSynth().toMaster();
			 * noiseSynth.triggerAttackRelease("8n");
			 */
		    Tone.NoiseSynth = function (options) {
		        //get the defaults
		        options = this.defaultArg(options, Tone.NoiseSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The noise source.
				 *  @type {Tone.Noise}
				 *  @example
				 * noiseSynth.set("noise.type", "brown");
				 */
		        this.noise = new Tone.Noise();
		        /**
				 *  The amplitude envelope. 
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        //connect the noise to the output
		        this.noise.chain(this.envelope, this.output);
		        //start the noise
		        this.noise.start();
		        this._readOnly([
		            'noise',
		            'envelope'
		        ]);
		    };
		    Tone.extend(Tone.NoiseSynth, Tone.Instrument);
		    /**
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.NoiseSynth.defaults = {
		        'noise': { 'type': 'white' },
		        'envelope': {
		            'attack': 0.005,
		            'decay': 0.1,
		            'sustain': 0
		        }
		    };
		    /**
			 *  Start the attack portion of the envelopes. Unlike other 
			 *  instruments, Tone.NoiseSynth doesn't have a note. 
			 *  @param {Time} [time=now] the time the attack should start
			 *  @param {number} [velocity=1] the velocity of the note (0-1)
			 *  @returns {Tone.NoiseSynth} this
			 *  @example
			 * noiseSynth.triggerAttack();
			 */
		    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {
		        //the envelopes
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Start the release portion of the envelopes.
			 *  @param {Time} [time=now] the time the release should start
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.triggerRelease = function (time) {
		        this.envelope.triggerRelease(time);
		        return this;
		    };
		    /**
			 *  Trigger the attack and then the release. 
			 *  @param  {Time} duration the duration of the note
			 *  @param  {Time} [time=now]     the time of the attack
			 *  @param  {number} [velocity=1] the velocity
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
		        time = this.toSeconds(time);
		        duration = this.toSeconds(duration);
		        this.triggerAttack(time, velocity);
		        this.triggerRelease(time + duration);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.NoiseSynth} this
			 */
		    Tone.NoiseSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'noise',
		            'envelope'
		        ]);
		        this.noise.dispose();
		        this.noise = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.NoiseSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Karplus-String string synthesis. Often out of tune. 
			 *         Will change when the AudioWorkerNode is available across
			 *         browsers. 
			 *  
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {Object} [options] see the defaults
			 *  @example
			 * var plucky = new Tone.PluckSynth().toMaster();
			 * plucky.triggerAttack("C4");
			 */
		    Tone.PluckSynth = function (options) {
		        options = this.defaultArg(options, Tone.PluckSynth.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  @type {Tone.Noise}
				 *  @private
				 */
		        this._noise = new Tone.Noise('pink');
		        /**
				 *  The amount of noise at the attack. 
				 *  Nominal range of [0.1, 20]
				 *  @type {number}
				 */
		        this.attackNoise = 1;
		        /**
				 *  the LFCF
				 *  @type {Tone.LowpassCombFilter}
				 *  @private
				 */
		        this._lfcf = new Tone.LowpassCombFilter({
		            'resonance': options.resonance,
		            'dampening': options.dampening
		        });
		        /**
				 *  The resonance control. 
				 *  @type {NormalRange}
				 *  @signal
				 */
		        this.resonance = this._lfcf.resonance;
		        /**
				 *  The dampening control. i.e. the lowpass filter frequency of the comb filter
				 *  @type {Frequency}
				 *  @signal
				 */
		        this.dampening = this._lfcf.dampening;
		        //connections
		        this._noise.connect(this._lfcf);
		        this._lfcf.connect(this.output);
		        this._readOnly([
		            'resonance',
		            'dampening'
		        ]);
		    };
		    Tone.extend(Tone.PluckSynth, Tone.Instrument);
		    /**
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.PluckSynth.defaults = {
		        'attackNoise': 1,
		        'dampening': 4000,
		        'resonance': 0.9
		    };
		    /**
			 *  Trigger the note. 
			 *  @param {Frequency} note The note to trigger.
			 *  @param {Time} [time=now] When the note should be triggered.
			 *  @returns {Tone.PluckSynth} this
			 */
		    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {
		        note = this.toFrequency(note);
		        time = this.toSeconds(time);
		        var delayAmount = 1 / note;
		        this._lfcf.delayTime.setValueAtTime(delayAmount, time);
		        this._noise.start(time);
		        this._noise.stop(time + delayAmount * this.attackNoise);
		        return this;
		    };
		    /**
			 *  Clean up. 
			 *  @returns {Tone.PluckSynth} this
			 */
		    Tone.PluckSynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._noise.dispose();
		        this._lfcf.dispose();
		        this._noise = null;
		        this._lfcf = null;
		        this._writable([
		            'resonance',
		            'dampening'
		        ]);
		        this.dampening = null;
		        this.resonance = null;
		        return this;
		    };
		    return Tone.PluckSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.PolySynth handles voice creation and allocation for any
			 *          instruments passed in as the second paramter. PolySynth is 
			 *          not a synthesizer by itself, it merely manages voices of 
			 *          one of the other types of synths, allowing any of the 
			 *          monophonic synthesizers to be polyphonic. 
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {number|Object} [polyphony=4] The number of voices to create
			 *  @param {function} [voice=Tone.Synth] The constructor of the voices
			 *                                            uses Tone.Synth by default. 
			 *  @example
			 * //a polysynth composed of 6 Voices of Synth
			 * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();
			 * //set the attributes using the set interface
			 * synth.set("detune", -1200);
			 * //play a chord
			 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
			 */
		    Tone.PolySynth = function () {
		        Tone.Instrument.call(this);
		        var options = this.optionsObject(arguments, [
		            'polyphony',
		            'voice'
		        ], Tone.PolySynth.defaults);
		        options = this.defaultArg(options, Tone.Instrument.defaults);
		        //max polyphony
		        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);
		        /**
				 *  the array of voices
				 *  @type {Array}
				 */
		        this.voices = new Array(options.polyphony);
		        /**
				 *  The queue of voices with data about last trigger
				 *  and the triggered note
				 *  @private
				 *  @type {Array}
				 */
		        this._triggers = new Array(options.polyphony);
		        /**
				 *  The detune in cents
				 *  @type {Cents}
				 *  @signal
				 */
		        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
		        this._readOnly('detune');
		        //create the voices
		        for (var i = 0; i < options.polyphony; i++) {
		            var v = new options.voice(arguments[2], arguments[3]);
		            this.voices[i] = v;
		            v.connect(this.output);
		            if (v.hasOwnProperty('detune')) {
		                this.detune.connect(v.detune);
		            }
		            this._triggers[i] = {
		                release: -1,
		                note: null,
		                voice: v
		            };
		        }
		        //set the volume initially
		        this.volume.value = options.volume;
		    };
		    Tone.extend(Tone.PolySynth, Tone.Instrument);
		    /**
			 *  the defaults
			 *  @const
			 *  @static
			 *  @type {Object}
			 */
		    Tone.PolySynth.defaults = {
		        'polyphony': 4,
		        'volume': 0,
		        'detune': 0,
		        'voice': Tone.Synth
		    };
		    /**
			 *  Trigger the attack portion of the note
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} [time=now]  The start time of the note.
			 *  @param {number} [velocity=1] The velocity of the note.
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * //trigger a chord immediately with a velocity of 0.2
			 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
			 */
		    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {
		        if (!Array.isArray(notes)) {
		            notes = [notes];
		        }
		        time = this.toSeconds(time);
		        for (var i = 0; i < notes.length; i++) {
		            var val = notes[i];
		            //trigger the oldest voice
		            var oldest = this._triggers[0];
		            var oldestIndex = 0;
		            for (var j = 1; j < this._triggers.length; j++) {
		                if (this._triggers[j].release < oldest.release) {
		                    oldest = this._triggers[j];
		                    oldestIndex = j;
		                }
		            }
		            oldest.release = Infinity;
		            oldest.note = JSON.stringify(val);
		            oldest.voice.triggerAttack(val, time, velocity);
		        }
		        return this;
		    };
		    /**
			 *  Trigger the attack and release after the specified duration
			 *  
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} duration the duration of the note
			 *  @param  {Time} [time=now]     if no time is given, defaults to now
			 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * //trigger a chord for a duration of a half note 
			 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
			 *  @example
			 * //can pass in an array of durations as well
			 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
			 */
		    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
		        time = this.toSeconds(time);
		        this.triggerAttack(notes, time, velocity);
		        if (this.isArray(duration) && this.isArray(notes)) {
		            for (var i = 0; i < notes.length; i++) {
		                var d = duration[Math.min(i, duration.length - 1)];
		                this.triggerRelease(notes[i], time + this.toSeconds(d));
		            }
		        } else {
		            this.triggerRelease(notes, time + this.toSeconds(duration));
		        }
		        return this;
		    };
		    /**
			 *  Trigger the release of the note. Unlike monophonic instruments, 
			 *  a note (or array of notes) needs to be passed in as the first argument.
			 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
			 *                                  Frequency or an array of frequencies.
			 *  @param  {Time} [time=now]  When the release will be triggered. 
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
			 */
		    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {
		        if (!Array.isArray(notes)) {
		            notes = [notes];
		        }
		        time = this.toSeconds(time);
		        for (var i = 0; i < notes.length; i++) {
		            //get the voice
		            var stringified = JSON.stringify(notes[i]);
		            for (var v = 0; v < this._triggers.length; v++) {
		                var desc = this._triggers[v];
		                if (desc.note === stringified && desc.release > time) {
		                    desc.voice.triggerRelease(time);
		                    desc.release = time;
		                }
		            }
		        }
		        return this;
		    };
		    /**
			 *  Set a member/attribute of the voices. 
			 *  @param {Object|string} params
			 *  @param {number=} value
			 *  @param {Time=} rampTime
			 *  @returns {Tone.PolySynth} this
			 *  @example
			 * poly.set({
			 * 	"filter" : {
			 * 		"type" : "highpass"
			 * 	},
			 * 	"envelope" : {
			 * 		"attack" : 0.25
			 * 	}
			 * });
			 */
		    Tone.PolySynth.prototype.set = function (params, value, rampTime) {
		        for (var i = 0; i < this.voices.length; i++) {
		            this.voices[i].set(params, value, rampTime);
		        }
		        return this;
		    };
		    /**
			 *  Get the synth's attributes. Given no arguments get
			 *  will return all available object properties and their corresponding
			 *  values. Pass in a single attribute to retrieve or an array
			 *  of attributes. The attribute strings can also include a "."
			 *  to access deeper properties.
			 *  @param {Array=} params the parameters to get, otherwise will return 
			 *  					   all available.
			 */
		    Tone.PolySynth.prototype.get = function (params) {
		        return this.voices[0].get(params);
		    };
		    /**
			 *  Trigger the release portion of all the currently active voices.
			 *  @param {Time} [time=now] When the notes should be released.
			 *  @return {Tone.PolySynth} this
			 */
		    Tone.PolySynth.prototype.releaseAll = function (time) {
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._triggers.length; i++) {
		            var desc = this._triggers[i];
		            if (desc.release > time) {
		                desc.release = time;
		                desc.voice.triggerRelease(time);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Clean up.
			 *  @returns {Tone.PolySynth} this
			 */
		    Tone.PolySynth.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        for (var i = 0; i < this.voices.length; i++) {
		            this.voices[i].dispose();
		            this.voices[i] = null;
		        }
		        this._writable('detune');
		        this.detune.dispose();
		        this.detune = null;
		        this.voices = null;
		        this._triggers = null;
		        return this;
		    };
		    /**
			 *  The maximum number of notes that can be allocated 
			 *  to a polysynth. 
			 *  @type  {Number}
			 *  @static
			 */
		    Tone.PolySynth.MAX_POLYPHONY = 20;
		    return Tone.PolySynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
			 *  
			 *  @constructor
			 *  @extends {Tone.Source} 
			 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
			 *                                  which to load the AudioBuffer
			 *  @param {function=} onload The function to invoke when the buffer is loaded. 
			 *                            Recommended to use Tone.Buffer.on('load') instead.
			 *  @example
			 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
			 * //play as soon as the buffer is loaded
			 * player.autostart = true;
			 */
		    Tone.Player = function (url) {
		        var options;
		        if (url instanceof Tone.Buffer) {
		            url = url.get();
		            options = Tone.Player.defaults;
		        } else {
		            options = this.optionsObject(arguments, [
		                'url',
		                'onload'
		            ], Tone.Player.defaults);
		        }
		        Tone.Source.call(this, options);
		        /**
				 *  @private
				 *  @type {AudioBufferSourceNode}
				 */
		        this._source = null;
		        /**
				 *  If the file should play as soon
				 *  as the buffer is loaded. 
				 *  @type {boolean}
				 *  @example
				 * //will play as soon as it's loaded
				 * var player = new Tone.Player({
				 * 	"url" : "./path/to/sample.mp3",
				 * 	"autostart" : true,
				 * }).toMaster();
				 */
		        this.autostart = options.autostart;
		        /**
				 *  the buffer
				 *  @private
				 *  @type {Tone.Buffer}
				 */
		        this._buffer = new Tone.Buffer({
		            'url': options.url,
		            'onload': this._onload.bind(this, options.onload),
		            'reverse': options.reverse
		        });
		        if (url instanceof AudioBuffer) {
		            this._buffer.set(url);
		        }
		        /**
				 *  if the buffer should loop once it's over
				 *  @type {boolean}
				 *  @private
				 */
		        this._loop = options.loop;
		        /**
				 *  if 'loop' is true, the loop will start at this position
				 *  @type {Time}
				 *  @private
				 */
		        this._loopStart = options.loopStart;
		        /**
				 *  if 'loop' is true, the loop will end at this position
				 *  @type {Time}
				 *  @private
				 */
		        this._loopEnd = options.loopEnd;
		        /**
				 *  the playback rate
				 *  @private
				 *  @type {number}
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  Enabling retrigger will allow a player to be restarted
				 *  before the the previous 'start' is done playing. Otherwise, 
				 *  successive calls to Tone.Player.start will only start
				 *  the sample if it had played all the way through. 
				 *  @type {boolean}
				 */
		        this.retrigger = options.retrigger;
		    };
		    Tone.extend(Tone.Player, Tone.Source);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.Player.defaults = {
		        'onload': Tone.noOp,
		        'playbackRate': 1,
		        'loop': false,
		        'autostart': false,
		        'loopStart': 0,
		        'loopEnd': 0,
		        'retrigger': false,
		        'reverse': false
		    };
		    /**
			 *  Load the audio file as an audio buffer.
			 *  Decodes the audio asynchronously and invokes
			 *  the callback once the audio buffer loads. 
			 *  Note: this does not need to be called if a url
			 *  was passed in to the constructor. Only use this
			 *  if you want to manually load a new url. 
			 * @param {string} url The url of the buffer to load.
			 *                     Filetype support depends on the
			 *                     browser.
			 *  @param  {function=} callback The function to invoke once
			 *                               the sample is loaded.
			 *  @returns {Tone.Player} this
			 */
		    Tone.Player.prototype.load = function (url, callback) {
		        this._buffer.load(url, this._onload.bind(this, callback));
		        return this;
		    };
		    /**
			 * Internal callback when the buffer is loaded.
			 * @private
			 */
		    Tone.Player.prototype._onload = function (callback) {
		        callback(this);
		        if (this.autostart) {
		            this.start();
		        }
		    };
		    /**
			 *  Play the buffer at the given startTime. Optionally add an offset
			 *  and/or duration which will play the buffer from a position
			 *  within the buffer for the given duration. 
			 *  
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 *  @param  {Time=} duration How long the sample should play. If no duration
			 *                                is given, it will default to the full length 
			 *                                of the sample (minus any offset)
			 *  @returns {Tone.Player} this
			 *  @memberOf Tone.Player#
			 *  @method start
			 *  @name start
			 */
		    /**
			 *  Internal start method
			 *  @private
			 */
		    Tone.Player.prototype._start = function (startTime, offset, duration) {
		        if (this._buffer.loaded) {
		            //if it's a loop the default offset is the loopstart point
		            if (this._loop) {
		                offset = this.defaultArg(offset, this._loopStart);
		            } else {
		                //otherwise the default offset is 0
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toSeconds(offset);
		            //make sure it has a positive duration
		            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));
		            duration = this.toSeconds(duration);
		            //the values in seconds
		            startTime = this.toSeconds(startTime);
		            //make the source
		            this._source = this.context.createBufferSource();
		            this._source.buffer = this._buffer.get();
		            //set the looping properties
		            if (this._loop) {
		                this._source.loop = this._loop;
		                this._source.loopStart = this.toSeconds(this._loopStart);
		                this._source.loopEnd = this.toSeconds(this._loopEnd);
		            } else {
		                //if it's not looping, set the state change at the end of the sample
		                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);
		            }
		            //and other properties
		            this._source.playbackRate.value = this._playbackRate;
		            this._source.connect(this.output);
		            //start it
		            if (this._loop) {
		                //modify the offset if it's greater than the loop time
		                var loopEnd = this._source.loopEnd || this._buffer.duration;
		                var loopStart = this._source.loopStart;
		                var loopDuration = loopEnd - loopStart;
		                if (offset > loopDuration) {
		                    offset = loopStart + offset % loopDuration;
		                    if (offset > loopEnd) {
		                        offset -= loopDuration;
		                    }
		                }
		                this._source.start(startTime, offset);
		            } else {
		                this._source.start(startTime, offset, duration);
		            }
		        } else {
		            throw Error('Tone.Player: tried to start Player before the buffer was loaded');
		        }
		        return this;
		    };
		    /**
			 *  Stop playback.
			 *  @private
			 *  @param  {Time} [time=now]
			 *  @returns {Tone.Player} this
			 */
		    Tone.Player.prototype._stop = function (time) {
		        if (this._source) {
		            this._source.stop(this.toSeconds(time));
		            this._source = null;
		        }
		        return this;
		    };
		    /**
			 *  Seek to a specific time in the player's buffer. If the 
			 *  source is no longer playing at that time, it will stop.
			 *  If you seek to a time that 
			 *  @param {Time} offset The time to seek to.
			 *  @param {Time=} time The time for the seek event to occur.
			 *  @return {Tone.Player} this
			 *  @example
			 * source.start(0.2);
			 * source.stop(0.4);
			 */
		    Tone.Player.prototype.seek = function (offset, time) {
		        time = this.toSeconds(time);
		        if (this._state.getStateAtTime(time) === Tone.State.Started) {
		            offset = this.toSeconds(offset);
		            // if it's currently playing, stop it
		            this._stop(time);
		            //restart it at the given time
		            this._start(time, offset);
		        }
		        return this;
		    };
		    /**
			 *  Set the loop start and end. Will only loop if loop is 
			 *  set to true. 
			 *  @param {Time} loopStart The loop end time
			 *  @param {Time} loopEnd The loop end time
			 *  @returns {Tone.Player} this
			 *  @example
			 * //loop 0.1 seconds of the file. 
			 * player.setLoopPoints(0.2, 0.3);
			 * player.loop = true;
			 */
		    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {
		        this.loopStart = loopStart;
		        this.loopEnd = loopEnd;
		        return this;
		    };
		    /**
			 * If loop is true, the loop will start at this position. 
			 * @memberOf Tone.Player#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loopStart', {
		        get: function () {
		            return this._loopStart;
		        },
		        set: function (loopStart) {
		            this._loopStart = loopStart;
		            if (this._source) {
		                this._source.loopStart = this.toSeconds(loopStart);
		            }
		        }
		    });
		    /**
			 * If loop is true, the loop will end at this position.
			 * @memberOf Tone.Player#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {
		        get: function () {
		            return this._loopEnd;
		        },
		        set: function (loopEnd) {
		            this._loopEnd = loopEnd;
		            if (this._source) {
		                this._source.loopEnd = this.toSeconds(loopEnd);
		            }
		        }
		    });
		    /**
			 * The audio buffer belonging to the player. 
			 * @memberOf Tone.Player#
			 * @type {Tone.Buffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.Player.prototype, 'buffer', {
		        get: function () {
		            return this._buffer;
		        },
		        set: function (buffer) {
		            this._buffer.set(buffer);
		        }
		    });
		    /**
			 * If the buffer should loop once it's over. 
			 * @memberOf Tone.Player#
			 * @type {boolean}
			 * @name loop
			 */
		    Object.defineProperty(Tone.Player.prototype, 'loop', {
		        get: function () {
		            return this._loop;
		        },
		        set: function (loop) {
		            this._loop = loop;
		            if (this._source) {
		                this._source.loop = loop;
		            }
		        }
		    });
		    /**
			 * The playback speed. 1 is normal speed. This is not a signal because
			 * Safari and iOS currently don't support playbackRate as a signal.
			 * @memberOf Tone.Player#
			 * @type {number}
			 * @name playbackRate
			 */
		    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            if (this._source) {
		                this._source.playbackRate.value = rate;
		            }
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.Player#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Player.prototype, 'reverse', {
		        get: function () {
		            return this._buffer.reverse;
		        },
		        set: function (rev) {
		            this._buffer.reverse = rev;
		        }
		    });
		    /**
			 *  Dispose and disconnect.
			 *  @return {Tone.Player} this
			 */
		    Tone.Player.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        if (this._source !== null) {
		            this._source.disconnect();
		            this._source = null;
		        }
		        this._buffer.dispose();
		        this._buffer = null;
		        return this;
		    };
		    return Tone.Player;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.
			 *
			 *  @constructor
			 *  @extends {Tone.Instrument}
			 *  @param {String} url the url of the audio file
			 *  @param {Function=} onload The callback to invoke when the sample is loaded.
			 *  @example
			 * var sampler = new Sampler("./audio/casio/A1.mp3", function(){
			 * 	//repitch the sample down a half step
			 * 	sampler.triggerAttack(-1);
			 * }).toMaster();
			 */
		    Tone.Sampler = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.Sampler.defaults);
		        Tone.Instrument.call(this, options);
		        /**
				 *  The sample player.
				 *  @type {Tone.Player}
				 */
		        this.player = new Tone.Player(options.url, options.onload);
		        this.player.retrigger = true;
		        /**
				 *  The amplitude envelope. 
				 *  @type {Tone.AmplitudeEnvelope}
				 */
		        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
		        this.player.chain(this.envelope, this.output);
		        this._readOnly([
		            'player',
		            'envelope'
		        ]);
		        this.loop = options.loop;
		        this.reverse = options.reverse;
		    };
		    Tone.extend(Tone.Sampler, Tone.Instrument);
		    /**
			 *  the default parameters
			 *  @static
			 */
		    Tone.Sampler.defaults = {
		        'onload': Tone.noOp,
		        'loop': false,
		        'reverse': false,
		        'envelope': {
		            'attack': 0.001,
		            'decay': 0,
		            'sustain': 1,
		            'release': 0.1
		        }
		    };
		    /**
			 *  Trigger the start of the sample. 
			 *  @param {Interval} [pitch=0] The amount the sample should
			 *                              be repitched. 
			 *  @param {Time} [time=now] The time when the sample should start
			 *  @param {NormalRange} [velocity=1] The velocity of the note
			 *  @returns {Tone.Sampler} this
			 *  @example
			 * sampler.triggerAttack(0, "+0.1", 0.5);
			 */
		    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {
		        time = this.toSeconds(time);
		        pitch = this.defaultArg(pitch, 0);
		        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);
		        this.player.start(time);
		        this.envelope.triggerAttack(time, velocity);
		        return this;
		    };
		    /**
			 *  Start the release portion of the sample. Will stop the sample once the 
			 *  envelope has fully released. 
			 *  
			 *  @param {Time} [time=now] The time when the note should release
			 *  @returns {Tone.Sampler} this
			 *  @example
			 * sampler.triggerRelease();
			 */
		    Tone.Sampler.prototype.triggerRelease = function (time) {
		        time = this.toSeconds(time);
		        this.envelope.triggerRelease(time);
		        this.player.stop(this.toSeconds(this.envelope.release) + time);
		        return this;
		    };
		    /**
			 * If the output sample should loop or not.
			 * @memberOf Tone.Sampler#
			 * @type {number|string}
			 * @name loop
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'loop', {
		        get: function () {
		            return this.player.loop;
		        },
		        set: function (loop) {
		            this.player.loop = loop;
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.Sampler#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {
		        get: function () {
		            return this.player.reverse;
		        },
		        set: function (rev) {
		            this.player.reverse = rev;
		        }
		    });
		    /**
			 * The buffer to play.
			 * @memberOf Tone.Sampler#
			 * @type {Tone.Buffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {
		        get: function () {
		            return this.player.buffer;
		        },
		        set: function (buff) {
		            this.player.buffer = buff;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @returns {Tone.Sampler} this
			 */
		    Tone.Sampler.prototype.dispose = function () {
		        Tone.Instrument.prototype.dispose.call(this);
		        this._writable([
		            'player',
		            'envelope'
		        ]);
		        this.player.dispose();
		        this.player = null;
		        this.envelope.dispose();
		        this.envelope = null;
		        return this;
		    };
		    return Tone.Sampler;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Now called Tone.Synth
			 *  @constructor
			 *  @extends {Tone.Monophonic}
			 */
		    Tone.SimpleSynth = function (options) {
		        console.warn('Tone.SimpleSynth is now called Tone.Synth');
		        Tone.Synth.call(this, options);
		    };
		    Tone.extend(Tone.SimpleSynth, Tone.Synth);
		    return Tone.SimpleSynth;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
			 *         See also Tone.AudioToGain. 
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @example
			 * var g2a = new Tone.GainToAudio();
			 */
		    Tone.GainToAudio = function () {
		        /**
				 *  @type {WaveShaperNode}
				 *  @private
				 */
		        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
		            return Math.abs(x) * 2 - 1;
		        });
		    };
		    Tone.extend(Tone.GainToAudio, Tone.SignalBase);
		    /**
			 *  clean up
			 *  @returns {Tone.GainToAudio} this
			 */
		    Tone.GainToAudio.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._norm.dispose();
		        this._norm = null;
		        return this;
		    };
		    return Tone.GainToAudio;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
			 *
			 *  @extends {Tone.SignalBase}
			 *  @constructor
			 *  @param {number} inputMin the min input value
			 *  @param {number} inputMax the max input value
			 *  @example
			 * var norm = new Tone.Normalize(2, 4);
			 * var sig = new Tone.Signal(3).connect(norm);
			 * //output of norm is 0.5. 
			 */
		    Tone.Normalize = function (inputMin, inputMax) {
		        /**
				 *  the min input value
				 *  @type {number}
				 *  @private
				 */
		        this._inputMin = this.defaultArg(inputMin, 0);
		        /**
				 *  the max input value
				 *  @type {number}
				 *  @private
				 */
		        this._inputMax = this.defaultArg(inputMax, 1);
		        /**
				 *  subtract the min from the input
				 *  @type {Tone.Add}
				 *  @private
				 */
		        this._sub = this.input = new Tone.Add(0);
		        /**
				 *  divide by the difference between the input and output
				 *  @type {Tone.Multiply}
				 *  @private
				 */
		        this._div = this.output = new Tone.Multiply(1);
		        this._sub.connect(this._div);
		        this._setRange();
		    };
		    Tone.extend(Tone.Normalize, Tone.SignalBase);
		    /**
			 * The minimum value the input signal will reach.
			 * @memberOf Tone.Normalize#
			 * @type {number}
			 * @name min
			 */
		    Object.defineProperty(Tone.Normalize.prototype, 'min', {
		        get: function () {
		            return this._inputMin;
		        },
		        set: function (min) {
		            this._inputMin = min;
		            this._setRange();
		        }
		    });
		    /**
			 * The maximum value the input signal will reach.
			 * @memberOf Tone.Normalize#
			 * @type {number}
			 * @name max
			 */
		    Object.defineProperty(Tone.Normalize.prototype, 'max', {
		        get: function () {
		            return this._inputMax;
		        },
		        set: function (max) {
		            this._inputMax = max;
		            this._setRange();
		        }
		    });
		    /**
			 *  set the values
			 *  @private
			 */
		    Tone.Normalize.prototype._setRange = function () {
		        this._sub.value = -this._inputMin;
		        this._div.value = 1 / (this._inputMax - this._inputMin);
		    };
		    /**
			 *  clean up
			 *  @returns {Tone.Normalize} this
			 */
		    Tone.Normalize.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._sub.dispose();
		        this._sub = null;
		        this._div.dispose();
		        this._div = null;
		        return this;
		    };
		    return Tone.Normalize;
		});
		Module(function (Tone) {
		    /**
			 *  @class Wrapper around the native BufferSourceNode.
			 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
			 *  @param  {Function}  onended  The callback to invoke when the 
			 *                               buffer is done playing.
			 */
		    Tone.BufferSource = function () {
		        var options = this.optionsObject(arguments, [
		            'buffer',
		            'onended'
		        ], Tone.BufferSource.defaults);
		        /**
				 *  The callback to invoke after the 
				 *  buffer source is done playing. 
				 *  @type  {Function}
				 */
		        this.onended = options.onended;
		        /**
				 *  The time that the buffer was started.
				 *  @type  {Number}
				 *  @private
				 */
		        this._startTime = -1;
		        /**
				 *  The gain node which envelopes the BufferSource
				 *  @type  {Tone.Gain}
				 *  @private
				 */
		        this._gainNode = this.output = new Tone.Gain();
		        /**
				 *  The buffer source
				 *  @type  {AudioBufferSourceNode}
				 *  @private
				 */
		        this._source = this.context.createBufferSource();
		        this._source.connect(this._gainNode);
		        this._source.onended = this._onended.bind(this);
		        /**
				 *  The playbackRate of the buffer
				 *  @type {Positive}
				 *  @signal
				 */
		        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);
		        /**
				 *  The fadeIn time of the amplitude envelope.
				 *  @type {Time}
				 */
		        this.fadeIn = options.fadeIn;
		        /**
				 *  The fadeOut time of the amplitude envelope.
				 *  @type {Time}
				 */
		        this.fadeOut = options.fadeOut;
		        /**
				 *  The value that the buffer ramps to
				 *  @type {Gain}
				 *  @private
				 */
		        this._gain = 1;
		        //set the buffer initially
		        if (!this.isUndef(options.buffer)) {
		            this.buffer = options.buffer;
		        }
		        this.loop = options.loop;
		    };
		    Tone.extend(Tone.BufferSource);
		    /**
			 *  The defaults
			 *  @const
			 *  @type  {Object}
			 */
		    Tone.BufferSource.defaults = {
		        'onended': Tone.noOp,
		        'fadeIn': 0,
		        'fadeOut': 0
		    };
		    /**
			 *  Returns the playback state of the source, either "started" or "stopped".
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.BufferSource#
			 *  @name state
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'state', {
		        get: function () {
		            var now = this.now();
		            if (this._startTime !== -1 && now > this._startTime) {
		                return Tone.State.Started;
		            } else {
		                return Tone.State.Stopped;
		            }
		        }
		    });
		    /**
			 *  Start the buffer
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 *  @param  {Time=} duration How long the sample should play. If no duration
			 *                                is given, it will default to the full length 
			 *                                of the sample (minus any offset)
			 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
			 *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {
		        if (this._startTime !== -1) {
		            throw new Error('Tone.BufferSource: can only be started once.');
		        }
		        if (this.buffer) {
		            time = this.toSeconds(time);
		            //if it's a loop the default offset is the loopstart point
		            if (this.loop) {
		                offset = this.defaultArg(offset, this.loopStart);
		            } else {
		                //otherwise the default offset is 0
		                offset = this.defaultArg(offset, 0);
		            }
		            offset = this.toSeconds(offset);
		            //the values in seconds
		            time = this.toSeconds(time);
		            this._source.start(time, offset);
		            gain = this.defaultArg(gain, 1);
		            this._gain = gain;
		            //the fadeIn time
		            if (this.isUndef(fadeInTime)) {
		                fadeInTime = this.toSeconds(this.fadeIn);
		            } else {
		                fadeInTime = this.toSeconds(fadeInTime);
		            }
		            if (fadeInTime > 0) {
		                this._gainNode.gain.setValueAtTime(0, time);
		                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);
		            } else {
		                this._gainNode.gain.setValueAtTime(gain, time);
		            }
		            this._startTime = time + fadeInTime;
		            if (!this.isUndef(duration)) {
		                duration = this.defaultArg(duration, this.buffer.duration - offset);
		                duration = this.toSeconds(duration);
		                this.stop(time + duration + fadeInTime, fadeInTime);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Stop the buffer. Optionally add a ramp time to fade the 
			 *  buffer out. 
			 *  @param  {Time=}  time         The time the buffer should stop.
			 *  @param  {Time=}  fadeOutTime  How long the gain should fade out for
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {
		        if (this.buffer) {
		            time = this.toSeconds(time);
		            //the fadeOut time
		            if (this.isUndef(fadeOutTime)) {
		                fadeOutTime = this.toSeconds(this.fadeOut);
		            } else {
		                fadeOutTime = this.toSeconds(fadeOutTime);
		            }
		            //cancel the end curve
		            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);
		            //set a new one
		            if (fadeOutTime > 0) {
		                this._gainNode.gain.setValueAtTime(this._gain, time);
		                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);
		                time += fadeOutTime;
		            } else {
		                this._gainNode.gain.setValueAtTime(0, time);
		            }
		            // fix for safari bug and old FF
		            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {
		                this._source.stop(time);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Internal callback when the buffer is ended. 
			 *  Invokes `onended` and disposes the node.
			 *  @private
			 */
		    Tone.BufferSource.prototype._onended = function () {
		        this.onended(this);
		        this.dispose();
		    };
		    /**
			 * If loop is true, the loop will start at this position. 
			 * @memberOf Tone.BufferSource#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {
		        get: function () {
		            return this._source.loopStart;
		        },
		        set: function (loopStart) {
		            this._source.loopStart = this.toSeconds(loopStart);
		        }
		    });
		    /**
			 * If loop is true, the loop will end at this position.
			 * @memberOf Tone.BufferSource#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {
		        get: function () {
		            return this._source.loopEnd;
		        },
		        set: function (loopEnd) {
		            this._source.loopEnd = this.toSeconds(loopEnd);
		        }
		    });
		    /**
			 * The audio buffer belonging to the player. 
			 * @memberOf Tone.BufferSource#
			 * @type {AudioBuffer}
			 * @name buffer
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {
		        get: function () {
		            if (this._source) {
		                return this._source.buffer;
		            } else {
		                return null;
		            }
		        },
		        set: function (buffer) {
		            if (buffer instanceof Tone.Buffer) {
		                this._source.buffer = buffer.get();
		            } else {
		                this._source.buffer = buffer;
		            }
		        }
		    });
		    /**
			 * If the buffer should loop once it's over. 
			 * @memberOf Tone.BufferSource#
			 * @type {boolean}
			 * @name loop
			 */
		    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {
		        get: function () {
		            return this._source.loop;
		        },
		        set: function (loop) {
		            this._source.loop = loop;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.BufferSource}  this
			 */
		    Tone.BufferSource.prototype.dispose = function () {
		        this.onended = null;
		        if (this._source) {
		            this._source.onended = null;
		            this._source.disconnect();
		            this._source = null;
		        }
		        if (this._gainNode) {
		            this._gainNode.dispose();
		            this._gainNode = null;
		        }
		        this._startTime = -1;
		        this.playbackRate = null;
		        this.output = null;
		        return this;
		    };
		    return Tone.BufferSource;
		});
		Module(function (Tone) {
		    
		    //polyfill for getUserMedia
		    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
		    /**
			 *  @class  Tone.ExternalInput is a WebRTC Audio Input. Check 
			 *          [Media Stream API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaStream_API)
			 *          to see which browsers are supported. As of
			 *          writing this, Chrome, Firefox, and Opera 
			 *          support Media Stream. Chrome allows enumeration 
			 *          of the sources, and access to device name over a 
			 *          secure (HTTPS) connection. See [https://simpl.info](https://simpl.info/getusermedia/sources/index.html) 
			 *          vs [http://simple.info](https://simpl.info/getusermedia/sources/index.html) 
			 *          on a Chrome browser for the difference.
			 *         
			 *  @constructor
			 *  @extends {Tone.Source}
			 *  @param {number} [inputNum=0] If multiple inputs are present, select the input number. Chrome only.
			 *  @example
			 * //select the third input
			 * var motu = new Tone.ExternalInput(3);
			 * 
			 * //opening the input asks the user to activate their mic
			 * motu.open(function(){
			 * 	//opening is activates the microphone
			 * 	//starting lets audio through
			 * 	motu.start(10);
			 * });
			 */
		    Tone.ExternalInput = function () {
		        var options = this.optionsObject(arguments, ['inputNum'], Tone.ExternalInput.defaults);
		        Tone.Source.call(this, options);
		        /**
				 *  The MediaStreamNode 
				 *  @type {MediaStreamAudioSourceNode}
				 *  @private
				 */
		        this._mediaStream = null;
		        /**
				 *  The media stream created by getUserMedia.
				 *  @type {LocalMediaStream}
				 *  @private
				 */
		        this._stream = null;
		        /**
				 *  The constraints argument for getUserMedia
				 *  @type {Object}
				 *  @private
				 */
		        this._constraints = { 'audio': true };
		        /**
				 *  The input source position in Tone.ExternalInput.sources. 
				 *  Set before ExternalInput.open().
				 *  @type {Number}
				 *  @private
				 */
		        this._inputNum = options.inputNum;
		        /**
				 *  Gates the input signal for start/stop. 
				 *  Initially closed.
				 *  @type {GainNode}
				 *  @private
				 */
		        this._gate = new Tone.Gain(0).connect(this.output);
		    };
		    Tone.extend(Tone.ExternalInput, Tone.Source);
		    /**
			 * the default parameters
			 * @type {Object}
			 */
		    Tone.ExternalInput.defaults = { 'inputNum': 0 };
		    /**
			 * wrapper for getUserMedia function
			 * @param {function} callback
			 * @param {function} error
			 * @private
			 */
		    Tone.ExternalInput.prototype._getUserMedia = function (callback, error) {
		        if (!Tone.ExternalInput.supported) {
		            error('browser does not support \'getUserMedia\'');
		        }
		        if (Tone.ExternalInput.sources[this._inputNum]) {
		            this._constraints = { audio: { optional: [{ sourceId: Tone.ExternalInput.sources[this._inputNum].id }] } };
		        }
		        navigator.getUserMedia(this._constraints, function (stream) {
		            this._onStream(stream);
		            callback();
		        }.bind(this), function (err) {
		            error(err);
		        });
		    };
		    /**
			 * called when the stream is successfully setup
			 * @param  {LocalMediaStream} stream
			 * @private
			 */
		    Tone.ExternalInput.prototype._onStream = function (stream) {
		        if (!this.isFunction(this.context.createMediaStreamSource)) {
		            throw new Error('Tone.ExternalInput: browser does not support the \'MediaStreamSourceNode\'');
		        }
		        //can only start a new source if the previous one is closed
		        if (!this._stream) {
		            this._stream = stream;
		            //Wrap a MediaStreamSourceNode around the live input stream.
		            this._mediaStream = this.context.createMediaStreamSource(stream);
		            //Connect the MediaStreamSourceNode to a gate gain node
		            this._mediaStream.connect(this._gate);
		        }
		    };
		    /**
			 *  Open the media stream 
			 *  @param  {function=} callback The callback function to 
			 *                       execute when the stream is open
			 *  @param  {function=} error The callback function to execute
			 *                            when the media stream can't open. 
			 *                            This is fired either because the browser
			 *                            doesn't support the media stream,
			 *                            or the user blocked opening the microphone. 
			 *  @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.open = function (callback, error) {
		        callback = this.defaultArg(callback, Tone.noOp);
		        error = this.defaultArg(error, Tone.noOp);
		        Tone.ExternalInput.getSources(function () {
		            this._getUserMedia(callback, error);
		        }.bind(this));
		        return this;
		    };
		    /**
			 *  Close the media stream
			 *  @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.close = function () {
		        if (this._stream) {
		            var track = this._stream.getTracks()[this._inputNum];
		            if (!this.isUndef(track)) {
		                track.stop();
		            }
		            this._stream = null;
		        }
		        return this;
		    };
		    /**
			 *  Start the stream
			 *  @private
			 */
		    Tone.ExternalInput.prototype._start = function (time) {
		        time = this.toSeconds(time);
		        this._gate.gain.setValueAtTime(1, time);
		        return this;
		    };
		    /**
			 *  Stops the stream.
			 *  @private
			 */
		    Tone.ExternalInput.prototype._stop = function (time) {
		        time = this.toSeconds(time);
		        this._gate.gain.setValueAtTime(0, time);
		        return this;
		    };
		    /**
			 * Clean up.
			 * @return {Tone.ExternalInput} this
			 */
		    Tone.ExternalInput.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this.close();
		        if (this._mediaStream) {
		            this._mediaStream.disconnect();
		            this._mediaStream = null;
		        }
		        this._constraints = null;
		        this._gate.dispose();
		        this._gate = null;
		        return this;
		    };
		    ///////////////////////////////////////////////////////////////////////////
		    // STATIC METHODS
		    ///////////////////////////////////////////////////////////////////////////
		    /**
			 * The array of available sources, different depending on whether connection is secure
			 * @type {Array}
			 * @static
			 */
		    Tone.ExternalInput.sources = [];
		    /**
			 * indicates whether browser supports MediaStreamTrack.getSources (i.e. Chrome vs Firefox)
			 * @type {Boolean}
			 * @private
			 */
		    Tone.ExternalInput._canGetSources = !Tone.prototype.isUndef(window.MediaStreamTrack) && Tone.prototype.isFunction(MediaStreamTrack.getSources);
		    /**
			 *  If getUserMedia is supported by the browser.
			 *  @type  {Boolean}
			 *  @memberOf Tone.ExternalInput#
			 *  @name supported
			 *  @static
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.ExternalInput, 'supported', {
		        get: function () {
		            return Tone.prototype.isFunction(navigator.getUserMedia);
		        }
		    });
		    /**
			 *  Populates the source list. Invokes the callback with an array of 
			 *  possible audio sources.
			 *  @param  {function=} callback Callback to be executed after populating list 
			 *  @return {Tone.ExternalInput} this
			 *  @static
			 *  @example
			 * var soundflower = new Tone.ExternalInput();
			 * Tone.ExternalInput.getSources(selectSoundflower);
			 *
			 * function selectSoundflower(sources){
			 * 	for(var i = 0; i < sources.length; i++){
			 * 		if(sources[i].label === "soundflower"){
			 * 			soundflower.inputNum = i;
			 * 			soundflower.open(function(){
			 * 				soundflower.start();
			 * 			});
			 * 			break;
			 * 		}
			 * 	}
			 * };
			 */
		    Tone.ExternalInput.getSources = function (callback) {
		        if (Tone.ExternalInput.sources.length === 0 && Tone.ExternalInput._canGetSources) {
		            MediaStreamTrack.getSources(function (media_sources) {
		                for (var i = 0; i < media_sources.length; i++) {
		                    if (media_sources[i].kind === 'audio') {
		                        Tone.ExternalInput.sources[i] = media_sources[i];
		                    }
		                }
		                callback(Tone.ExternalInput.sources);
		            });
		        } else {
		            callback(Tone.ExternalInput.sources);
		        }
		        return this;
		    };
		    return Tone.ExternalInput;
		});
		Module(function (Tone) {
		    /**
			 *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled istruments
			 *         or any time you need to play a bunch of audio buffers. 
			 *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available
			 *                                                to the MultiPlayer
			 *  @param {Function} onload The callback to invoke when all of the buffers are loaded.
			 *  @extends {Tone}
			 *  @example
			 * var multiPlayer = new MultiPlayer({
			 * 	"kick" : "path/to/kick.mp3",
			 * 	"snare" : "path/to/snare.mp3",
			 * }, function(){
			 * 	multiPlayer.start("kick");
			 * });
			 *  @example
			 * //can also store the values in an array
			 * var multiPlayer = new MultiPlayer(["path/to/kick.mp3", "path/to/snare.mp3"], 
			 * function(){
			 * 	//if an array is passed in, the samples are referenced to by index
			 * 	multiPlayer.start(1);
			 * });
			 */
		    Tone.MultiPlayer = function () {
		        var options = this.optionsObject(arguments, [
		            'urls',
		            'onload'
		        ], Tone.MultiPlayer.defaults);
		        if (options.urls instanceof Tone.Buffers) {
		            /**
					 *  All the buffers belonging to the player.
					 *  @type  {Tone.Buffers}
					 */
		            this.buffers = options.urls;
		        } else {
		            this.buffers = new Tone.Buffers(options.urls, options.onload);
		        }
		        /**
				 *  Keeps track of the currently playing sources.
				 *  @type  {Array}
				 *  @private
				 */
		        this._activeSources = [];
		        /**
				 *  The fade in envelope which is applied
				 *  to the beginning of the BufferSource
				 *  @type  {Time}
				 */
		        this.fadeIn = options.fadeIn;
		        /**
				 *  The fade out envelope which is applied
				 *  to the end of the BufferSource
				 *  @type  {Time}
				 */
		        this.fadeOut = options.fadeOut;
		        /**
				 *  The output volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
		        this._volume = this.output = new Tone.Volume(options.volume);
		        /**
				 * The volume of the output in decibels.
				 * @type {Decibels}
				 * @signal
				 * @example
				 * source.volume.value = -6;
				 */
		        this.volume = this._volume.volume;
		        this._readOnly('volume');
		        //make the output explicitly stereo
		        this._volume.output.output.channelCount = 2;
		        this._volume.output.output.channelCountMode = 'explicit';
		        //mute initially
		        this.mute = options.mute;
		    };
		    Tone.extend(Tone.MultiPlayer, Tone.Source);
		    /**
			 *  The defaults
			 *  @type  {Object}
			 */
		    Tone.MultiPlayer.defaults = {
		        'onload': Tone.noOp,
		        'fadeIn': 0,
		        'fadeOut': 0
		    };
		    /**
			 *  Get the given buffer.
			 *  @param  {String|Number|AudioBuffer|Tone.Buffer}  buffer
			 *  @return  {AudioBuffer}  The requested buffer.
			 *  @private
			 */
		    Tone.MultiPlayer.prototype._getBuffer = function (buffer) {
		        if (this.isNumber(buffer) || this.isString(buffer)) {
		            return this.buffers.get(buffer).get();
		        } else if (buffer instanceof Tone.Buffer) {
		            return buffer.get();
		        } else {
		            return buffer;
		        }
		    };
		    /**
			 *  Start a buffer by name. The `start` method allows a number of options
			 *  to be passed in such as offset, interval, and gain. This is good for multi-sampled 
			 *  instruments and sound sprites where samples are repitched played back at different velocities.
			 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
			 *                                          Or pass in a buffer which will be started.
			 *  @param  {Time}  time      When to start the buffer.
			 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
			 *  @param  {Time=}  duration   How long to play the buffer for.
			 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
			 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.start = function (buffer, time, offset, duration, pitch, gain) {
		        buffer = this._getBuffer(buffer);
		        var source = new Tone.BufferSource(buffer).connect(this.output);
		        this._activeSources.push(source);
		        time = this.toSeconds(time);
		        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);
		        if (duration) {
		            source.stop(time + this.toSeconds(duration), this.fadeOut);
		        }
		        source.onended = this._onended.bind(this);
		        pitch = this.defaultArg(pitch, 0);
		        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
		        return this;
		    };
		    /**
			 *  Start a looping buffer by name. Similar to `start`, but the buffer
			 *  is looped instead of played straight through. Can still be stopped with `stop`. 
			 *  @param  {String|AudioBuffer}  buffer    The name of the buffer to start.
			 *                                          Or pass in a buffer which will be started.
			 *  @param  {Time}  time      When to start the buffer.
			 *  @param  {Time}  [offset=0]    The offset into the buffer to play from.
			 *  @param  {Time=}  loopStart   The start of the loop.
			 *  @param  {Time=}  loopEnd	The end of the loop.
			 *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.
			 *  @param  {Gain}  [gain=1]      The gain to play the sample at.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.startLoop = function (buffer, time, offset, loopStart, loopEnd, pitch, gain) {
		        buffer = this._getBuffer(buffer);
		        var source = new Tone.BufferSource(buffer).connect(this.output);
		        this._activeSources.push(source);
		        time = this.toSeconds(time);
		        source.loop = true;
		        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));
		        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));
		        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);
		        source.onended = this._onended.bind(this);
		        pitch = this.defaultArg(pitch, 0);
		        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);
		        return this;
		    };
		    /**
			 *  Internal callback when a buffer is done playing.
			 *  @param  {Tone.BufferSource}  source  The stopped source
			 *  @private
			 */
		    Tone.MultiPlayer.prototype._onended = function (source) {
		        var index = this._activeSources.indexOf(source);
		        this._activeSources.splice(index, 1);
		    };
		    /**
			 *  Stop all instances of the currently playing buffer at the given time.
			 *  @param  {String|AudioBuffer}  buffer  The buffer to stop.
			 *  @param  {Time=}  time    When to stop the buffer
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.stop = function (buffer, time) {
		        buffer = this._getBuffer(buffer);
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._activeSources.length; i++) {
		            if (this._activeSources[i].buffer === buffer) {
		                this._activeSources[i].stop(time, this.fadeOut);
		            }
		        }
		        return this;
		    };
		    /**
			 *  Stop all currently playing buffers at the given time.
			 *  @param  {Time=}  time  When to stop the buffers.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.stopAll = function (time) {
		        time = this.toSeconds(time);
		        for (var i = 0; i < this._activeSources.length; i++) {
		            this._activeSources[i].stop(time, this.fadeOut);
		        }
		        return this;
		    };
		    /**
			 *  Add another buffer to the available buffers.
			 *  @param {String} name The name to that the buffer is refered
			 *                       to in start/stop methods. 
			 *  @param {String|Tone.Buffer} url The url of the buffer to load
			 *                                  or the buffer.
			 *  @param {Function} callback The function to invoke after the buffer is loaded.
			 */
		    Tone.MultiPlayer.prototype.add = function (name, url, callback) {
		        this.buffers.add(name, url, callback);
		        return this;
		    };
		    /**
			 *  Returns the playback state of the source. "started"
			 *  if there are any buffers playing. "stopped" otherwise.
			 *  @type {Tone.State}
			 *  @readOnly
			 *  @memberOf Tone.MultiPlayer#
			 *  @name state
			 */
		    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {
		        get: function () {
		            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;
		        }
		    });
		    /**
			 * Mute the output. 
			 * @memberOf Tone.MultiPlayer#
			 * @type {boolean}
			 * @name mute
			 * @example
			 * //mute the output
			 * source.mute = true;
			 */
		    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {
		        get: function () {
		            return this._volume.mute;
		        },
		        set: function (mute) {
		            this._volume.mute = mute;
		        }
		    });
		    /**
			 *  Clean up.
			 *  @return  {Tone.MultiPlayer}  this
			 */
		    Tone.MultiPlayer.prototype.dispose = function () {
		        Tone.prototype.dispose.call(this);
		        this._volume.dispose();
		        this._volume = null;
		        this._writable('volume');
		        this.volume = null;
		        this.buffers.dispose();
		        this.buffers = null;
		        for (var i = 0; i < this._activeSources.length; i++) {
		            this._activeSources[i].dispose();
		        }
		        this._activeSources = null;
		        return this;
		    };
		    return Tone.MultiPlayer;
		});
		Module(function (Tone) {
		    /**
			 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
			 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the 
			 *        amount of time each small chunk of audio is played for and the overlap is the 
			 *        amount of crossfading transition time between successive grains.
			 * @extends {Tone}
			 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
			 * @param {Function=} callback The callback to invoke after the url is loaded.
			 */
		    Tone.GrainPlayer = function () {
		        var options = this.optionsObject(arguments, [
		            'url',
		            'onload'
		        ], Tone.GrainPlayer.defaults);
		        Tone.Source.call(this);
		        /**
				 *  The audio buffer belonging to the player.
				 *  @type  {Tone.Buffer}
				 */
		        this.buffer = new Tone.Buffer(options.url, options.onload);
		        /**
				 *  Plays the buffer with a small envelope
				 *  @type  {Tone.MultiPlayer}
				 *  @private
				 */
		        this._player = this.output = new Tone.MultiPlayer();
		        /**
				 *  Create a repeating tick to schedule
				 *  the grains.
				 *  @type  {Tone.Clock}
				 *  @private
				 */
		        this._clock = new Tone.Clock(this._tick.bind(this), 1);
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopStart = 0;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._loopEnd = 0;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._playbackRate = options.playbackRate;
		        /**
				 *  @type  {Number}
				 *  @private
				 */
		        this._grainSize = options.grainSize;
		        /**
				 *  @private
				 *  @type {Number}
				 */
		        this._overlap = options.overlap;
		        /**
				 *  Adjust the pitch independently of the playbackRate.
				 *  @type  {Cents}
				 */
		        this.detune = options.detune;
		        /**
				 *  The amount of time randomly added
				 *  or subtracted from the grain's offset
				 *  @type  {Time}
				 */
		        this.drift = options.drift;
		        //setup
		        this.overlap = options.overlap;
		        this.loop = options.loop;
		        this.playbackRate = options.playbackRate;
		        this.grainSize = options.grainSize;
		        this.loopStart = options.loopStart;
		        this.loopEnd = options.loopEnd;
		        this.reverse = options.reverse;
		    };
		    Tone.extend(Tone.GrainPlayer, Tone.Source);
		    /**
			 *  the default parameters
			 *  @static
			 *  @const
			 *  @type {Object}
			 */
		    Tone.GrainPlayer.defaults = {
		        'onload': Tone.noOp,
		        'overlap': 0.1,
		        'grainSize': 0.2,
		        'drift': 0,
		        'playbackRate': 1,
		        'detune': 0,
		        'loop': false,
		        'loopStart': 0,
		        'loopEnd': 0,
		        'reverse': false
		    };
		    /**
			 *  Play the buffer at the given startTime. Optionally add an offset
			 *  from the start of the buffer to play from.
			 *  
			 *  @param  {Time} [startTime=now] When the player should start.
			 *  @param  {Time} [offset=0] The offset from the beginning of the sample
			 *                                 to start at. 
			 * @return {Tone.GrainPlayer} this
			 */
		    /**
			 *  Internal start method
			 *  @param {Time} time
			 *  @param {Time} offset
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._start = function (time, offset) {
		        offset = this.defaultArg(offset, 0);
		        offset = this.toSeconds(offset);
		        time = this.toSeconds(time);
		        this._offset = offset;
		        this._clock.start(time);
		    };
		    /**
			 *  Internal start method
			 *  @param {Time} time
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._stop = function (time) {
		        this._clock.stop(time);
		        this._player.stop(this.buffer, time);
		        this._offset = 0;
		    };
		    /**
			 *  Invoked on each clock tick. scheduled a new
			 *  grain at this time.
			 *  @param  {Time}  time 
			 *  @private
			 */
		    Tone.GrainPlayer.prototype._tick = function (time) {
		        var bufferDuration = this.buffer.duration;
		        if (this.loop && this._loopEnd > 0) {
		            bufferDuration = this._loopEnd;
		        }
		        var drift = (Math.random() * 2 - 1) * this.drift;
		        var offset = this._offset - this._overlap + drift;
		        var detune = this.detune / 100;
		        var originalFadeIn = this._player.fadeIn;
		        if (this.loop && this._offset > bufferDuration) {
		            //play the end
		            var endSegmentDuration = this._offset - bufferDuration;
		            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);
		            //and play the beginning 
		            offset = this._offset % bufferDuration;
		            this._offset = this._loopStart;
		            this._player.fadeIn = 0;
		            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);
		        } else if (this._offset > bufferDuration) {
		            //set the state to stopped. 
		            this.stop(time);
		        } else {
		            if (offset < 0) {
		                this._player.fadeIn = Math.max(this._player.fadeIn + offset, 0);
		                offset = 0;
		            }
		            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);
		        }
		        this._player.fadeIn = originalFadeIn;
		        //increment the offset
		        var duration = this._clock._nextTick - time;
		        this._offset += duration * this._playbackRate;
		    };
		    /**
			 *  Jump to a specific time and play it.
			 *  @param  {Time}  offset  The offset to jump to.
			 *  @param {Time=} time When to make the jump.
			 *  @return  {[type]}  [description]
			 */
		    Tone.GrainPlayer.prototype.scrub = function (offset, time) {
		        this._offset = this.toSeconds(offset);
		        this._tick(this.toSeconds(time));
		        return this;
		    };
		    /**
			 * The playback rate of the sample
			 * @memberOf Tone.GrainPlayer#
			 * @type {Positive}
			 * @name playbackRate
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {
		        get: function () {
		            return this._playbackRate;
		        },
		        set: function (rate) {
		            this._playbackRate = rate;
		            this.grainSize = this._grainSize;
		        }
		    });
		    /**
			 * The loop start time. 
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name loopStart
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {
		        get: function () {
		            return this._loopStart;
		        },
		        set: function (time) {
		            this._loopStart = this.toSeconds(time);
		        }
		    });
		    /**
			 * The loop end time. 
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name loopEnd
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {
		        get: function () {
		            return this._loopEnd;
		        },
		        set: function (time) {
		            this._loopEnd = this.toSeconds(time);
		        }
		    });
		    /**
			 * The direction the buffer should play in
			 * @memberOf Tone.GrainPlayer#
			 * @type {boolean}
			 * @name reverse
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {
		        get: function () {
		            return this.buffer.reverse;
		        },
		        set: function (rev) {
		            this.buffer.reverse = rev;
		        }
		    });
		    /**
			 * The size of each chunk of audio that the 
			 * buffer is chopped into and played back at.
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name grainSize
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {
		        get: function () {
		            return this._grainSize;
		        },
		        set: function (size) {
		            this._grainSize = this.toSeconds(size);
		            this._clock.frequency.value = this._playbackRate / this._grainSize;
		        }
		    });
		    /**
			 * This is the duration of the cross-fade between 
			 * sucessive grains.
			 * @memberOf Tone.GrainPlayer#
			 * @type {Time}
			 * @name overlap
			 */
		    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {
		        get: function () {
		            return this._overlap;
		        },
		        set: function (time) {
		            time = this.toSeconds(time);
		            this._overlap = time;
		            if (this._overlap < 0) {
		                this._player.fadeIn = 0.01;
		                this._player.fadeOut = 0.01;
		            } else {
		                this._player.fadeIn = time;
		                this._player.fadeOut = time;
		            }
		        }
		    });
		    /**
			 * Clean up
			 * @return {Tone.GrainPlayer} this
			 */
		    Tone.GrainPlayer.prototype.dispose = function () {
		        Tone.Source.prototype.dispose.call(this);
		        this.buffer.dispose();
		        this.buffer = null;
		        this._player.dispose();
		        this._player = null;
		        this._clock.dispose();
		        this._clock = null;
		        return this;
		    };
		    return Tone.GrainPlayer;
		});
		Module(function (Tone) {
		    
		    /**
			 *  @class  Opens up the default source (typically the microphone).
			 *
			 *  @constructor
			 *  @extends {Tone.ExternalInput}
			 *  @example
			 *  //mic will feedback if played through master
			 *  var mic = new Tone.Microphone();
			 *  mic.open(function(){
			 *  	//start the mic at ten seconds
			 *  	mic.start(10);
			 *  });
			 *  //stop the mic
			 *  mic.stop(20);
			 */
		    Tone.Microphone = function () {
		        Tone.ExternalInput.call(this, 0);
		    };
		    Tone.extend(Tone.Microphone, Tone.ExternalInput);
		    /**
			 *  If getUserMedia is supported by the browser.
			 *  @type  {Boolean}
			 *  @memberOf Tone.Microphone#
			 *  @name supported
			 *  @static
			 *  @readOnly
			 */
		    Object.defineProperty(Tone.Microphone, 'supported', {
		        get: function () {
		            return Tone.ExternalInput.supported;
		        }
		    });
		    return Tone.Microphone;
		});
		
		return Tone;
	}));

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ }),
/* 189 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var TRANSPORT_POS = exports.TRANSPORT_POS = {
	  "0:0:0": 0,
	  "0:0:1": 1,
	  "0:0:2": 2,
	  "0:0:3": 3,
	  "0:0:4": 4,
	  "0:1:0": 4,
	  "0:1:1": 5,
	  "0:1:2": 6,
	  "0:1:3": 7,
	  "0:1:4": 8,
	  "0:2:0": 8,
	  "0:2:1": 9,
	  "0:2:2": 10,
	  "0:2:3": 11,
	  "0:2:4": 12,
	  "0:3:0": 12,
	  "0:3:1": 13,
	  "0:3:2": 14,
	  "0:3:3": 15,
	  "0:3:4": 0
	};

/***/ }),
/* 190 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var eightZeroEight = exports.eightZeroEight = ["https://s3.amazonaws.com/react-drummachine/BD.WAV", "https://s3.amazonaws.com/react-drummachine/SD.WAV", "https://s3.amazonaws.com/react-drummachine/CH.WAV", "https://s3.amazonaws.com/react-drummachine/CP.WAV", "https://s3.amazonaws.com/react-drummachine/CB.WAV", "https://s3.amazonaws.com/react-drummachine/CL.WAV", "https://s3.amazonaws.com/react-drummachine/HC.WAV", "https://s3.amazonaws.com/react-drummachine/LC.WAV"];
	
	var localBeat = exports.localBeat = ["../../assets/samples/BD.WAV", "../../assets/samples/SD.WAV", "../../assets/samples/CH.WAV", "../../assets/samples/CP.WAV", "../../assets/samples/CB.WAV", "../../assets/samples/CL.wav", "../../assets/samples/HC.wav", "../../assets/samples/LC.wav"];

/***/ }),
/* 191 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var demoTrack = exports.demoTrack = [[true, null, null, true, null, null, null, null, null, null, true, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true], [null, null, null, null, true, null, null, null, null, null, null, null, true, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], [true, null, null, true, null, null, true, null, null, null, true, null, true, null, null, null], [null, null, null, null, null, null, null, true, null, null, null, null, null, null, null, null], [null, null, null, null, null, null, null, null, null, null, null, null, null, null, true, null]];

/***/ }),
/* 192 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var SamplerList = ["sampler1", "sampler2", "sampler3", "sampler4", "sampler5", "sampler6", "sampler7", "sampler8"];
	
	exports.default = SamplerList;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = undefined;
	
	var _Slider = __webpack_require__(194);
	
	var _Slider2 = _interopRequireDefault(_Slider);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _Slider2.default;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(195);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _objectWithoutProperties2 = __webpack_require__(234);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _getPrototypeOf = __webpack_require__(235);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(241);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(245);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(278);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _defineProperty2 = __webpack_require__(286);
	
	var _defineProperty3 = _interopRequireDefault(_defineProperty2);
	
	var _simpleAssign = __webpack_require__(287);
	
	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _keycode = __webpack_require__(288);
	
	var _keycode2 = _interopRequireDefault(_keycode);
	
	var _warning = __webpack_require__(289);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _transitions = __webpack_require__(290);
	
	var _transitions2 = _interopRequireDefault(_transitions);
	
	var _FocusRipple = __webpack_require__(291);
	
	var _FocusRipple2 = _interopRequireDefault(_FocusRipple);
	
	var _deprecatedPropType = __webpack_require__(302);
	
	var _deprecatedPropType2 = _interopRequireDefault(_deprecatedPropType);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Verifies min/max range.
	 * @param   {Object} props         Properties of the React component.
	 * @param   {String} propName      Name of the property to validate.
	 * @param   {String} componentName Name of the component whose property is being validated.
	 * @returns {Object} Returns an Error if min >= max otherwise null.
	 */
	var minMaxPropType = function minMaxPropType(props, propName, componentName) {
	  for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
	    rest[_key - 3] = arguments[_key];
	  }
	
	  var error = _react.PropTypes.number.apply(_react.PropTypes, [props, propName, componentName].concat(rest));
	  if (error !== null) {
	    return error;
	  }
	
	  if (props.min >= props.max) {
	    var errorMsg = propName === 'min' ? 'min should be less than max' : 'max should be greater than min';
	    return new Error(errorMsg);
	  }
	};
	
	/**
	 * Verifies value is within the min/max range.
	 * @param   {Object} props         Properties of the React component.
	 * @param   {String} propName      Name of the property to validate.
	 * @param   {String} componentName Name of the component whose property is being validated.
	 * @returns {Object} Returns an Error if the value is not within the range otherwise null.
	 */
	var valueInRangePropType = function valueInRangePropType(props, propName, componentName) {
	  for (var _len2 = arguments.length, rest = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
	    rest[_key2 - 3] = arguments[_key2];
	  }
	
	  var error = _react.PropTypes.number.apply(_react.PropTypes, [props, propName, componentName].concat(rest));
	  if (error !== null) {
	    return error;
	  }
	
	  var value = props[propName];
	  if (value < props.min || props.max < value) {
	    return new Error(propName + ' should be within the range specified by min and max');
	  }
	};
	
	var crossAxisProperty = {
	  x: 'height',
	  'x-reverse': 'height',
	  y: 'width',
	  'y-reverse': 'width'
	};
	
	var crossAxisOffsetProperty = {
	  x: 'top',
	  'x-reverse': 'top',
	  y: 'left',
	  'y-reverse': 'left'
	};
	
	var mainAxisProperty = {
	  x: 'width',
	  'x-reverse': 'width',
	  y: 'height',
	  'y-reverse': 'height'
	};
	
	var mainAxisMarginFromEnd = {
	  x: 'marginRight',
	  'x-reverse': 'marginLeft',
	  y: 'marginTop',
	  'y-reverse': 'marginBottom'
	};
	
	var mainAxisMarginFromStart = {
	  x: 'marginLeft',
	  'x-reverse': 'marginRight',
	  y: 'marginBottom',
	  'y-reverse': 'marginTop'
	};
	
	var mainAxisOffsetProperty = {
	  x: 'left',
	  'x-reverse': 'right',
	  y: 'bottom',
	  'y-reverse': 'top'
	};
	
	var mainAxisClientProperty = {
	  x: 'clientWidth',
	  'x-reverse': 'clientWidth',
	  y: 'clientHeight',
	  'y-reverse': 'clientHeight'
	};
	
	var mainAxisClientOffsetProperty = {
	  x: 'clientX',
	  'x-reverse': 'clientX',
	  y: 'clientY',
	  'y-reverse': 'clientY'
	};
	
	var reverseMainAxisOffsetProperty = {
	  x: 'right',
	  'x-reverse': 'left',
	  y: 'top',
	  'y-reverse': 'bottom'
	};
	
	var isMouseControlInverted = function isMouseControlInverted(axis) {
	  return axis === 'x-reverse' || axis === 'y';
	};
	
	function getPercent(value, min, max) {
	  var percent = (value - min) / (max - min);
	  if (isNaN(percent)) {
	    percent = 0;
	  }
	
	  return percent;
	}
	
	var getStyles = function getStyles(props, context, state) {
	  var _slider, _track, _filledAndRemaining, _handle, _objectAssign2, _objectAssign3;
	
	  var axis = props.axis,
	      disabled = props.disabled,
	      max = props.max,
	      min = props.min;
	  var _context$muiTheme$sli = context.muiTheme.slider,
	      handleColorZero = _context$muiTheme$sli.handleColorZero,
	      handleFillColor = _context$muiTheme$sli.handleFillColor,
	      handleSize = _context$muiTheme$sli.handleSize,
	      handleSizeDisabled = _context$muiTheme$sli.handleSizeDisabled,
	      handleSizeActive = _context$muiTheme$sli.handleSizeActive,
	      trackSize = _context$muiTheme$sli.trackSize,
	      trackColor = _context$muiTheme$sli.trackColor,
	      trackColorSelected = _context$muiTheme$sli.trackColorSelected,
	      rippleColor = _context$muiTheme$sli.rippleColor,
	      selectionColor = _context$muiTheme$sli.selectionColor;
	
	
	  var fillGutter = handleSize / 2;
	  var disabledGutter = trackSize + handleSizeDisabled / 2;
	  var calcDisabledSpacing = disabled ? ' - ' + disabledGutter + 'px' : '';
	  var percent = getPercent(state.value, min, max);
	
	  var styles = {
	    slider: (_slider = {
	      touchCallout: 'none',
	      userSelect: 'none',
	      cursor: 'default'
	    }, (0, _defineProperty3.default)(_slider, crossAxisProperty[axis], handleSizeActive), (0, _defineProperty3.default)(_slider, mainAxisProperty[axis], '100%'), (0, _defineProperty3.default)(_slider, 'position', 'relative'), (0, _defineProperty3.default)(_slider, 'marginTop', 24), (0, _defineProperty3.default)(_slider, 'marginBottom', 48), _slider),
	    track: (_track = {
	      position: 'absolute'
	    }, (0, _defineProperty3.default)(_track, crossAxisOffsetProperty[axis], (handleSizeActive - trackSize) / 2), (0, _defineProperty3.default)(_track, mainAxisOffsetProperty[axis], 0), (0, _defineProperty3.default)(_track, mainAxisProperty[axis], '100%'), (0, _defineProperty3.default)(_track, crossAxisProperty[axis], trackSize), _track),
	    filledAndRemaining: (_filledAndRemaining = {
	      position: 'absolute'
	    }, (0, _defineProperty3.default)(_filledAndRemaining, crossAxisOffsetProperty, 0), (0, _defineProperty3.default)(_filledAndRemaining, crossAxisProperty[axis], '100%'), (0, _defineProperty3.default)(_filledAndRemaining, 'transition', _transitions2.default.easeOut(null, 'margin')), _filledAndRemaining),
	    handle: (_handle = {
	      boxSizing: 'border-box',
	      position: 'absolute',
	      cursor: 'pointer',
	      pointerEvents: 'inherit'
	    }, (0, _defineProperty3.default)(_handle, crossAxisOffsetProperty[axis], 0), (0, _defineProperty3.default)(_handle, mainAxisOffsetProperty[axis], percent === 0 ? '0%' : percent * 100 + '%'), (0, _defineProperty3.default)(_handle, 'zIndex', 1), (0, _defineProperty3.default)(_handle, 'margin', {
	      x: trackSize / 2 + 'px 0 0 0',
	      'x-reverse': trackSize / 2 + 'px 0 0 0',
	      y: '0 0 0 ' + trackSize / 2 + 'px',
	      'y-reverse': '0 0 0 ' + trackSize / 2 + 'px'
	    }[axis]), (0, _defineProperty3.default)(_handle, 'width', handleSize), (0, _defineProperty3.default)(_handle, 'height', handleSize), (0, _defineProperty3.default)(_handle, 'backgroundColor', selectionColor), (0, _defineProperty3.default)(_handle, 'backgroundClip', 'padding-box'), (0, _defineProperty3.default)(_handle, 'border', '0px solid transparent'), (0, _defineProperty3.default)(_handle, 'borderRadius', '50%'), (0, _defineProperty3.default)(_handle, 'transform', {
	      x: 'translate(-50%, -50%)',
	      'x-reverse': 'translate(50%, -50%)',
	      y: 'translate(-50%, 50%)',
	      'y-reverse': 'translate(-50%, -50%)'
	    }[axis]), (0, _defineProperty3.default)(_handle, 'transition', _transitions2.default.easeOut('450ms', 'background') + ', ' + _transitions2.default.easeOut('450ms', 'border-color') + ', ' + _transitions2.default.easeOut('450ms', 'width') + ', ' + _transitions2.default.easeOut('450ms', 'height')), (0, _defineProperty3.default)(_handle, 'overflow', 'visible'), (0, _defineProperty3.default)(_handle, 'outline', 'none'), _handle),
	    handleWhenDisabled: {
	      boxSizing: 'content-box',
	      cursor: 'not-allowed',
	      backgroundColor: trackColor,
	      width: handleSizeDisabled,
	      height: handleSizeDisabled,
	      border: 'none'
	    },
	    handleWhenPercentZero: {
	      border: trackSize + 'px solid ' + handleColorZero,
	      backgroundColor: handleFillColor,
	      boxShadow: 'none'
	    },
	    handleWhenPercentZeroAndDisabled: {
	      cursor: 'not-allowed',
	      width: handleSizeDisabled,
	      height: handleSizeDisabled
	    },
	    handleWhenPercentZeroAndFocused: {
	      border: trackSize + 'px solid ' + trackColorSelected
	    },
	    handleWhenActive: {
	      width: handleSizeActive,
	      height: handleSizeActive
	    },
	    ripple: {
	      height: handleSize,
	      width: handleSize,
	      overflow: 'visible'
	    },
	    rippleWhenPercentZero: {
	      top: -trackSize,
	      left: -trackSize
	    },
	    rippleInner: {
	      height: '300%',
	      width: '300%',
	      top: -handleSize,
	      left: -handleSize
	    },
	    rippleColor: {
	      fill: percent === 0 ? handleColorZero : rippleColor
	    }
	  };
	  styles.filled = (0, _simpleAssign2.default)({}, styles.filledAndRemaining, (_objectAssign2 = {}, (0, _defineProperty3.default)(_objectAssign2, mainAxisOffsetProperty[axis], 0), (0, _defineProperty3.default)(_objectAssign2, 'backgroundColor', disabled ? trackColor : selectionColor), (0, _defineProperty3.default)(_objectAssign2, mainAxisMarginFromEnd[axis], fillGutter), (0, _defineProperty3.default)(_objectAssign2, mainAxisProperty[axis], 'calc(' + percent * 100 + '%' + calcDisabledSpacing + ')'), _objectAssign2));
	  styles.remaining = (0, _simpleAssign2.default)({}, styles.filledAndRemaining, (_objectAssign3 = {}, (0, _defineProperty3.default)(_objectAssign3, reverseMainAxisOffsetProperty[axis], 0), (0, _defineProperty3.default)(_objectAssign3, 'backgroundColor', (state.hovered || state.focused) && !disabled ? trackColorSelected : trackColor), (0, _defineProperty3.default)(_objectAssign3, mainAxisMarginFromStart[axis], fillGutter), (0, _defineProperty3.default)(_objectAssign3, mainAxisProperty[axis], 'calc(' + (1 - percent) * 100 + '%' + calcDisabledSpacing + ')'), _objectAssign3));
	
	  return styles;
	};
	
	var Slider = function (_Component) {
	  (0, _inherits3.default)(Slider, _Component);
	
	  function Slider() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, Slider);
	
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = Slider.__proto__ || (0, _getPrototypeOf2.default)(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      active: false,
	      dragging: false,
	      focused: false,
	      hovered: false,
	      value: 0
	    }, _this.track = null, _this.handle = null, _this.handleKeyDown = function (event) {
	      var _this$props = _this.props,
	          axis = _this$props.axis,
	          min = _this$props.min,
	          max = _this$props.max,
	          step = _this$props.step;
	
	
	      var action = void 0;
	
	      switch ((0, _keycode2.default)(event)) {
	        case 'page down':
	        case 'down':
	          if (axis === 'y-reverse') {
	            action = 'increase';
	          } else {
	            action = 'decrease';
	          }
	          break;
	        case 'left':
	          if (axis === 'x-reverse') {
	            action = 'increase';
	          } else {
	            action = 'decrease';
	          }
	          break;
	        case 'page up':
	        case 'up':
	          if (axis === 'y-reverse') {
	            action = 'decrease';
	          } else {
	            action = 'increase';
	          }
	          break;
	        case 'right':
	          if (axis === 'x-reverse') {
	            action = 'decrease';
	          } else {
	            action = 'increase';
	          }
	          break;
	        case 'home':
	          action = 'min';
	          break;
	        case 'end':
	          action = 'max';
	          break;
	      }
	
	      if (action) {
	        var newValue = void 0;
	
	        // Cancel scroll
	        event.preventDefault();
	
	        switch (action) {
	          case 'decrease':
	            newValue = _this.state.value - step;
	            break;
	          case 'increase':
	            newValue = _this.state.value + step;
	            break;
	          case 'min':
	            newValue = min;
	            break;
	          case 'max':
	            newValue = max;
	            break;
	        }
	
	        // We need to use toFixed() because of float point errors.
	        // For example, 0.01 + 0.06 = 0.06999999999999999
	        newValue = parseFloat(newValue.toFixed(5));
	
	        if (newValue > max) {
	          newValue = max;
	        } else if (newValue < min) {
	          newValue = min;
	        }
	
	        if (_this.state.value !== newValue) {
	          _this.setState({
	            value: newValue
	          });
	
	          if (_this.props.onChange) {
	            _this.props.onChange(event, newValue);
	          }
	        }
	      }
	    }, _this.handleDragMouseMove = function (event) {
	      _this.onDragUpdate(event, 'mouse');
	    }, _this.handleTouchMove = function (event) {
	      _this.onDragUpdate(event, 'touch');
	    }, _this.handleMouseEnd = function (event) {
	      document.removeEventListener('mousemove', _this.handleDragMouseMove);
	      document.removeEventListener('mouseup', _this.handleMouseEnd);
	
	      _this.onDragStop(event);
	    }, _this.handleTouchEnd = function (event) {
	      document.removeEventListener('touchmove', _this.handleTouchMove);
	      document.removeEventListener('touchup', _this.handleTouchEnd);
	      document.removeEventListener('touchend', _this.handleTouchEnd);
	      document.removeEventListener('touchcancel', _this.handleTouchEnd);
	
	      _this.onDragStop(event);
	    }, _this.handleTouchStart = function (event) {
	      if (_this.props.disabled) {
	        return;
	      }
	
	      var position = void 0;
	      if (isMouseControlInverted(_this.props.axis)) {
	        position = _this.getTrackOffset() - event.touches[0][mainAxisClientOffsetProperty[_this.props.axis]];
	      } else {
	        position = event.touches[0][mainAxisClientOffsetProperty[_this.props.axis]] - _this.getTrackOffset();
	      }
	      _this.setValueFromPosition(event, position);
	
	      document.addEventListener('touchmove', _this.handleTouchMove);
	      document.addEventListener('touchup', _this.handleTouchEnd);
	      document.addEventListener('touchend', _this.handleTouchEnd);
	      document.addEventListener('touchcancel', _this.handleTouchEnd);
	
	      _this.onDragStart(event);
	
	      // Cancel scroll and context menu
	      event.preventDefault();
	    }, _this.handleFocus = function (event) {
	      _this.setState({
	        focused: true
	      });
	
	      if (_this.props.onFocus) {
	        _this.props.onFocus(event);
	      }
	    }, _this.handleBlur = function (event) {
	      _this.setState({
	        focused: false,
	        active: false
	      });
	
	      if (_this.props.onBlur) {
	        _this.props.onBlur(event);
	      }
	    }, _this.handleMouseDown = function (event) {
	      if (_this.props.disabled) {
	        return;
	      }
	
	      var position = void 0;
	      if (isMouseControlInverted(_this.props.axis)) {
	        position = _this.getTrackOffset() - event[mainAxisClientOffsetProperty[_this.props.axis]];
	      } else {
	        position = event[mainAxisClientOffsetProperty[_this.props.axis]] - _this.getTrackOffset();
	      }
	      _this.setValueFromPosition(event, position);
	
	      document.addEventListener('mousemove', _this.handleDragMouseMove);
	      document.addEventListener('mouseup', _this.handleMouseEnd);
	
	      // Cancel text selection
	      event.preventDefault();
	
	      // Set focus manually since we called preventDefault()
	      _this.handle.focus();
	
	      _this.onDragStart(event);
	    }, _this.handleMouseUp = function () {
	      if (!_this.props.disabled) {
	        _this.setState({
	          active: false
	        });
	      }
	    }, _this.handleMouseEnter = function () {
	      _this.setState({
	        hovered: true
	      });
	    }, _this.handleMouseLeave = function () {
	      _this.setState({
	        hovered: false
	      });
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(Slider, [{
	    key: 'componentWillMount',
	    value: function componentWillMount() {
	      var _props = this.props,
	          valueProp = _props.value,
	          defaultValue = _props.defaultValue,
	          min = _props.min,
	          max = _props.max;
	
	
	      var value = valueProp;
	      if (value === undefined) {
	        value = defaultValue !== undefined ? defaultValue : min;
	      }
	
	      if (value > max) {
	        value = max;
	      } else if (value < min) {
	        value = min;
	      }
	
	      this.setState({
	        value: value
	      });
	    }
	  }, {
	    key: 'componentWillReceiveProps',
	    value: function componentWillReceiveProps(nextProps) {
	      if (nextProps.value !== undefined && !this.state.dragging) {
	        this.setState({
	          value: nextProps.value
	        });
	      }
	    }
	  }, {
	    key: 'getValue',
	    value: function getValue() {
	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI Slider: getValue() method is deprecated.\n      Use the onChange callbacks instead.\n      It will be removed with v0.17.0.') : void 0;
	
	      return this.state.value;
	    }
	  }, {
	    key: 'clearValue',
	    value: function clearValue() {
	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI Slider: clearValue() method is deprecated.\n      Use the value property to control the component instead.\n      It will be removed with v0.17.0.') : void 0;
	
	      this.setState({
	        value: this.props.min
	      });
	    }
	  }, {
	    key: 'getTrackOffset',
	    value: function getTrackOffset() {
	      return this.track.getBoundingClientRect()[mainAxisOffsetProperty[this.props.axis]];
	    }
	  }, {
	    key: 'onDragStart',
	    value: function onDragStart(event) {
	      this.setState({
	        dragging: true,
	        active: true
	      });
	
	      if (this.props.onDragStart) {
	        this.props.onDragStart(event);
	      }
	    }
	  }, {
	    key: 'onDragUpdate',
	    value: function onDragUpdate(event, type) {
	      var _this2 = this;
	
	      if (this.dragRunning) {
	        return;
	      }
	      this.dragRunning = true;
	
	      requestAnimationFrame(function () {
	        _this2.dragRunning = false;
	
	        var source = type === 'touch' ? event.touches[0] : event;
	
	        var position = void 0;
	        if (isMouseControlInverted(_this2.props.axis)) {
	          position = _this2.getTrackOffset() - source[mainAxisClientOffsetProperty[_this2.props.axis]];
	        } else {
	          position = source[mainAxisClientOffsetProperty[_this2.props.axis]] - _this2.getTrackOffset();
	        }
	
	        if (!_this2.props.disabled) {
	          _this2.setValueFromPosition(event, position);
	        }
	      });
	    }
	  }, {
	    key: 'onDragStop',
	    value: function onDragStop(event) {
	      this.setState({
	        dragging: false,
	        active: false
	      });
	
	      if (this.props.onDragStop) {
	        this.props.onDragStop(event);
	      }
	    }
	  }, {
	    key: 'setValueFromPosition',
	    value: function setValueFromPosition(event, position) {
	      var positionMax = this.track[mainAxisClientProperty[this.props.axis]];
	      if (position < 0) {
	        position = 0;
	      } else if (position > positionMax) {
	        position = positionMax;
	      }
	
	      var _props2 = this.props,
	          step = _props2.step,
	          min = _props2.min,
	          max = _props2.max;
	
	
	      var value = void 0;
	      value = position / positionMax * (max - min);
	      value = Math.round(value / step) * step + min;
	      value = parseFloat(value.toFixed(5));
	
	      if (value > max) {
	        value = max;
	      } else if (value < min) {
	        value = min;
	      }
	
	      if (this.state.value !== value) {
	        this.setState({
	          value: value
	        });
	
	        if (this.props.onChange) {
	          this.props.onChange(event, value);
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this3 = this;
	
	      var _props3 = this.props,
	          axis = _props3.axis,
	          description = _props3.description,
	          disabled = _props3.disabled,
	          disableFocusRipple = _props3.disableFocusRipple,
	          error = _props3.error,
	          max = _props3.max,
	          min = _props3.min,
	          name = _props3.name,
	          onBlur = _props3.onBlur,
	          onChange = _props3.onChange,
	          onDragStart = _props3.onDragStart,
	          onDragStop = _props3.onDragStop,
	          onFocus = _props3.onFocus,
	          required = _props3.required,
	          sliderStyle = _props3.sliderStyle,
	          step = _props3.step,
	          style = _props3.style,
	          other = (0, _objectWithoutProperties3.default)(_props3, ['axis', 'description', 'disabled', 'disableFocusRipple', 'error', 'max', 'min', 'name', 'onBlur', 'onChange', 'onDragStart', 'onDragStop', 'onFocus', 'required', 'sliderStyle', 'step', 'style']);
	      var _state = this.state,
	          active = _state.active,
	          focused = _state.focused,
	          hovered = _state.hovered,
	          value = _state.value;
	      var prepareStyles = this.context.muiTheme.prepareStyles;
	
	      var styles = getStyles(this.props, this.context, this.state);
	      var percent = getPercent(value, min, max);
	
	      var handleStyles = {};
	      if (percent === 0) {
	        handleStyles = (0, _simpleAssign2.default)({}, styles.handle, styles.handleWhenPercentZero, active && styles.handleWhenActive, (hovered || focused) && !disabled && styles.handleWhenPercentZeroAndFocused, disabled && styles.handleWhenPercentZeroAndDisabled);
	      } else {
	        handleStyles = (0, _simpleAssign2.default)({}, styles.handle, active && styles.handleWhenActive, disabled && styles.handleWhenDisabled);
	      }
	
	      var rippleStyle = (0, _simpleAssign2.default)({}, styles.ripple, percent === 0 && styles.rippleWhenPercentZero);
	
	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles((0, _simpleAssign2.default)({}, style)) }),
	        _react2.default.createElement(
	          'span',
	          null,
	          description
	        ),
	        _react2.default.createElement(
	          'span',
	          null,
	          error
	        ),
	        _react2.default.createElement(
	          'div',
	          {
	            style: prepareStyles((0, _simpleAssign2.default)({}, styles.slider, sliderStyle)),
	            onFocus: this.handleFocus,
	            onBlur: this.handleBlur,
	            onMouseDown: this.handleMouseDown,
	            onMouseEnter: this.handleMouseEnter,
	            onMouseLeave: this.handleMouseLeave,
	            onMouseUp: this.handleMouseUp,
	            onTouchStart: this.handleTouchStart,
	            onKeyDown: !disabled && this.handleKeyDown
	          },
	          _react2.default.createElement(
	            'div',
	            { ref: function ref(node) {
	                return _this3.track = node;
	              }, style: prepareStyles(styles.track) },
	            _react2.default.createElement('div', { style: prepareStyles(styles.filled) }),
	            _react2.default.createElement('div', { style: prepareStyles(styles.remaining) }),
	            _react2.default.createElement(
	              'div',
	              {
	                ref: function ref(node) {
	                  return _this3.handle = node;
	                },
	                style: prepareStyles(handleStyles),
	                tabIndex: 0
	              },
	              !disabled && !disableFocusRipple && _react2.default.createElement(_FocusRipple2.default, {
	                style: rippleStyle,
	                innerStyle: styles.rippleInner,
	                show: (hovered || focused) && !active,
	                color: styles.rippleColor.fill
	              })
	            )
	          )
	        ),
	        _react2.default.createElement('input', {
	          type: 'hidden',
	          name: name,
	          value: value,
	          required: required,
	          min: min,
	          max: max,
	          step: step
	        })
	      );
	    }
	  }]);
	  return Slider;
	}(_react.Component);
	
	Slider.defaultProps = {
	  axis: 'x',
	  disabled: false,
	  disableFocusRipple: false,
	  max: 1,
	  min: 0,
	  required: true,
	  step: 0.01,
	  style: {}
	};
	Slider.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? Slider.propTypes = {
	  /**
	   * The axis on which the slider will slide.
	   */
	  axis: _react.PropTypes.oneOf(['x', 'x-reverse', 'y', 'y-reverse']),
	  /**
	   * The default value of the slider.
	   */
	  defaultValue: valueInRangePropType,
	  /**
	   * Describe the slider.
	   */
	  description: (0, _deprecatedPropType2.default)(_react.PropTypes.node, 'Use a sibling node element instead. It will be removed with v0.17.0.'),
	  /**
	   * Disables focus ripple if set to true.
	   */
	  disableFocusRipple: _react.PropTypes.bool,
	  /**
	   * If true, the slider will not be interactable.
	   */
	  disabled: _react.PropTypes.bool,
	  /**
	   * An error message for the slider.
	   */
	  error: (0, _deprecatedPropType2.default)(_react.PropTypes.node, 'Use a sibling node element instead. It will be removed with v0.17.0.'),
	  /**
	   * The maximum value the slider can slide to on
	   * a scale from 0 to 1 inclusive. Cannot be equal to min.
	   */
	  max: minMaxPropType,
	  /**
	   * The minimum value the slider can slide to on a scale
	   * from 0 to 1 inclusive. Cannot be equal to max.
	   */
	  min: minMaxPropType,
	  /**
	   * The name of the slider. Behaves like the name attribute
	   * of an input element.
	   */
	  name: _react.PropTypes.string,
	  /** @ignore */
	  onBlur: _react.PropTypes.func,
	  /**
	   * Callback function that is fired when the slider's value changed.
	   *
	   * @param {object} event KeyDown event targeting the slider.
	   * @param {number} newValue The new value of the slider.
	   */
	  onChange: _react.PropTypes.func,
	  /**
	   * Callback function that is fired when the slider has begun to move.
	   *
	   * @param {object} event MouseDown or TouchStart event targeting the slider.
	   */
	  onDragStart: _react.PropTypes.func,
	  /**
	   * Callback function that is fired when the slide has stopped moving.
	   *
	   * @param {object} event MouseEnd or TouchEnd event targeting the slider.
	   */
	  onDragStop: _react.PropTypes.func,
	  /** @ignore */
	  onFocus: _react.PropTypes.func,
	  /**
	   * Whether or not the slider is required in a form.
	   */
	  required: _react.PropTypes.bool,
	  /**
	   * Override the inline-styles of the inner slider element.
	   */
	  sliderStyle: _react.PropTypes.object,
	  /**
	   * The granularity the slider can step through values.
	   */
	  step: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object,
	  /**
	   * The value of the slider.
	   */
	  value: valueInRangePropType
	} : void 0;
	exports.default = Slider;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _assign = __webpack_require__(196);
	
	var _assign2 = _interopRequireDefault(_assign);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	
	  return target;
	};

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(197), __esModule: true };

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(198);
	module.exports = __webpack_require__(201).Object.assign;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(199);
	
	$export($export.S + $export.F, 'Object', { assign: __webpack_require__(215) });


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(200);
	var core = __webpack_require__(201);
	var ctx = __webpack_require__(202);
	var hide = __webpack_require__(204);
	var has = __webpack_require__(214);
	var PROTOTYPE = 'prototype';
	
	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	module.exports = $export;


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef


/***/ }),
/* 201 */
/***/ (function(module, exports) {

	var core = module.exports = { version: '2.6.2' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(203);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};


/***/ }),
/* 203 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(205);
	var createDesc = __webpack_require__(213);
	module.exports = __webpack_require__(209) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var anObject = __webpack_require__(206);
	var IE8_DOM_DEFINE = __webpack_require__(208);
	var toPrimitive = __webpack_require__(212);
	var dP = Object.defineProperty;
	
	exports.f = __webpack_require__(209) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(207);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(209) && !__webpack_require__(210)(function () {
	  return Object.defineProperty(__webpack_require__(211)('div'), 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(210)(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});


/***/ }),
/* 210 */
/***/ (function(module, exports) {

	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(207);
	var document = __webpack_require__(200).document;
	// typeof document.createElement is 'object' in old IE
	var is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(207);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};


/***/ }),
/* 214 */
/***/ (function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// 19.1.2.1 Object.assign(target, source, ...)
	var getKeys = __webpack_require__(216);
	var gOPS = __webpack_require__(231);
	var pIE = __webpack_require__(232);
	var toObject = __webpack_require__(233);
	var IObject = __webpack_require__(219);
	var $assign = Object.assign;
	
	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = !$assign || __webpack_require__(210)(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = gOPS.f;
	  var isEnum = pIE.f;
	  while (aLen > index) {
	    var S = IObject(arguments[index++]);
	    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
	  } return T;
	} : $assign;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(217);
	var enumBugKeys = __webpack_require__(230);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var has = __webpack_require__(214);
	var toIObject = __webpack_require__(218);
	var arrayIndexOf = __webpack_require__(222)(false);
	var IE_PROTO = __webpack_require__(226)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(219);
	var defined = __webpack_require__(221);
	module.exports = function (it) {
	  return IObject(defined(it));
	};


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(220);
	// eslint-disable-next-line no-prototype-builtins
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};


/***/ }),
/* 221 */
/***/ (function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(218);
	var toLength = __webpack_require__(223);
	var toAbsoluteIndex = __webpack_require__(225);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(224);
	var min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(224);
	var max = Math.max;
	var min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(227)('keys');
	var uid = __webpack_require__(229);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(201);
	var global = __webpack_require__(200);
	var SHARED = '__core-js_shared__';
	var store = global[SHARED] || (global[SHARED] = {});
	
	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: core.version,
	  mode: __webpack_require__(228) ? 'pure' : 'global',
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});


/***/ }),
/* 228 */
/***/ (function(module, exports) {

	module.exports = true;


/***/ }),
/* 229 */
/***/ (function(module, exports) {

	var id = 0;
	var px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};


/***/ }),
/* 230 */
/***/ (function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');


/***/ }),
/* 231 */
/***/ (function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	exports.f = {}.propertyIsEnumerable;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(221);
	module.exports = function (it) {
	  return Object(defined(it));
	};


/***/ }),
/* 234 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (obj, keys) {
	  var target = {};
	
	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }
	
	  return target;
	};

/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(236), __esModule: true };

/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(237);
	module.exports = __webpack_require__(201).Object.getPrototypeOf;


/***/ }),
/* 237 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 Object.getPrototypeOf(O)
	var toObject = __webpack_require__(233);
	var $getPrototypeOf = __webpack_require__(238);
	
	__webpack_require__(239)('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return $getPrototypeOf(toObject(it));
	  };
	});


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(214);
	var toObject = __webpack_require__(233);
	var IE_PROTO = __webpack_require__(226)('IE_PROTO');
	var ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(199);
	var core = __webpack_require__(201);
	var fails = __webpack_require__(210);
	module.exports = function (KEY, exec) {
	  var fn = (core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
	};


/***/ }),
/* 240 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(242);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(243), __esModule: true };

/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(244);
	var $Object = __webpack_require__(201).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(199);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(209), 'Object', { defineProperty: __webpack_require__(205).f });


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(246);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(247);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(265);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(248), __esModule: true };

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(249);
	__webpack_require__(260);
	module.exports = __webpack_require__(264).f('iterator');


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $at = __webpack_require__(250)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(251)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(224);
	var defined = __webpack_require__(221);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that));
	    var i = toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY = __webpack_require__(228);
	var $export = __webpack_require__(199);
	var redefine = __webpack_require__(252);
	var hide = __webpack_require__(204);
	var Iterators = __webpack_require__(253);
	var $iterCreate = __webpack_require__(254);
	var setToStringTag = __webpack_require__(258);
	var getPrototypeOf = __webpack_require__(238);
	var ITERATOR = __webpack_require__(259)('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';
	
	var returnThis = function () { return this; };
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(204);


/***/ }),
/* 253 */
/***/ (function(module, exports) {

	module.exports = {};


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var create = __webpack_require__(255);
	var descriptor = __webpack_require__(213);
	var setToStringTag = __webpack_require__(258);
	var IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(204)(IteratorPrototype, __webpack_require__(259)('iterator'), function () { return this; });
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(206);
	var dPs = __webpack_require__(256);
	var enumBugKeys = __webpack_require__(230);
	var IE_PROTO = __webpack_require__(226)('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(211)('iframe');
	  var i = enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(257).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	var dP = __webpack_require__(205);
	var anObject = __webpack_require__(206);
	var getKeys = __webpack_require__(216);
	
	module.exports = __webpack_require__(209) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	var document = __webpack_require__(200).document;
	module.exports = document && document.documentElement;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var def = __webpack_require__(205).f;
	var has = __webpack_require__(214);
	var TAG = __webpack_require__(259)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var store = __webpack_require__(227)('wks');
	var uid = __webpack_require__(229);
	var Symbol = __webpack_require__(200).Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(261);
	var global = __webpack_require__(200);
	var hide = __webpack_require__(204);
	var Iterators = __webpack_require__(253);
	var TO_STRING_TAG = __webpack_require__(259)('toStringTag');
	
	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');
	
	for (var i = 0; i < DOMIterables.length; i++) {
	  var NAME = DOMIterables[i];
	  var Collection = global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(262);
	var step = __webpack_require__(263);
	var Iterators = __webpack_require__(253);
	var toIObject = __webpack_require__(218);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(251)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	module.exports = function () { /* empty */ };


/***/ }),
/* 263 */
/***/ (function(module, exports) {

	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(259);


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(266), __esModule: true };

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(267);
	__webpack_require__(275);
	__webpack_require__(276);
	__webpack_require__(277);
	module.exports = __webpack_require__(201).Symbol;


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global = __webpack_require__(200);
	var has = __webpack_require__(214);
	var DESCRIPTORS = __webpack_require__(209);
	var $export = __webpack_require__(199);
	var redefine = __webpack_require__(252);
	var META = __webpack_require__(268).KEY;
	var $fails = __webpack_require__(210);
	var shared = __webpack_require__(227);
	var setToStringTag = __webpack_require__(258);
	var uid = __webpack_require__(229);
	var wks = __webpack_require__(259);
	var wksExt = __webpack_require__(264);
	var wksDefine = __webpack_require__(269);
	var enumKeys = __webpack_require__(270);
	var isArray = __webpack_require__(271);
	var anObject = __webpack_require__(206);
	var isObject = __webpack_require__(207);
	var toIObject = __webpack_require__(218);
	var toPrimitive = __webpack_require__(212);
	var createDesc = __webpack_require__(213);
	var _create = __webpack_require__(255);
	var gOPNExt = __webpack_require__(272);
	var $GOPD = __webpack_require__(274);
	var $DP = __webpack_require__(205);
	var $keys = __webpack_require__(216);
	var gOPD = $GOPD.f;
	var dP = $DP.f;
	var gOPN = gOPNExt.f;
	var $Symbol = global.Symbol;
	var $JSON = global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE = 'prototype';
	var HIDDEN = wks('_hidden');
	var TO_PRIMITIVE = wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = shared('symbol-registry');
	var AllSymbols = shared('symbols');
	var OPSymbols = shared('op-symbols');
	var ObjectProto = Object[PROTOTYPE];
	var USE_NATIVE = typeof $Symbol == 'function';
	var QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function () { return dP(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto;
	  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(273).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(232).f = $propertyIsEnumerable;
	  __webpack_require__(231).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(228)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
	
	for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(204)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var META = __webpack_require__(229)('meta');
	var isObject = __webpack_require__(207);
	var has = __webpack_require__(214);
	var setDesc = __webpack_require__(205).f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(210)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	var global = __webpack_require__(200);
	var core = __webpack_require__(201);
	var LIBRARY = __webpack_require__(228);
	var wksExt = __webpack_require__(264);
	var defineProperty = __webpack_require__(205).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(216);
	var gOPS = __webpack_require__(231);
	var pIE = __webpack_require__(232);
	module.exports = function (it) {
	  var result = getKeys(it);
	  var getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = pIE.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(220);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(218);
	var gOPN = __webpack_require__(273).f;
	var toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(217);
	var hiddenKeys = __webpack_require__(230).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	var pIE = __webpack_require__(232);
	var createDesc = __webpack_require__(213);
	var toIObject = __webpack_require__(218);
	var toPrimitive = __webpack_require__(212);
	var has = __webpack_require__(214);
	var IE8_DOM_DEFINE = __webpack_require__(208);
	var gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(209) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};


/***/ }),
/* 275 */
/***/ (function(module, exports) {



/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(269)('asyncIterator');


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(269)('observable');


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(279);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(283);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(246);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(280), __esModule: true };

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(281);
	module.exports = __webpack_require__(201).Object.setPrototypeOf;


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(199);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(282).set });


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(207);
	var anObject = __webpack_require__(206);
	var check = function (O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = __webpack_require__(202)(Function.call, __webpack_require__(274).f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(284), __esModule: true };

/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(285);
	var $Object = __webpack_require__(201).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	var $export = __webpack_require__(199);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(255) });


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(242);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }
	
	  return obj;
	};

/***/ }),
/* 287 */
/***/ (function(module, exports) {

	module.exports = function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];
	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	  return target;
	};


/***/ }),
/* 288 */
/***/ (function(module, exports) {

	// Source: http://jsfiddle.net/vWx8V/
	// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes
	
	/**
	 * Conenience method returns corresponding value for given keyName or keyCode.
	 *
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Mixed}
	 * @api public
	 */
	
	function keyCode(searchInput) {
	  // Keyboard Events
	  if (searchInput && 'object' === typeof searchInput) {
	    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
	    if (hasKeyCode) searchInput = hasKeyCode
	  }
	
	  // Numbers
	  if ('number' === typeof searchInput) return names[searchInput]
	
	  // Everything else (cast to string)
	  var search = String(searchInput)
	
	  // check codes
	  var foundNamedKey = codes[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey
	
	  // check aliases
	  var foundNamedKey = aliases[search.toLowerCase()]
	  if (foundNamedKey) return foundNamedKey
	
	  // weird character?
	  if (search.length === 1) return search.charCodeAt(0)
	
	  return undefined
	}
	
	/**
	 * Compares a keyboard event with a given keyCode or keyName.
	 *
	 * @param {Event} event Keyboard event that should be tested
	 * @param {Mixed} keyCode {Number} or keyName {String}
	 * @return {Boolean}
	 * @api public
	 */
	keyCode.isEventKey = function isEventKey(event, nameOrCode) {
	  if (event && 'object' === typeof event) {
	    var keyCode = event.which || event.keyCode || event.charCode
	    if (keyCode === null || keyCode === undefined) { return false; }
	    if (typeof nameOrCode === 'string') {
	      // check codes
	      var foundNamedKey = codes[nameOrCode.toLowerCase()]
	      if (foundNamedKey) { return foundNamedKey === keyCode; }
	    
	      // check aliases
	      var foundNamedKey = aliases[nameOrCode.toLowerCase()]
	      if (foundNamedKey) { return foundNamedKey === keyCode; }
	    } else if (typeof nameOrCode === 'number') {
	      return nameOrCode === keyCode;
	    }
	    return false;
	  }
	}
	
	exports = module.exports = keyCode;
	
	/**
	 * Get by name
	 *
	 *   exports.code['enter'] // => 13
	 */
	
	var codes = exports.code = exports.codes = {
	  'backspace': 8,
	  'tab': 9,
	  'enter': 13,
	  'shift': 16,
	  'ctrl': 17,
	  'alt': 18,
	  'pause/break': 19,
	  'caps lock': 20,
	  'esc': 27,
	  'space': 32,
	  'page up': 33,
	  'page down': 34,
	  'end': 35,
	  'home': 36,
	  'left': 37,
	  'up': 38,
	  'right': 39,
	  'down': 40,
	  'insert': 45,
	  'delete': 46,
	  'command': 91,
	  'left command': 91,
	  'right command': 93,
	  'numpad *': 106,
	  'numpad +': 107,
	  'numpad -': 109,
	  'numpad .': 110,
	  'numpad /': 111,
	  'num lock': 144,
	  'scroll lock': 145,
	  'my computer': 182,
	  'my calculator': 183,
	  ';': 186,
	  '=': 187,
	  ',': 188,
	  '-': 189,
	  '.': 190,
	  '/': 191,
	  '`': 192,
	  '[': 219,
	  '\\': 220,
	  ']': 221,
	  "'": 222
	}
	
	// Helper aliases
	
	var aliases = exports.aliases = {
	  'windows': 91,
	  '⇧': 16,
	  '⌥': 18,
	  '⌃': 17,
	  '⌘': 91,
	  'ctl': 17,
	  'control': 17,
	  'option': 18,
	  'pause': 19,
	  'break': 19,
	  'caps': 20,
	  'return': 13,
	  'escape': 27,
	  'spc': 32,
	  'spacebar': 32,
	  'pgup': 33,
	  'pgdn': 34,
	  'ins': 45,
	  'del': 46,
	  'cmd': 91
	}
	
	/*!
	 * Programatically add the following
	 */
	
	// lower case chars
	for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32
	
	// numbers
	for (var i = 48; i < 58; i++) codes[i - 48] = i
	
	// function keys
	for (i = 1; i < 13; i++) codes['f'+i] = i + 111
	
	// numpad keys
	for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96
	
	/**
	 * Get by code
	 *
	 *   exports.name[13] // => 'Enter'
	 */
	
	var names = exports.names = exports.title = {} // title for backward compat
	
	// Create reverse mapping
	for (i in codes) names[codes[i]] = i
	
	// Add aliases
	for (var alias in aliases) {
	  codes[alias] = aliases[alias]
	}


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error(
	        '`warning(condition, format, ...args)` requires a warning ' +
	        'message argument'
	      );
	    }
	
	    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
	      throw new Error(
	        'The warning format should be able to uniquely identify this ' +
	        'warning. Please, use a more descriptive format than: ' + format
	      );
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' +
	        format.replace(/%s/g, function() {
	          return args[argIndex++];
	        });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch(x) {}
	    }
	  };
	}
	
	module.exports = warning;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 290 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	
	  easeOutFunction: 'cubic-bezier(0.23, 1, 0.32, 1)',
	  easeInOutFunction: 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',
	
	  easeOut: function easeOut(duration, property, delay, easeFunction) {
	    easeFunction = easeFunction || this.easeOutFunction;
	
	    if (property && Object.prototype.toString.call(property) === '[object Array]') {
	      var transitions = '';
	      for (var i = 0; i < property.length; i++) {
	        if (transitions) transitions += ',';
	        transitions += this.create(duration, property[i], delay, easeFunction);
	      }
	
	      return transitions;
	    } else {
	      return this.create(duration, property, delay, easeFunction);
	    }
	  },
	  create: function create(duration, property, delay, easeFunction) {
	    duration = duration || '450ms';
	    property = property || 'all';
	    delay = delay || '0ms';
	    easeFunction = easeFunction || 'linear';
	
	    return property + ' ' + duration + ' ' + easeFunction + ' ' + delay;
	  }
	};

/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(235);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(241);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(245);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(278);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _simpleAssign = __webpack_require__(287);
	
	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(37);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _shallowEqual = __webpack_require__(292);
	
	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
	
	var _autoPrefix = __webpack_require__(293);
	
	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);
	
	var _transitions = __webpack_require__(290);
	
	var _transitions2 = _interopRequireDefault(_transitions);
	
	var _ScaleIn = __webpack_require__(294);
	
	var _ScaleIn2 = _interopRequireDefault(_ScaleIn);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var pulsateDuration = 750;
	
	var FocusRipple = function (_Component) {
	  (0, _inherits3.default)(FocusRipple, _Component);
	
	  function FocusRipple() {
	    var _ref;
	
	    var _temp, _this, _ret;
	
	    (0, _classCallCheck3.default)(this, FocusRipple);
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	
	    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FocusRipple.__proto__ || (0, _getPrototypeOf2.default)(FocusRipple)).call.apply(_ref, [this].concat(args))), _this), _this.pulsate = function () {
	      var innerCircle = _reactDom2.default.findDOMNode(_this.refs.innerCircle);
	      if (!innerCircle) return;
	
	      var startScale = 'scale(1)';
	      var endScale = 'scale(0.85)';
	      var currentScale = innerCircle.style.transform || startScale;
	      var nextScale = currentScale === startScale ? endScale : startScale;
	
	      _autoPrefix2.default.set(innerCircle.style, 'transform', nextScale);
	      _this.timeout = setTimeout(_this.pulsate, pulsateDuration);
	    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
	  }
	
	  (0, _createClass3.default)(FocusRipple, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      }
	    }
	  }, {
	    key: 'shouldComponentUpdate',
	    value: function shouldComponentUpdate(nextProps, nextState) {
	      return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      if (this.props.show) {
	        this.setRippleSize();
	        this.pulsate();
	      } else {
	        if (this.timeout) clearTimeout(this.timeout);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.timeout);
	    }
	  }, {
	    key: 'getRippleElement',
	    value: function getRippleElement(props) {
	      var color = props.color,
	          innerStyle = props.innerStyle,
	          opacity = props.opacity;
	      var _context$muiTheme = this.context.muiTheme,
	          prepareStyles = _context$muiTheme.prepareStyles,
	          ripple = _context$muiTheme.ripple;
	
	
	      var innerStyles = (0, _simpleAssign2.default)({
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        borderRadius: '50%',
	        opacity: opacity ? opacity : 0.16,
	        backgroundColor: color || ripple.color,
	        transition: _transitions2.default.easeOut(pulsateDuration + 'ms', 'transform', null, _transitions2.default.easeInOutFunction)
	      }, innerStyle);
	
	      return _react2.default.createElement('div', { ref: 'innerCircle', style: prepareStyles((0, _simpleAssign2.default)({}, innerStyles)) });
	    }
	  }, {
	    key: 'setRippleSize',
	    value: function setRippleSize() {
	      var el = _reactDom2.default.findDOMNode(this.refs.innerCircle);
	      var height = el.offsetHeight;
	      var width = el.offsetWidth;
	      var size = Math.max(height, width);
	
	      var oldTop = 0;
	      // For browsers that don't support endsWith()
	      if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {
	        oldTop = parseInt(el.style.top);
	      }
	      el.style.height = size + 'px';
	      el.style.top = height / 2 - size / 2 + oldTop + 'px';
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          show = _props.show,
	          style = _props.style;
	
	
	      var mergedRootStyles = (0, _simpleAssign2.default)({
	        height: '100%',
	        width: '100%',
	        position: 'absolute',
	        top: 0,
	        left: 0
	      }, style);
	
	      var ripple = show ? this.getRippleElement(this.props) : null;
	
	      return _react2.default.createElement(
	        _ScaleIn2.default,
	        {
	          maxScale: 0.85,
	          style: mergedRootStyles
	        },
	        ripple
	      );
	    }
	  }]);
	  return FocusRipple;
	}(_react.Component);
	
	FocusRipple.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? FocusRipple.propTypes = {
	  color: _react.PropTypes.string,
	  innerStyle: _react.PropTypes.object,
	  opacity: _react.PropTypes.number,
	  show: _react.PropTypes.bool,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = FocusRipple;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _shallowEqual = __webpack_require__(129);
	
	var _shallowEqual2 = _interopRequireDefault(_shallowEqual);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _shallowEqual2.default;

/***/ }),
/* 293 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  set: function set(style, key, value) {
	    style[key] = value;
	  }
	};

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(195);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _objectWithoutProperties2 = __webpack_require__(234);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _getPrototypeOf = __webpack_require__(235);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(241);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(245);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(278);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _simpleAssign = __webpack_require__(287);
	
	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactAddonsTransitionGroup = __webpack_require__(295);
	
	var _reactAddonsTransitionGroup2 = _interopRequireDefault(_reactAddonsTransitionGroup);
	
	var _ScaleInChild = __webpack_require__(301);
	
	var _ScaleInChild2 = _interopRequireDefault(_ScaleInChild);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ScaleIn = function (_Component) {
	  (0, _inherits3.default)(ScaleIn, _Component);
	
	  function ScaleIn() {
	    (0, _classCallCheck3.default)(this, ScaleIn);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleIn.__proto__ || (0, _getPrototypeOf2.default)(ScaleIn)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(ScaleIn, [{
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          childStyle = _props.childStyle,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'childStyle', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;
	
	
	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'relative',
	        overflow: 'hidden',
	        height: '100%'
	      }, style);
	
	      var newChildren = _react2.default.Children.map(children, function (child) {
	        return _react2.default.createElement(
	          _ScaleInChild2.default,
	          {
	            key: child.key,
	            enterDelay: enterDelay,
	            maxScale: maxScale,
	            minScale: minScale,
	            style: childStyle
	          },
	          child
	        );
	      });
	
	      return _react2.default.createElement(
	        _reactAddonsTransitionGroup2.default,
	        (0, _extends3.default)({}, other, {
	          style: prepareStyles(mergedRootStyles),
	          component: 'div'
	        }),
	        newChildren
	      );
	    }
	  }]);
	  return ScaleIn;
	}(_react.Component);
	
	ScaleIn.defaultProps = {
	  enterDelay: 0
	};
	ScaleIn.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? ScaleIn.propTypes = {
	  childStyle: _react.PropTypes.object,
	  children: _react.PropTypes.node,
	  enterDelay: _react.PropTypes.number,
	  maxScale: _react.PropTypes.number,
	  minScale: _react.PropTypes.number,
	  /**
	   * Override the inline-styles of the root element.
	   */
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = ScaleIn;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	module.exports = __webpack_require__(296);


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _chainFunction = __webpack_require__(297);
	
	var _chainFunction2 = _interopRequireDefault(_chainFunction);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(298);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _warning = __webpack_require__(289);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _ChildMapping = __webpack_require__(300);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var propTypes = {
	  component: _propTypes2.default.any,
	  childFactory: _propTypes2.default.func,
	  children: _propTypes2.default.node
	};
	
	var defaultProps = {
	  component: 'span',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	
	var TransitionGroup = function (_React$Component) {
	  _inherits(TransitionGroup, _React$Component);
	
	  function TransitionGroup(props, context) {
	    _classCallCheck(this, TransitionGroup);
	
	    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));
	
	    _this.performAppear = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      if (component.componentWillAppear) {
	        component.componentWillAppear(_this._handleDoneAppearing.bind(_this, key, component));
	      } else {
	        _this._handleDoneAppearing(key, component);
	      }
	    };
	
	    _this._handleDoneAppearing = function (key, component) {
	      if (component.componentDidAppear) {
	        component.componentDidAppear();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully appeared. Remove it.
	        _this.performLeave(key, component);
	      }
	    };
	
	    _this.performEnter = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      if (component.componentWillEnter) {
	        component.componentWillEnter(_this._handleDoneEntering.bind(_this, key, component));
	      } else {
	        _this._handleDoneEntering(key, component);
	      }
	    };
	
	    _this._handleDoneEntering = function (key, component) {
	      if (component.componentDidEnter) {
	        component.componentDidEnter();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (!currentChildMapping || !currentChildMapping.hasOwnProperty(key)) {
	        // This was removed before it had fully entered. Remove it.
	        _this.performLeave(key, component);
	      }
	    };
	
	    _this.performLeave = function (key, component) {
	      _this.currentlyTransitioningKeys[key] = true;
	
	      if (component.componentWillLeave) {
	        component.componentWillLeave(_this._handleDoneLeaving.bind(_this, key, component));
	      } else {
	        // Note that this is somewhat dangerous b/c it calls setState()
	        // again, effectively mutating the component before all the work
	        // is done.
	        _this._handleDoneLeaving(key, component);
	      }
	    };
	
	    _this._handleDoneLeaving = function (key, component) {
	      if (component.componentDidLeave) {
	        component.componentDidLeave();
	      }
	
	      delete _this.currentlyTransitioningKeys[key];
	
	      var currentChildMapping = (0, _ChildMapping.getChildMapping)(_this.props.children);
	
	      if (currentChildMapping && currentChildMapping.hasOwnProperty(key)) {
	        // This entered again before it fully left. Add it again.
	        _this.keysToEnter.push(key);
	      } else {
	        _this.setState(function (state) {
	          var newChildren = _extends({}, state.children);
	          delete newChildren[key];
	          return { children: newChildren };
	        });
	      }
	    };
	
	    _this.childRefs = Object.create(null);
	
	    _this.state = {
	      children: (0, _ChildMapping.getChildMapping)(props.children)
	    };
	    return _this;
	  }
	
	  TransitionGroup.prototype.componentWillMount = function componentWillMount() {
	    this.currentlyTransitioningKeys = {};
	    this.keysToEnter = [];
	    this.keysToLeave = [];
	  };
	
	  TransitionGroup.prototype.componentDidMount = function componentDidMount() {
	    var initialChildMapping = this.state.children;
	    for (var key in initialChildMapping) {
	      if (initialChildMapping[key]) {
	        this.performAppear(key, this.childRefs[key]);
	      }
	    }
	  };
	
	  TransitionGroup.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
	    var nextChildMapping = (0, _ChildMapping.getChildMapping)(nextProps.children);
	    var prevChildMapping = this.state.children;
	
	    this.setState({
	      children: (0, _ChildMapping.mergeChildMappings)(prevChildMapping, nextChildMapping)
	    });
	
	    for (var key in nextChildMapping) {
	      var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
	      if (nextChildMapping[key] && !hasPrev && !this.currentlyTransitioningKeys[key]) {
	        this.keysToEnter.push(key);
	      }
	    }
	
	    for (var _key in prevChildMapping) {
	      var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(_key);
	      if (prevChildMapping[_key] && !hasNext && !this.currentlyTransitioningKeys[_key]) {
	        this.keysToLeave.push(_key);
	      }
	    }
	
	    // If we want to someday check for reordering, we could do it here.
	  };
	
	  TransitionGroup.prototype.componentDidUpdate = function componentDidUpdate() {
	    var _this2 = this;
	
	    var keysToEnter = this.keysToEnter;
	    this.keysToEnter = [];
	    keysToEnter.forEach(function (key) {
	      return _this2.performEnter(key, _this2.childRefs[key]);
	    });
	
	    var keysToLeave = this.keysToLeave;
	    this.keysToLeave = [];
	    keysToLeave.forEach(function (key) {
	      return _this2.performLeave(key, _this2.childRefs[key]);
	    });
	  };
	
	  TransitionGroup.prototype.render = function render() {
	    var _this3 = this;
	
	    // TODO: we could get rid of the need for the wrapper node
	    // by cloning a single child
	    var childrenToRender = [];
	
	    var _loop = function _loop(key) {
	      var child = _this3.state.children[key];
	      if (child) {
	        var isCallbackRef = typeof child.ref !== 'string';
	        var factoryChild = _this3.props.childFactory(child);
	        var ref = function ref(r) {
	          _this3.childRefs[key] = r;
	        };
	
	        process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(isCallbackRef, 'string refs are not supported on children of TransitionGroup and will be ignored. ' + 'Please use a callback ref instead: https://facebook.github.io/react/docs/refs-and-the-dom.html#the-ref-callback-attribute') : void 0;
	
	        // Always chaining the refs leads to problems when the childFactory
	        // wraps the child. The child ref callback gets called twice with the
	        // wrapper and the child. So we only need to chain the ref if the
	        // factoryChild is not different from child.
	        if (factoryChild === child && isCallbackRef) {
	          ref = (0, _chainFunction2.default)(child.ref, ref);
	        }
	
	        // You may need to apply reactive updates to a child as it is leaving.
	        // The normal React way to do it won't work since the child will have
	        // already been removed. In case you need this behavior you can provide
	        // a childFactory function to wrap every child, even the ones that are
	        // leaving.
	        childrenToRender.push(_react2.default.cloneElement(factoryChild, {
	          key: key,
	          ref: ref
	        }));
	      }
	    };
	
	    for (var key in this.state.children) {
	      _loop(key);
	    }
	
	    // Do not forward TransitionGroup props to primitive DOM nodes
	    var props = _extends({}, this.props);
	    delete props.transitionLeave;
	    delete props.transitionName;
	    delete props.transitionAppear;
	    delete props.transitionEnter;
	    delete props.childFactory;
	    delete props.transitionLeaveTimeout;
	    delete props.transitionEnterTimeout;
	    delete props.transitionAppearTimeout;
	    delete props.component;
	
	    return _react2.default.createElement(this.props.component, props, childrenToRender);
	  };
	
	  return TransitionGroup;
	}(_react2.default.Component);
	
	TransitionGroup.displayName = 'TransitionGroup';
	
	
	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? propTypes : {};
	TransitionGroup.defaultProps = defaultProps;
	
	exports.default = TransitionGroup;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 297 */
/***/ (function(module, exports) {

	
	module.exports = function chain(){
	  var len = arguments.length
	  var args = [];
	
	  for (var i = 0; i < len; i++)
	    args[i] = arguments[i]
	
	  args = args.filter(function(fn){ return fn != null })
	
	  if (args.length === 0) return undefined
	  if (args.length === 1) return args[0]
	
	  return args.reduce(function(current, next){
	    return function chainedFunction() {
	      current.apply(this, arguments);
	      next.apply(this, arguments);
	    };
	  })
	}


/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	if (process.env.NODE_ENV !== 'production') {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;
	
	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(30)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = __webpack_require__(299)();
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = __webpack_require__(31);
	
	function emptyFunction() {}
	
	module.exports = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  };
	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  };
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,
	
	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim
	  };
	
	  ReactPropTypes.checkPropTypes = emptyFunction;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.getChildMapping = getChildMapping;
	exports.mergeChildMappings = mergeChildMappings;
	
	var _react = __webpack_require__(1);
	
	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */
	function getChildMapping(children) {
	  if (!children) {
	    return children;
	  }
	  var result = {};
	  _react.Children.map(children, function (child) {
	    return child;
	  }).forEach(function (child) {
	    result[child.key] = child;
	  });
	  return result;
	}
	
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */
	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};
	
	  function getValueForKey(key) {
	    if (next.hasOwnProperty(key)) {
	      return next[key];
	    }
	
	    return prev[key];
	  }
	
	  // For each key of `next`, the list of keys to insert before that key in
	  // the combined list
	  var nextKeysPending = {};
	
	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (next.hasOwnProperty(prevKey)) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }
	
	  var i = void 0;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending.hasOwnProperty(nextKey)) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  }
	
	  // Finally, add the keys which didn't appear before any key in `next`
	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }
	
	  return childMapping;
	}

/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends2 = __webpack_require__(195);
	
	var _extends3 = _interopRequireDefault(_extends2);
	
	var _objectWithoutProperties2 = __webpack_require__(234);
	
	var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);
	
	var _getPrototypeOf = __webpack_require__(235);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(241);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(245);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(278);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _simpleAssign = __webpack_require__(287);
	
	var _simpleAssign2 = _interopRequireDefault(_simpleAssign);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(37);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _autoPrefix = __webpack_require__(293);
	
	var _autoPrefix2 = _interopRequireDefault(_autoPrefix);
	
	var _transitions = __webpack_require__(290);
	
	var _transitions2 = _interopRequireDefault(_transitions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ScaleInChild = function (_Component) {
	  (0, _inherits3.default)(ScaleInChild, _Component);
	
	  function ScaleInChild() {
	    (0, _classCallCheck3.default)(this, ScaleInChild);
	    return (0, _possibleConstructorReturn3.default)(this, (ScaleInChild.__proto__ || (0, _getPrototypeOf2.default)(ScaleInChild)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(ScaleInChild, [{
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      clearTimeout(this.enterTimer);
	      clearTimeout(this.leaveTimer);
	    }
	  }, {
	    key: 'componentWillAppear',
	    value: function componentWillAppear(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentWillEnter',
	    value: function componentWillEnter(callback) {
	      this.initializeAnimation(callback);
	    }
	  }, {
	    key: 'componentDidAppear',
	    value: function componentDidAppear() {
	      this.animate();
	    }
	  }, {
	    key: 'componentDidEnter',
	    value: function componentDidEnter() {
	      this.animate();
	    }
	  }, {
	    key: 'componentWillLeave',
	    value: function componentWillLeave(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	
	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.minScale + ')');
	
	      this.leaveTimer = setTimeout(callback, 450);
	    }
	  }, {
	    key: 'animate',
	    value: function animate() {
	      var style = _reactDom2.default.findDOMNode(this).style;
	
	      style.opacity = '1';
	      _autoPrefix2.default.set(style, 'transform', 'scale(' + this.props.maxScale + ')');
	    }
	  }, {
	    key: 'initializeAnimation',
	    value: function initializeAnimation(callback) {
	      var style = _reactDom2.default.findDOMNode(this).style;
	
	      style.opacity = '0';
	      _autoPrefix2.default.set(style, 'transform', 'scale(0)');
	
	      this.enterTimer = setTimeout(callback, this.props.enterDelay);
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          enterDelay = _props.enterDelay,
	          maxScale = _props.maxScale,
	          minScale = _props.minScale,
	          style = _props.style,
	          other = (0, _objectWithoutProperties3.default)(_props, ['children', 'enterDelay', 'maxScale', 'minScale', 'style']);
	      var prepareStyles = this.context.muiTheme.prepareStyles;
	
	
	      var mergedRootStyles = (0, _simpleAssign2.default)({}, {
	        position: 'absolute',
	        height: '100%',
	        width: '100%',
	        top: 0,
	        left: 0,
	        transition: _transitions2.default.easeOut(null, ['transform', 'opacity'])
	      }, style);
	
	      return _react2.default.createElement(
	        'div',
	        (0, _extends3.default)({}, other, { style: prepareStyles(mergedRootStyles) }),
	        children
	      );
	    }
	  }]);
	  return ScaleInChild;
	}(_react.Component);
	
	ScaleInChild.defaultProps = {
	  enterDelay: 0,
	  maxScale: 1,
	  minScale: 0
	};
	ScaleInChild.contextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? ScaleInChild.propTypes = {
	  children: _react.PropTypes.node,
	  enterDelay: _react.PropTypes.number,
	  maxScale: _react.PropTypes.number,
	  minScale: _react.PropTypes.number,
	  style: _react.PropTypes.object
	} : void 0;
	exports.default = ScaleInChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = deprecated;
	
	var _warning = __webpack_require__(289);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var warned = {}; /**
	                  * This module is taken from https://github.com/react-bootstrap/react-prop-types.
	                  * It's not a dependency to reduce build size / install time.
	                  * It should be pretty stable.
	                  */
	function deprecated(validator, reason) {
	  return function validate(props, propName, componentName, location, propFullName) {
	    var componentNameSafe = componentName || '<<anonymous>>';
	    var propFullNameSafe = propFullName || propName;
	
	    if (props[propName] != null) {
	      var messageKey = componentName + '.' + propName;
	
	      process.env.NODE_ENV !== "production" ? (0, _warning2.default)(warned[messageKey], 'The ' + location + ' `' + propFullNameSafe + '` of ' + ('`' + componentNameSafe + '` is deprecated. ' + reason)) : void 0;
	
	      warned[messageKey] = true;
	    }
	
	    for (var _len = arguments.length, args = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
	      args[_key - 5] = arguments[_key];
	    }
	
	    return validator.apply(undefined, [props, propName, componentName, location, propFullName].concat(args));
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var invariant = __webpack_require__(12);
	var defaultClickRejectionStrategy = __webpack_require__(304);
	
	var alreadyInjected = false;
	
	module.exports = function injectTapEventPlugin (strategyOverrides) {
	  strategyOverrides = strategyOverrides || {}
	  var shouldRejectClick = strategyOverrides.shouldRejectClick || defaultClickRejectionStrategy;
	
	  if (process.env.NODE_ENV !== 'production') {
	    invariant(
	      !alreadyInjected,
	      'injectTapEventPlugin(): Can only be called once per application lifecycle.\n\n\
	It is recommended to call injectTapEventPlugin() just before you call \
	ReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \
	itself, please contact the maintainer as it shouldn\'t be called in library code and \
	should be injected by the application.'
	    )
	  }
	
	  alreadyInjected = true;
	
	  __webpack_require__(47).injection.injectEventPluginsByName({
	    'TapEventPlugin':       __webpack_require__(305)(shouldRejectClick)
	  });
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 304 */
/***/ (function(module, exports) {

	module.exports = function(lastTouchEvent, clickTimestamp) {
	  if (lastTouchEvent && (clickTimestamp - lastTouchEvent) < 750) {
	    return true;
	  }
	};


/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TapEventPlugin
	 * @typechecks static-only
	 */
	
	"use strict";
	
	var EventConstants = __webpack_require__(306);
	var EventPluginUtils = __webpack_require__(49);
	var EventPropagators = __webpack_require__(46);
	var SyntheticUIEvent = __webpack_require__(81);
	var TouchEventUtils = __webpack_require__(307);
	var ViewportMetrics = __webpack_require__(82);
	
	var keyOf = __webpack_require__(308);
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var isStartish = EventPluginUtils.isStartish;
	var isEndish = EventPluginUtils.isEndish;
	
	var isTouch = function(topLevelType) {
	  var touchTypes = [
	    'topTouchCancel',
	    'topTouchEnd',
	    'topTouchStart',
	    'topTouchMove'
	  ];
	  return touchTypes.indexOf(topLevelType) >= 0;
	}
	
	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var ignoreMouseThreshold = 750;
	var startCoords = {x: null, y: null};
	var lastTouchEvent = null;
	
	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};
	
	function getAxisCoordOfEvent(axis, nativeEvent) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return axis.page in nativeEvent ?
	    nativeEvent[axis.page] :
	    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
	}
	
	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}
	
	var touchEvents = [
	  'topTouchStart',
	  'topTouchCancel',
	  'topTouchEnd',
	  'topTouchMove',
	];
	
	var dependencies = [
	  'topMouseDown',
	  'topMouseMove',
	  'topMouseUp',
	].concat(touchEvents);
	
	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({onTouchTap: null}),
	      captured: keyOf({onTouchTapCapture: null})
	    },
	    dependencies: dependencies
	  }
	};
	
	var now = (function() {
	  if (Date.now) {
	    return Date.now;
	  } else {
	    // IE8 support: http://stackoverflow.com/questions/9430357/please-explain-why-and-how-new-date-works-as-workaround-for-date-now-in
	    return function () {
	      return +new Date;
	    }
	  }
	})();
	
	function createTapEventPlugin(shouldRejectClick) {
	  return {
	
	    tapMoveThreshold: tapMoveThreshold,
	
	    ignoreMouseThreshold: ignoreMouseThreshold,
	
	    eventTypes: eventTypes,
	
	    /**
	     * @param {string} topLevelType Record from `EventConstants`.
	     * @param {DOMEventTarget} targetInst The listening component root node.
	     * @param {object} nativeEvent Native browser event.
	     * @return {*} An accumulation of synthetic events.
	     * @see {EventPluginHub.extractEvents}
	     */
	    extractEvents: function(
	      topLevelType,
	      targetInst,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	
	      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	        return null;
	      }
	
	      if (isTouch(topLevelType)) {
	        lastTouchEvent = now();
	      } else {
	        if (shouldRejectClick(lastTouchEvent, now())) {
	          return null;
	        }
	      }
	
	      var event = null;
	      var distance = getDistance(startCoords, nativeEvent);
	      if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	        event = SyntheticUIEvent.getPooled(
	          eventTypes.touchTap,
	          targetInst,
	          nativeEvent,
	          nativeEventTarget
	        );
	      }
	      if (isStartish(topLevelType)) {
	        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	      } else if (isEndish(topLevelType)) {
	        startCoords.x = 0;
	        startCoords.y = 0;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }
	
	  };
	}
	
	module.exports = createTapEventPlugin;


/***/ }),
/* 306 */
/***/ (function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = {
	  topAbort: null,
	  topAnimationEnd: null,
	  topAnimationIteration: null,
	  topAnimationStart: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topInvalid: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topTransitionEnd: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	};
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes
	};
	
	module.exports = EventConstants;

/***/ }),
/* 307 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule TouchEventUtils
	 */
	
	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;
	
	    return !hasTouches && hasChangedTouches ? changedTouches[0] :
	           hasTouches ? touches[0] :
	           nativeEvent;
	  }
	};
	
	module.exports = TouchEventUtils;


/***/ }),
/* 308 */
/***/ (function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Knob = function (_React$Component) {
	  _inherits(Knob, _React$Component);
	
	  function Knob(props) {
	    _classCallCheck(this, Knob);
	
	    var _this = _possibleConstructorReturn(this, (Knob.__proto__ || Object.getPrototypeOf(Knob)).call(this, props));
	
	    _this.getArcToValue = function (v) {
	      var startAngle = void 0;
	      var endAngle = void 0;
	      var angle = !_this.props.log ? (v - _this.props.min) * _this.angleArc / (_this.props.max - _this.props.min) : Math.log(Math.pow(v / _this.props.min, _this.angleArc)) / Math.log(_this.props.max / _this.props.min);
	      if (!_this.props.clockwise) {
	        startAngle = _this.endAngle + 0.00001;
	        endAngle = startAngle - angle - 0.00001;
	      } else {
	        startAngle = _this.startAngle - 0.00001;
	        endAngle = startAngle + angle + 0.00001;
	      }
	      if (_this.props.cursor) {
	        startAngle = endAngle - _this.cursorExt;
	        endAngle += _this.cursorExt;
	      }
	      return {
	        startAngle: startAngle,
	        endAngle: endAngle,
	        acw: !_this.props.clockwise && !_this.props.cursor
	      };
	    };
	
	    _this.coerceToStep = function (v) {
	      var val = !_this.props.log ? ~~((v < 0 ? -0.5 : 0.5) + v / _this.props.step) * _this.props.step : Math.pow(_this.props.step, ~~((Math.abs(v) < 1 ? -0.5 : 0.5) + Math.log(v) / Math.log(_this.props.step)));
	      val = Math.max(Math.min(val, _this.props.max), _this.props.min);
	      if (isNaN(val)) {
	        val = 0;
	      }
	      return Math.round(val * 1000) / 1000;
	    };
	
	    _this.eventToValue = function (e) {
	      var bounds = _this.canvasRef.getBoundingClientRect();
	      var x = e.clientX - bounds.left;
	      var y = e.clientY - bounds.top;
	      var a = Math.atan2(x - _this.w / 2, _this.w / 2 - y) - _this.angleOffset;
	      if (!_this.props.clockwise) {
	        a = _this.angleArc - a - 2 * Math.PI;
	      }
	      if (_this.angleArc !== Math.PI * 2 && a < 0 && a > -0.5) {
	        a = 0;
	      } else if (a < 0) {
	        a += Math.PI * 2;
	      }
	      var val = !_this.props.log ? a * (_this.props.max - _this.props.min) / _this.angleArc + _this.props.min : Math.pow(_this.props.max / _this.props.min, a / _this.angleArc) * _this.props.min;
	      return _this.coerceToStep(val);
	    };
	
	    _this.handleMouseDown = function (e) {
	      _this.props.onChange(_this.eventToValue(e));
	      document.addEventListener('mousemove', _this.handleMouseMove);
	      document.addEventListener('mouseup', _this.handleMouseUp);
	      document.addEventListener('keyup', _this.handleEsc);
	    };
	
	    _this.handleMouseMove = function (e) {
	      e.preventDefault();
	      _this.props.onChange(_this.eventToValue(e));
	    };
	
	    _this.handleMouseUp = function () {
	      document.removeEventListener('mousemove', _this.handleMouseMove);
	      document.removeEventListener('mouseup', _this.handleMouseUp);
	      document.removeEventListener('keyup', _this.handleEsc);
	    };
	
	    _this.handleTouchStart = function (e) {
	      e.preventDefault();
	      _this.touchIndex = e.targetTouches.length - 1;
	      _this.props.onChange(_this.eventToValue(e.targetTouches[_this.touchIndex]));
	      document.addEventListener('touchmove', _this.handleTouchMove, { passive: false });
	      document.addEventListener('touchend', _this.handleTouchEnd);
	      document.addEventListener('touchcancel', _this.handleTouchEnd);
	    };
	
	    _this.handleTouchMove = function (e) {
	      e.preventDefault();
	      _this.props.onChange(_this.eventToValue(e.targetTouches[_this.touchIndex]));
	    };
	
	    _this.handleTouchEnd = function () {
	      document.removeEventListener('touchmove', _this.handleTouchMove);
	      document.removeEventListener('touchend', _this.handleTouchEnd);
	      document.removeEventListener('touchcancel', _this.handleTouchEnd);
	    };
	
	    _this.handleEsc = function (e) {
	      if (e.keyCode === 27) {
	        e.preventDefault();
	        _this.handleMouseUp();
	      }
	    };
	
	    _this.handleTextInput = function (e) {
	      var val = Math.max(Math.min(+e.target.value, _this.props.max), _this.props.min) || _this.props.min;
	      _this.props.onChange(val);
	    };
	
	    _this.handleWheel = function (e) {
	      e.preventDefault();
	      if (e.deltaX > 0 || e.deltaY > 0) {
	        _this.props.onChange(_this.coerceToStep(!_this.props.log ? _this.props.value + _this.props.step : _this.props.value * _this.props.step));
	      } else if (e.deltaX < 0 || e.deltaY < 0) {
	        _this.props.onChange(_this.coerceToStep(!_this.props.log ? _this.props.value - _this.props.step : _this.props.value / _this.props.step));
	      }
	    };
	
	    _this.handleArrowKey = function (e) {
	      if (e.keyCode === 37 || e.keyCode === 40) {
	        e.preventDefault();
	        _this.props.onChange(_this.coerceToStep(!_this.props.log ? _this.props.value - _this.props.step : _this.props.value / _this.props.step));
	      } else if (e.keyCode === 38 || e.keyCode === 39) {
	        e.preventDefault();
	        _this.props.onChange(_this.coerceToStep(!_this.props.log ? _this.props.value + _this.props.step : _this.props.value * _this.props.step));
	      }
	    };
	
	    _this.inputStyle = function () {
	      return {
	        width: (_this.w / 2 + 4 >> 0) + 'px',
	        height: (_this.w / 3 >> 0) + 'px',
	        position: 'absolute',
	        verticalAlign: 'middle',
	        marginTop: (_this.w / 3 >> 0) + 'px',
	        marginLeft: '-' + (_this.w * 3 / 4 + 2 >> 0) + 'px',
	        border: 0,
	        background: 'none',
	        font: _this.props.fontWeight + ' ' + (_this.w / _this.digits >> 0) + 'px ' + _this.props.font,
	        textAlign: 'center',
	        color: _this.props.inputColor || _this.props.fgColor,
	        padding: '0px',
	        WebkitAppearance: 'none'
	      };
	    };
	
	    _this.render = function () {
	      return _react2.default.createElement(
	        'div',
	        {
	          style: { width: _this.w, height: _this.h, display: 'inline-block' },
	          onWheel: _this.props.readOnly ? null : _this.handleWheel
	        },
	        _react2.default.createElement('canvas', {
	          ref: function ref(_ref) {
	            _this.canvasRef = _ref;
	          },
	          style: { width: '100%', height: '100%' },
	          onMouseDown: _this.props.readOnly ? null : _this.handleMouseDown
	        }),
	        _this.props.displayInput ? _react2.default.createElement('input', {
	          style: _this.inputStyle(),
	          type: 'text',
	          value: _this.props.value,
	          onChange: _this.handleTextInput,
	          onKeyDown: _this.handleArrowKey,
	          readOnly: _this.props.readOnly || _this.props.disableTextInput
	        }) : null
	      );
	    };
	
	    var dimension = 200; // default if neither width or height given
	    if (_this.props.width || _this.props.height) {
	      dimension = Math.max(_this.props.width, _this.props.height);
	    }
	    _this.w = dimension;
	    _this.h = dimension;
	    _this.cursorExt = _this.props.cursor === true ? 0.3 : _this.props.cursor / 100;
	    _this.angleArc = _this.props.angleArc * Math.PI / 180;
	    _this.angleOffset = _this.props.angleOffset * Math.PI / 180;
	    _this.startAngle = 1.5 * Math.PI + _this.angleOffset;
	    _this.endAngle = 1.5 * Math.PI + _this.angleOffset + _this.angleArc;
	    _this.digits = Math.max(String(Math.abs(_this.props.min)).length, String(Math.abs(_this.props.max)).length, 2) + 2;
	    return _this;
	  }
	
	  _createClass(Knob, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.drawCanvas();
	      if (!this.props.readOnly) {
	        this.canvasRef.addEventListener('touchstart', this.handleTouchStart, { passive: false });
	      }
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this.drawCanvas();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      this.canvasRef.removeEventListener('touchstart', this.handleTouchStart);
	    }
	  }, {
	    key: 'drawCanvas',
	    value: function drawCanvas() {
	      this.canvasRef.width = this.w; // clears the canvas
	      this.canvasRef.height = this.h;
	      var ctx = this.canvasRef.getContext('2d');
	      this.xy = this.w / 2; // coordinates of canvas center
	      this.lineWidth = this.xy * this.props.thickness;
	      this.radius = this.xy - this.lineWidth / 2;
	      ctx.lineWidth = this.lineWidth;
	      ctx.lineCap = this.props.lineCap;
	      // background arc
	      ctx.beginPath();
	      ctx.strokeStyle = this.props.bgColor;
	      ctx.arc(this.xy, this.xy, this.radius, this.endAngle - 0.00001, this.startAngle + 0.00001, true);
	      ctx.stroke();
	      // foreground arc
	      var a = this.getArcToValue(this.props.value);
	      ctx.beginPath();
	      ctx.strokeStyle = this.props.fgColor;
	      ctx.arc(this.xy, this.xy, this.radius, a.startAngle, a.endAngle, a.acw);
	      ctx.stroke();
	    }
	  }]);
	
	  return Knob;
	}(_react2.default.Component);
	
	Knob.propTypes = {
	  value: _react2.default.PropTypes.number.isRequired,
	  onChange: _react2.default.PropTypes.func.isRequired,
	  min: _react2.default.PropTypes.number,
	  max: _react2.default.PropTypes.number,
	  step: _react2.default.PropTypes.number,
	  log: _react2.default.PropTypes.bool,
	  width: _react2.default.PropTypes.number,
	  height: _react2.default.PropTypes.number,
	  thickness: _react2.default.PropTypes.number,
	  lineCap: _react2.default.PropTypes.oneOf(['butt', 'round']),
	  bgColor: _react2.default.PropTypes.string,
	  fgColor: _react2.default.PropTypes.string,
	  inputColor: _react2.default.PropTypes.string,
	  font: _react2.default.PropTypes.string,
	  fontWeight: _react2.default.PropTypes.string,
	  clockwise: _react2.default.PropTypes.bool,
	  cursor: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.number, _react2.default.PropTypes.bool]),
	  stopper: _react2.default.PropTypes.bool,
	  readOnly: _react2.default.PropTypes.bool,
	  disableTextInput: _react2.default.PropTypes.bool,
	  displayInput: _react2.default.PropTypes.bool,
	  angleArc: _react2.default.PropTypes.number,
	  angleOffset: _react2.default.PropTypes.number
	};
	Knob.defaultProps = {
	  min: 0,
	  max: 100,
	  step: 1,
	  log: false,
	  width: 0, // actual default: width = height = 200px
	  height: 0, // see `dimension` below
	  thickness: 0.35,
	  lineCap: 'butt',
	  bgColor: '#EEE',
	  fgColor: '#EA2',
	  inputColor: '',
	  font: 'Arial',
	  fontWeight: 'bold',
	  clockwise: true,
	  cursor: false,
	  stopper: true,
	  readOnly: false,
	  disableTextInput: false,
	  displayInput: true,
	  angleArc: 360,
	  angleOffset: 0
	};
	exports.default = Knob;


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tone = __webpack_require__(187);
	
	var _tone2 = _interopRequireDefault(_tone);
	
	var _circle = __webpack_require__(311);
	
	var _circle2 = _interopRequireDefault(_circle);
	
	var _fxParams = __webpack_require__(312);
	
	var _fxParams2 = _interopRequireDefault(_fxParams);
	
	var _snake_view = __webpack_require__(313);
	
	var _snake_view2 = _interopRequireDefault(_snake_view);
	
	var _classnames = __webpack_require__(188);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Effects = function (_React$Component) {
	  _inherits(Effects, _React$Component);
	
	  function Effects(props) {
	    _classCallCheck(this, Effects);
	
	    var _this = _possibleConstructorReturn(this, (Effects.__proto__ || Object.getPrototypeOf(Effects)).call(this, props));
	
	    _this.lpFilter = new _tone2.default.Filter(22000, "lowpass");
	    _this.hpFilter = new _tone2.default.Filter(0, "highpass");
	    _this.reverb = new _tone2.default.Freeverb(0.9, 5000);
	    _this.phaser = new _tone2.default.Phaser(5, 5);
	    _this.phaser.wet.value = 0;
	    _this.reverb.wet.value = 0;
	
	    _this.fx1 = _this.lpFilter;
	    _this.fx2 = _this.reverb;
	    _this.state = {
	      fx1Active: 'lpFilter',
	      fx2Active: 'reverb',
	      mouseX: 0,
	      mouseY: 0,
	      snakeOn: false
	    };
	    _tone2.default.Master.chain(_this.fx1, _this.fx2);
	
	    _this.getMousePos = _this.getMousePos.bind(_this);
	    _this.mouseMoveEvent = _this.mouseMoveEvent.bind(_this);
	    _this.initializeCanvas = _this.initializeCanvas.bind(_this);
	    _this.canvasTrail = _this.canvasTrail.bind(_this);
	    _this.removeListeners = _this.removeListeners.bind(_this);
	    _this.animationLoop = _this.animationLoop.bind(_this);
	    _this.changeFx = _this.changeFx.bind(_this);
	    _this.toggleSnake = _this.toggleSnake.bind(_this);
	    _this.resetFx = _this.resetFx.bind(_this);
	    return _this;
	  }
	
	  _createClass(Effects, [{
	    key: 'getMousePos',
	    value: function getMousePos(e) {
	      var rect = this.canvas.getBoundingClientRect();
	      return {
	        x: e.clientX - rect.left,
	        y: e.clientY - rect.top
	      };
	    }
	  }, {
	    key: 'mouseMoveEvent',
	    value: function mouseMoveEvent(e) {
	      var mousePos = this.getMousePos(e);
	      if (mousePos.y < 1) {
	        mousePos.y = 1;
	      }
	      if (this.fx1 === this.lpFilter) {
	        this.fx1[_fxParams2.default['lpFilter']].value = Math.pow(10, mousePos.y / 46.057239172) + 500;
	      } else if (this.fx1 === this.hpFilter) {
	        this.fx1[_fxParams2.default['hpFilter']].value = Math.pow(10, mousePos.y / 46.057239172);
	      }
	      if (this.fx2 === this.reverb) {
	        this.fx2[_fxParams2.default['reverb']].value = mousePos.x * 0.0003;
	      } else if (this.fx2 === this.phaser) {
	        this.fx2[_fxParams2.default['phaser']].value = mousePos.x * 0.0048;
	      }
	      var canvasPos = this.getPosition(this.canvas);
	      this.setState({ mouseX: e.clientX - canvasPos.x, mouseY: e.clientY - canvasPos.y });
	    }
	  }, {
	    key: 'getPosition',
	    value: function getPosition(el) {
	      var xPos = 0;
	      var yPos = 0;
	
	      while (el) {
	        xPos += el.offsetLeft - el.scrollLeft + el.clientLeft;
	        yPos += el.offsetTop - el.scrollTop + el.clientTop;
	        el = el.offsetParent;
	      }
	      return {
	        x: xPos,
	        y: yPos
	      };
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _this2 = this;
	
	      this.canvas = document.getElementById("fx-canvas");
	      this.fxHighlight = document.getElementById('fx-highlighter');
	      this.ctx = this.canvas.getContext("2d");
	      this.circle = new _circle2.default(this.ctx);
	      this.circles = [];
	      for (var i = 0; i < 10; i++) {
	        this.circles.push(new _circle2.default(this.ctx));
	      }
	      this.canvas.addEventListener('mousedown', function (e) {
	        _this2.canvas.classList.add("canvas-active");
	        _this2.fxHighlight.classList.add("highlight-active");
	        var mousePos = _this2.getMousePos(e);
	        var canvasPos = _this2.getPosition(_this2.canvas);
	        _this2.animationLoop(e.clientX - canvasPos.x, e.clientY - canvasPos.y);
	        _this2.canvas.addEventListener('mousemove', _this2.mouseMoveEvent, false);
	      }, false);
	      document.getElementById('root').addEventListener('mouseup', this.removeListeners, false);
	    }
	  }, {
	    key: 'removeListeners',
	    value: function removeListeners() {
	      this.resetFx();
	      this.canvas.classList.remove("canvas-active");
	      this.fxHighlight.classList.remove("highlight-active");
	      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
	      this.canvas.removeEventListener('mousemove', this.mouseMoveEvent);
	      window.cancelAnimationFrame(this.animationId);
	    }
	  }, {
	    key: 'resetFx',
	    value: function resetFx() {
	      this.lpFilter.frequency.value = 22000;
	      this.hpFilter.frequency.value = 1;
	      this.phaser.wet.value = 0;
	      this.reverb.wet.value = 0;
	    }
	  }, {
	    key: 'initializeCanvas',
	    value: function initializeCanvas() {
	      this.ctx.globalCompositeOperation = "source-over";
	      this.ctx.clearRect(0, 0, 300, 300);
	      this.ctx.fillStyle = "black";
	      this.ctx.fillRect(0, 0, 300, 300);
	    }
	  }, {
	    key: 'canvasTrail',
	    value: function canvasTrail(xPos, yPos) {
	      this.initializeCanvas();
	      for (var i = 0; i < this.circles.length; i++) {
	        var c1 = this.circles[i],
	            c2 = this.circles[i - 1];
	
	        this.circles[this.circles.length - 1].draw();
	        this.circles[this.circles.length - 1].x = xPos;
	        this.circles[this.circles.length - 1].y = yPos;
	        c1.draw();
	
	        if (i > 0) {
	          c2.x += (c1.x - c2.x) * 0.6;
	          c2.y += (c1.y - c2.y) * 0.6;
	        }
	      }
	    }
	  }, {
	    key: 'animationLoop',
	    value: function animationLoop(xPos, yPos) {
	      this.canvasTrail(this.state.mouseX, this.state.mouseY);
	      this.animationId = window.requestAnimationFrame(this.animationLoop.bind(this, this.state.mouseX, this.state.mouseY));
	    }
	  }, {
	    key: 'changeFx',
	    value: function changeFx(fxNum, e) {
	      e.preventDefault();
	      var effect = e.currentTarget.value;
	      this.setState(_defineProperty({}, fxNum + 'Active', effect));
	      this[fxNum] = this[effect];
	      _tone2.default.Master.chain(this.fx1, this.fx2);
	    }
	  }, {
	    key: 'snakeBoard',
	    value: function snakeBoard() {
	      var board = [];
	      for (var i = 0; i < 20; i++) {
	        var row = [];
	        for (var j = 0; j < 20; j++) {
	          row.push(_react2.default.createElement('li', { className: 'snake-li', key: j }));
	        }
	        board.push(_react2.default.createElement(
	          'ul',
	          { className: 'snake-ul', key: i },
	          row
	        ));
	      }
	      return board;
	    }
	  }, {
	    key: 'toggleSnake',
	    value: function toggleSnake() {
	      if (this.state.snakeOn) {
	        window.clearInterval(this.snakeView.intervalId);
	        window.clearInterval(this.snakeFxId);
	        this.setState({ snakeOn: false });
	      } else {
	        this.setState({ snakeOn: true });
	        this.snakeView = new _snake_view2.default(this);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var fxClasses = (0, _classnames2.default)({
	        "fx-pad": true,
	        "hidden": this.state.snakeOn
	      });
	
	      var snakeClasses = (0, _classnames2.default)({
	        "snake-container": true,
	        "hidden": !this.state.snakeOn
	      });
	
	      var snakeButtonClasses = (0, _classnames2.default)({
	        "snake-switch": true,
	        "snake-switch-on": this.state.snakeOn
	      });
	
	      return _react2.default.createElement(
	        'div',
	        { className: 'fx-container', id: 'fx-highlighter' },
	        _react2.default.createElement(
	          'div',
	          { className: 'fx-div' },
	          _react2.default.createElement(
	            'p',
	            { className: 'fx-name name1' },
	            this.state.fx1Active
	          ),
	          _react2.default.createElement(
	            'p',
	            { className: 'fx-name name2' },
	            this.state.fx2Active
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: snakeButtonClasses, onClick: this.toggleSnake },
	            'snake?'
	          ),
	          _react2.default.createElement(
	            'figure',
	            { className: snakeClasses },
	            this.snakeBoard()
	          ),
	          _react2.default.createElement(
	            'div',
	            { className: fxClasses },
	            _react2.default.createElement('canvas', { id: 'fx-canvas', width: '200', height: '200' })
	          )
	        ),
	        _react2.default.createElement(
	          'div',
	          { className: 'fx-selectors' },
	          _react2.default.createElement(
	            'select',
	            {
	              onChange: this.changeFx.bind(this, 'fx1'),
	              value: this.state.fx1Active,
	              className: 'fx-selector' },
	            _react2.default.createElement(
	              'option',
	              { value: 'lpFilter' },
	              'lowpass filter'
	            ),
	            _react2.default.createElement(
	              'option',
	              { value: 'hpFilter' },
	              'highpass filter'
	            )
	          ),
	          _react2.default.createElement(
	            'select',
	            {
	              onChange: this.changeFx.bind(this, 'fx2'),
	              value: this.state.fx2Active,
	              className: 'fx-selector' },
	            _react2.default.createElement(
	              'option',
	              { value: 'reverb' },
	              'reverb'
	            ),
	            _react2.default.createElement(
	              'option',
	              { value: 'phaser' },
	              'phaser'
	            )
	          )
	        )
	      );
	    }
	  }]);
	
	  return Effects;
	}(_react2.default.Component);
	
	exports.default = Effects;

/***/ }),
/* 311 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Circle = function () {
	  function Circle(ctx) {
	    _classCallCheck(this, Circle);
	
	    this.ctx = ctx;
	    this.x = 0;
	    this.y = 0;
	    this.radius = 6;
	    this.color = "rgb(255, 73, 22)";
	  }
	
	  _createClass(Circle, [{
	    key: "draw",
	    value: function draw() {
	      this.ctx.globalCompositeOperation = "lighter";
	      this.ctx.beginPath();
	      this.ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
	      this.ctx.fillStyle = this.color;
	      this.ctx.fill();
	      this.ctx.closePath();
	    }
	  }]);
	
	  return Circle;
	}();
	
	exports.default = Circle;

/***/ }),
/* 312 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var FxParams = {
	  lpFilter: 'frequency',
	  hpFilter: 'frequency',
	  reverb: 'wet',
	  phaser: 'wet'
	};
	
	exports.default = FxParams;

/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _board = __webpack_require__(314);
	
	var _board2 = _interopRequireDefault(_board);
	
	var _fxParams = __webpack_require__(312);
	
	var _fxParams2 = _interopRequireDefault(_fxParams);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SnakeView = function () {
	  function SnakeView(fxContext) {
	    _classCallCheck(this, SnakeView);
	
	    this.$el = $('.snake-container');
	    this.board = new _board2.default(20);
	    this.keys = {
	      38: "N",
	      39: "E",
	      40: "S",
	      37: "W"
	    };
	    this.setupGrid();
	
	    this.intervalId = window.setInterval(this.step.bind(this), 100);
	    this.fxContext = fxContext;
	    this.x = 0;
	    this.y = 0;
	
	    $(window).on("keydown", this.handleKeyEvent.bind(this));
	  }
	
	  _createClass(SnakeView, [{
	    key: 'handleKeyEvent',
	    value: function handleKeyEvent(e) {
	      if (this.keys[e.keyCode]) {
	        this.board.snake.turn(this.keys[e.keyCode]);
	      }
	    }
	  }, {
	    key: 'updateClasses',
	    value: function updateClasses(coords, className) {
	      var _this = this;
	
	      this.$li.filter('.' + className).removeClass();
	
	      coords.forEach(function (coord) {
	        var flatCoord = coord.i * _this.board.dim + coord.j;
	        _this.$li.eq(flatCoord).addClass(className);
	      });
	    }
	  }, {
	    key: 'setupGrid',
	    value: function setupGrid() {
	      this.$li = this.$el.find("li");
	    }
	  }, {
	    key: 'step',
	    value: function step() {
	      if (this.board.snake.segments.length > 0) {
	        this.board.snake.move();
	        this.render();
	        this.x = this.board.snake.head().j * 10;
	        this.y = this.board.snake.head().i * 10;
	        if (this.x < 0) {
	          this.x = 0;
	        }
	        if (this.y < 0) {
	          this.y = 0;
	        }
	        if (this.fxContext.fx1 === this.fxContext.lpFilter) {
	          this.fxContext.fx1[_fxParams2.default['lpFilter']].value = Math.pow(10, this.y / 46.057239172) + 500;
	        } else if (this.fxContext.fx1 === this.fxContext.hpFilter) {
	          this.fxContext.fx1[_fxParams2.default['hpFilter']].value = Math.pow(10, this.y / 46.057239172);
	        }
	        if (this.fxContext.fx2 === this.fxContext.reverb) {
	          this.fxContext.fx2[_fxParams2.default['reverb']].value = this.x * 0.0003;
	        } else if (this.fxContext.fx2 === this.fxContext.phaser) {
	          this.fxContext.fx2[_fxParams2.default['phaser']].value = this.x * 0.0048;
	        }
	      } else {
	        this.fxContext.resetFx();
	        window.clearInterval(this.intervalId);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      this.updateClasses(this.board.snake.segments, "snake");
	      this.updateClasses([this.board.apple.position], "apple");
	    }
	  }]);
	
	  return SnakeView;
	}();
	
	exports.default = SnakeView;

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _snake = __webpack_require__(315);
	
	var _snake2 = _interopRequireDefault(_snake);
	
	var _apple = __webpack_require__(317);
	
	var _apple2 = _interopRequireDefault(_apple);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Board = function () {
	  function Board(dim) {
	    _classCallCheck(this, Board);
	
	    this.dim = dim;
	
	    this.snake = new _snake2.default(this);
	    this.apple = new _apple2.default(this);
	  }
	
	  _createClass(Board, [{
	    key: 'render',
	    value: function render() {
	      var grid = Board.blankGrid(this.dim);
	
	      this.snake.segments.forEach(function (segment) {
	        grid[segment.i][segment.j] = _snake2.default.SYMBOL;
	      });
	
	      grid[this.apple.position.i][this.apple.position.j] = _apple2.default.SYMBOL;
	
	      var rowStrs = [];
	      grid.map(function (row) {
	        return row.join("");
	      }).join("\n");
	    }
	  }, {
	    key: 'validPosition',
	    value: function validPosition(coord) {
	      return coord.i >= 0 && coord.i < this.dim && coord.j >= 0 && coord.j < this.dim;
	    }
	  }], [{
	    key: 'blankGrid',
	    value: function blankGrid(dim) {
	      var grid = [];
	
	      for (var i = 0; i < dim; i++) {
	        var row = [];
	        for (var j = 0; j < dim; j++) {
	          row.push(Board.BLANK_SYMBOL);
	        }
	        grid.push(row);
	      }
	
	      return grid;
	    }
	  }]);
	
	  return Board;
	}();
	
	Board.BLANK_SYMBOL = '.';
	
	exports.default = Board;

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _coord = __webpack_require__(316);
	
	var _coord2 = _interopRequireDefault(_coord);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Snake = function () {
	  function Snake(board) {
	    _classCallCheck(this, Snake);
	
	    this.dir = "N";
	    this.turning = false;
	    this.board = board;
	
	    var center = new _coord2.default(Math.floor(board.dim / 2), Math.floor(board.dim / 2));
	    this.segments = [center];
	
	    this.growTurns = 0;
	  }
	
	  _createClass(Snake, [{
	    key: "eatApple",
	    value: function eatApple() {
	      if (this.head().equals(this.board.apple.position)) {
	        this.growTurns += 3;
	        return true;
	      } else {
	        return false;
	      }
	    }
	  }, {
	    key: "isOccupying",
	    value: function isOccupying(array) {
	      var result = false;
	      this.segments.forEach(function (segment) {
	        if (segment.i === array[0] && segment.j === array[1]) {
	          result = true;
	          return result;
	        }
	      });
	      return result;
	    }
	  }, {
	    key: "isValid",
	    value: function isValid() {
	      var head = this.head();
	
	      if (!this.board.validPosition(this.head())) {
	        return false;
	      }
	
	      for (var i = 0; i < this.segments.length - 1; i++) {
	        if (this.segments[i].equals(head)) {
	          return false;
	        }
	      }
	
	      return true;
	    }
	  }, {
	    key: "head",
	    value: function head() {
	      return this.segments.slice(-1)[0];
	    }
	  }, {
	    key: "move",
	    value: function move() {
	      this.segments.push(this.head().plus(Snake.DIFFS[this.dir]));
	      this.turning = false;
	      if (this.eatApple()) {
	        this.board.apple.replace();
	      }
	
	      if (this.growTurns > 0) {
	        this.growTurns -= 1;
	      } else {
	        this.segments.shift();
	      }
	
	      if (!this.isValid()) {
	        this.segments = [];
	      }
	    }
	  }, {
	    key: "turn",
	    value: function turn(dir) {
	      if (Snake.DIFFS[this.dir].isOpposite(Snake.DIFFS[dir]) || this.turning) {
	        return;
	      } else {
	        this.turning = true;
	        this.dir = dir;
	      }
	    }
	  }]);
	
	  return Snake;
	}();
	
	Snake.DIFFS = {
	  "N": new _coord2.default(-1, 0),
	  "E": new _coord2.default(0, 1),
	  "S": new _coord2.default(1, 0),
	  "W": new _coord2.default(0, -1)
	};
	
	Snake.SYMBOL = "S";
	Snake.GROW_TURNS = 3;
	
	exports.default = Snake;

/***/ }),
/* 316 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Coord = function () {
	  function Coord(i, j) {
	    _classCallCheck(this, Coord);
	
	    this.i = i;
	    this.j = j;
	  }
	
	  _createClass(Coord, [{
	    key: "equals",
	    value: function equals(coord2) {
	      return this.i === coord2.i && this.j === coord2.j;
	    }
	  }, {
	    key: "isOpposite",
	    value: function isOpposite(coord2) {
	      return this.i === -1 * coord2.i && this.j === -1 * coord2.j;
	    }
	  }, {
	    key: "plus",
	    value: function plus(coord2) {
	      return new Coord(this.i + coord2.i, this.j + coord2.j);
	    }
	  }]);
	
	  return Coord;
	}();
	
	exports.default = Coord;

/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _coord = __webpack_require__(316);
	
	var _coord2 = _interopRequireDefault(_coord);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Apple = function () {
	  function Apple(board) {
	    _classCallCheck(this, Apple);
	
	    this.board = board;
	    this.replace();
	  }
	
	  _createClass(Apple, [{
	    key: "replace",
	    value: function replace() {
	      var x = Math.floor(Math.random() * this.board.dim);
	      var y = Math.floor(Math.random() * this.board.dim);
	
	      while (this.board.snake.isOccupying([x, y])) {
	        x = Math.floor(Math.random() * this.board.dim);
	        y = Math.floor(Math.random() * this.board.dim);
	      }
	
	      this.position = new _coord2.default(x, y);
	    }
	  }]);
	
	  return Apple;
	}();
	
	Apple.SYMBOL = "A";
	exports.default = Apple;

/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _tone = __webpack_require__(187);
	
	var _tone2 = _interopRequireDefault(_tone);
	
	var _classnames = __webpack_require__(188);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Visualizer = function (_React$Component) {
	  _inherits(Visualizer, _React$Component);
	
	  function Visualizer(props) {
	    _classCallCheck(this, Visualizer);
	
	    var _this = _possibleConstructorReturn(this, (Visualizer.__proto__ || Object.getPrototypeOf(Visualizer)).call(this, props));
	
	    _this.state = { activeVis: "fft" };
	    _this.fftAnalyser = new _tone2.default.Analyser('fft', 32);
	    _this.waveAnalyser = new _tone2.default.Analyser('waveform', 1024);
	    _tone2.default.Master.fan(_this.fftAnalyser, _this.waveAnalyser);
	    _this.drawFft = _this.drawFft.bind(_this);
	    _this.drawWave = _this.drawWave.bind(_this);
	    _this.drawVisualizers = _this.drawVisualizers.bind(_this);
	    _this.toggleVisualizer = _this.toggleVisualizer.bind(_this);
	    return _this;
	  }
	
	  _createClass(Visualizer, [{
	    key: 'drawFft',
	    value: function drawFft(values) {
	      this.fftCtx.clearRect(0, 0, this.fftWidth, this.fftHeight);
	      var barWidth = this.fftWidth / this.fftAnalyser.size;
	      var len = values.length;
	      for (var i = 0; i < len; i++) {
	        var val = values[i] / 255;
	        var x = this.fftWidth * (i / len);
	        var y = val * this.fftHeight;
	        this.fftCtx.fillStyle = "rgba(15, 140, 249, " + val + ")";
	        this.fftCtx.fillRect(x, this.fftHeight - y, barWidth, this.fftHeight);
	      }
	    }
	  }, {
	    key: 'drawWave',
	    value: function drawWave(values) {
	      this.waveformCtx.clearRect(0, 0, this.waveformWidth, this.waveformHeight);
	      values = this.waveAnalyser.analyse();
	      this.waveformCtx.beginPath();
	      this.waveformCtx.lineJoin = "round";
	      this.waveformCtx.lineWidth = 6;
	      this.waveformCtx.strokeStyle = this.waveformGradient;
	      this.waveformCtx.moveTo(0, values[0] / 255 * this.waveformHeight);
	      for (var i = 1, len = values.length; i < len; i++) {
	        var val = values[i] / 255;
	        var x = this.waveformWidth * (i / len);
	        var y = val * this.waveformHeight;
	        this.waveformCtx.lineTo(x, y);
	      }
	      this.waveformCtx.stroke();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this.fftCanvas = document.getElementById('fft-canvas');
	      this.fftCtx = this.fftCanvas.getContext('2d');
	      this.fftWidth = this.fftCanvas.width;
	      this.fftHeight = this.fftCanvas.height;
	      this.waveformCanvas = document.getElementById('waveform-canvas');
	      this.waveformCtx = this.waveformCanvas.getContext('2d');
	      this.waveformWidth = this.waveformCanvas.width;
	      this.waveformHeight = this.waveformCanvas.height;
	      this.waveformGradient = this.waveformCtx.createLinearGradient(0, 0, this.waveformWidth, this.waveformHeight);
	      this.waveformGradient.addColorStop(0, "rgb(15, 140, 249)");
	      this.waveformGradient.addColorStop(1, "#000");
	      this.drawVisualizers();
	    }
	  }, {
	    key: 'drawVisualizers',
	    value: function drawVisualizers() {
	      requestAnimationFrame(this.drawVisualizers);
	      var fftValues = this.fftAnalyser.analyse();
	      var waveValues = this.waveAnalyser.analyse();
	      this.drawFft(fftValues);
	      this.drawWave(waveValues);
	    }
	  }, {
	    key: 'toggleVisualizer',
	    value: function toggleVisualizer(visualizer, e) {
	      if (visualizer === "fft") {
	        this.setState({ activeVis: "fft" });
	      } else if (visualizer === "wave") {
	        this.setState({ activeVis: "wave" });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var fftClasses = (0, _classnames2.default)({
	        fft: true,
	        hidden: this.state.activeVis !== "fft"
	      });
	      var waveClasses = (0, _classnames2.default)({
	        waveform: true,
	        hidden: this.state.activeVis !== "wave"
	      });
	      return _react2.default.createElement(
	        'div',
	        { className: 'visualizers' },
	        _react2.default.createElement(
	          'div',
	          { className: 'visualizer-labels' },
	          _react2.default.createElement(
	            'div',
	            {
	              className: 'visualizer-label',
	              id: 'fa-tab',
	              onClick: this.toggleVisualizer.bind(this, "fft") },
	            'Frequency/Amplitude'
	          ),
	          _react2.default.createElement(
	            'div',
	            {
	              className: 'visualizer-label',
	              id: 'wave-tab',
	              onClick: this.toggleVisualizer.bind(this, "wave") },
	            'Waveform'
	          )
	        ),
	        _react2.default.createElement('canvas', { className: fftClasses, id: 'fft-canvas', height: '229px' }),
	        _react2.default.createElement('canvas', { className: waveClasses, id: 'waveform-canvas', height: '229px' })
	      );
	    }
	  }]);
	
	  return Visualizer;
	}(_react2.default.Component);
	
	exports.default = Visualizer;

/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactModal = __webpack_require__(320);
	
	var _reactModal2 = _interopRequireDefault(_reactModal);
	
	var _instruction_style = __webpack_require__(333);
	
	var _instructions = __webpack_require__(334);
	
	var _instructions2 = _interopRequireDefault(_instructions);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Footer = function (_React$Component) {
	  _inherits(Footer, _React$Component);
	
	  function Footer(props) {
	    _classCallCheck(this, Footer);
	
	    var _this = _possibleConstructorReturn(this, (Footer.__proto__ || Object.getPrototypeOf(Footer)).call(this, props));
	
	    _this.state = { instructionOpen: false };
	    _this.toggleInstructions = _this.toggleInstructions.bind(_this);
	    return _this;
	  }
	
	  _createClass(Footer, [{
	    key: 'toggleInstructions',
	    value: function toggleInstructions(bool) {
	      this.setState({ instructionOpen: bool });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return _react2.default.createElement(
	        'footer',
	        { className: 'footer' },
	        _react2.default.createElement(
	          'div',
	          { className: 'instructions-button footer-el' },
	          _react2.default.createElement(
	            'div',
	            { className: 'instructions-text', onClick: this.toggleInstructions.bind(this, true) },
	            'Instructions'
	          )
	        ),
	        _react2.default.createElement(
	          'p',
	          { className: 'footer-me-tag footer-el' },
	          'Made with ',
	          '\u266A',
	          ' by\xA0',
	          _react2.default.createElement(
	            'a',
	            { href: 'http://richardkwan.io/', className: 'myname' },
	            'Richard Kwan'
	          )
	        ),
	        _react2.default.createElement(
	          'a',
	          { href: 'https://github.com/taekyunggg/drum_machine', className: 'footer-github footer-el' },
	          _react2.default.createElement('i', { className: 'fa fa-github footer-icon', 'aria-hidden': 'true' })
	        ),
	        _react2.default.createElement(
	          _reactModal2.default,
	          {
	            isOpen: this.state.instructionOpen,
	            onRequestClose: this.toggleInstructions.bind(this, false),
	            style: _instruction_style.instructionStyle },
	          _react2.default.createElement(_instructions2.default, null)
	        )
	      );
	    }
	  }]);
	
	  return Footer;
	}(_react2.default.Component);
	
	exports.default = Footer;

/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(321);
	


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var React = __webpack_require__(1);
	var ReactDOM = __webpack_require__(37);
	var DOMFactories = __webpack_require__(322);
	var PropTypes = __webpack_require__(298);
	var ExecutionEnvironment = __webpack_require__(323);
	var ModalPortal = React.createFactory(__webpack_require__(324));
	var ariaAppHider = __webpack_require__(330);
	var refCount = __webpack_require__(331);
	var elementClass = __webpack_require__(332);
	var renderSubtreeIntoContainer = __webpack_require__(37).unstable_renderSubtreeIntoContainer;
	var Assign = __webpack_require__(328);
	var createReactClass = __webpack_require__(329);
	
	var SafeHTMLElement = ExecutionEnvironment.canUseDOM ? window.HTMLElement : {};
	var AppElement = ExecutionEnvironment.canUseDOM ? document.body : {appendChild: function() {}};
	
	function getParentElement(parentSelector) {
	  return parentSelector();
	}
	
	var Modal = createReactClass({
	
	  displayName: 'Modal',
	  statics: {
	    setAppElement: function(element) {
	        AppElement = ariaAppHider.setElement(element);
	    },
	    injectCSS: function() {
	      "production" !== process.env.NODE_ENV
	        && console.warn('React-Modal: injectCSS has been deprecated ' +
	                        'and no longer has any effect. It will be removed in a later version');
	    }
	  },
	
	  propTypes: {
	    isOpen: PropTypes.bool.isRequired,
	    style: PropTypes.shape({
	      content: PropTypes.object,
	      overlay: PropTypes.object
	    }),
	    portalClassName: PropTypes.string,
	    bodyOpenClassName: PropTypes.string,
	    appElement: PropTypes.instanceOf(SafeHTMLElement),
	    onAfterOpen: PropTypes.func,
	    onRequestClose: PropTypes.func,
	    closeTimeoutMS: PropTypes.number,
	    ariaHideApp: PropTypes.bool,
	    shouldCloseOnOverlayClick: PropTypes.bool,
	    parentSelector: PropTypes.func,
	    role: PropTypes.string,
	    contentLabel: PropTypes.string.isRequired
	  },
	
	  getDefaultProps: function () {
	    return {
	      isOpen: false,
	      portalClassName: 'ReactModalPortal',
	      bodyOpenClassName: 'ReactModal__Body--open',
	      ariaHideApp: true,
	      closeTimeoutMS: 0,
	      shouldCloseOnOverlayClick: true,
	      parentSelector: function () { return document.body; }
	    };
	  },
	
	  componentDidMount: function() {
	    this.node = document.createElement('div');
	    this.node.className = this.props.portalClassName;
	
	    if (this.props.isOpen) refCount.add(this);
	
	    var parent = getParentElement(this.props.parentSelector);
	    parent.appendChild(this.node);
	    this.renderPortal(this.props);
	  },
	
	  componentWillUpdate: function(newProps) {
	    if(newProps.portalClassName !== this.props.portalClassName) {
	      this.node.className = newProps.portalClassName;
	    }
	  },
	
	  componentWillReceiveProps: function(newProps) {
	    if (newProps.isOpen) refCount.add(this);
	    if (!newProps.isOpen) refCount.remove(this);
	    var currentParent = getParentElement(this.props.parentSelector);
	    var newParent = getParentElement(newProps.parentSelector);
	
	    if(newParent !== currentParent) {
	      currentParent.removeChild(this.node);
	      newParent.appendChild(this.node);
	    }
	
	    this.renderPortal(newProps);
	  },
	
	  componentWillUnmount: function() {
	    if (!this.node) return;
	
	    refCount.remove(this);
	
	    if (this.props.ariaHideApp) {
	      ariaAppHider.show(this.props.appElement);
	    }
	
	    var state = this.portal.state;
	    var now = Date.now();
	    var closesAt = state.isOpen && this.props.closeTimeoutMS
	      && (state.closesAt
	        || now + this.props.closeTimeoutMS);
	
	    if (closesAt) {
	      if (!state.beforeClose) {
	        this.portal.closeWithTimeout();
	      }
	
	      var that = this;
	      setTimeout(function() { that.removePortal(); }, closesAt - now);
	    } else {
	      this.removePortal();
	    }
	  },
	
	  removePortal: function() {
	    ReactDOM.unmountComponentAtNode(this.node);
	    var parent = getParentElement(this.props.parentSelector);
	    parent.removeChild(this.node);
	
	    if (refCount.count() === 0) {
	      elementClass(document.body).remove(this.props.bodyOpenClassName);
	    }
	  },
	
	  renderPortal: function(props) {
	    if (props.isOpen || refCount.count() > 0) {
	      elementClass(document.body).add(this.props.bodyOpenClassName);
	    } else {
	      elementClass(document.body).remove(this.props.bodyOpenClassName);
	    }
	
	    if (props.ariaHideApp) {
	      ariaAppHider.toggle(props.isOpen, props.appElement);
	    }
	
	    this.portal = renderSubtreeIntoContainer(this, ModalPortal(Assign({}, props, {defaultStyles: Modal.defaultStyles})), this.node);
	  },
	
	  render: function () {
	    return DOMFactories.noscript();
	  }
	});
	
	Modal.defaultStyles = {
	  overlay: {
	    position        : 'fixed',
	    top             : 0,
	    left            : 0,
	    right           : 0,
	    bottom          : 0,
	    backgroundColor : 'rgba(255, 255, 255, 0.75)'
	  },
	  content: {
	    position                : 'absolute',
	    top                     : '40px',
	    left                    : '40px',
	    right                   : '40px',
	    bottom                  : '40px',
	    border                  : '1px solid #ccc',
	    background              : '#fff',
	    overflow                : 'auto',
	    WebkitOverflowScrolling : 'touch',
	    borderRadius            : '4px',
	    outline                 : 'none',
	    padding                 : '20px'
	  }
	}
	
	module.exports = Modal
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Copyright (c) 2015-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	(function(f) {
	  if (true) {
	    module.exports = f(__webpack_require__(1));
	    /* global define */
	  } else if (typeof define === 'function' && define.amd) {
	    define(['react'], f);
	  } else {
	    var g;
	    if (typeof window !== 'undefined') {
	      g = window;
	    } else if (typeof global !== 'undefined') {
	      g = global;
	    } else if (typeof self !== 'undefined') {
	      g = self;
	    } else {
	      g = this;
	    }
	
	    if (typeof g.React === 'undefined') {
	      throw Error('React module should be required before ReactDOMFactories');
	    }
	
	    g.ReactDOMFactories = f(g.React);
	  }
	})(function(React) {
	  /**
	   * Create a factory that creates HTML tag elements.
	   */
	  function createDOMFactory(type) {
	    var factory = React.createElement.bind(null, type);
	    // Expose the type on the factory and the prototype so that it can be
	    // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	    // This should not be named `constructor` since this may not be the function
	    // that created the element, and it may not even be a constructor.
	    factory.type = type;
	    return factory;
	  };
	
	  /**
	   * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	   */
	  var ReactDOMFactories = {
	    a: createDOMFactory('a'),
	    abbr: createDOMFactory('abbr'),
	    address: createDOMFactory('address'),
	    area: createDOMFactory('area'),
	    article: createDOMFactory('article'),
	    aside: createDOMFactory('aside'),
	    audio: createDOMFactory('audio'),
	    b: createDOMFactory('b'),
	    base: createDOMFactory('base'),
	    bdi: createDOMFactory('bdi'),
	    bdo: createDOMFactory('bdo'),
	    big: createDOMFactory('big'),
	    blockquote: createDOMFactory('blockquote'),
	    body: createDOMFactory('body'),
	    br: createDOMFactory('br'),
	    button: createDOMFactory('button'),
	    canvas: createDOMFactory('canvas'),
	    caption: createDOMFactory('caption'),
	    cite: createDOMFactory('cite'),
	    code: createDOMFactory('code'),
	    col: createDOMFactory('col'),
	    colgroup: createDOMFactory('colgroup'),
	    data: createDOMFactory('data'),
	    datalist: createDOMFactory('datalist'),
	    dd: createDOMFactory('dd'),
	    del: createDOMFactory('del'),
	    details: createDOMFactory('details'),
	    dfn: createDOMFactory('dfn'),
	    dialog: createDOMFactory('dialog'),
	    div: createDOMFactory('div'),
	    dl: createDOMFactory('dl'),
	    dt: createDOMFactory('dt'),
	    em: createDOMFactory('em'),
	    embed: createDOMFactory('embed'),
	    fieldset: createDOMFactory('fieldset'),
	    figcaption: createDOMFactory('figcaption'),
	    figure: createDOMFactory('figure'),
	    footer: createDOMFactory('footer'),
	    form: createDOMFactory('form'),
	    h1: createDOMFactory('h1'),
	    h2: createDOMFactory('h2'),
	    h3: createDOMFactory('h3'),
	    h4: createDOMFactory('h4'),
	    h5: createDOMFactory('h5'),
	    h6: createDOMFactory('h6'),
	    head: createDOMFactory('head'),
	    header: createDOMFactory('header'),
	    hgroup: createDOMFactory('hgroup'),
	    hr: createDOMFactory('hr'),
	    html: createDOMFactory('html'),
	    i: createDOMFactory('i'),
	    iframe: createDOMFactory('iframe'),
	    img: createDOMFactory('img'),
	    input: createDOMFactory('input'),
	    ins: createDOMFactory('ins'),
	    kbd: createDOMFactory('kbd'),
	    keygen: createDOMFactory('keygen'),
	    label: createDOMFactory('label'),
	    legend: createDOMFactory('legend'),
	    li: createDOMFactory('li'),
	    link: createDOMFactory('link'),
	    main: createDOMFactory('main'),
	    map: createDOMFactory('map'),
	    mark: createDOMFactory('mark'),
	    menu: createDOMFactory('menu'),
	    menuitem: createDOMFactory('menuitem'),
	    meta: createDOMFactory('meta'),
	    meter: createDOMFactory('meter'),
	    nav: createDOMFactory('nav'),
	    noscript: createDOMFactory('noscript'),
	    object: createDOMFactory('object'),
	    ol: createDOMFactory('ol'),
	    optgroup: createDOMFactory('optgroup'),
	    option: createDOMFactory('option'),
	    output: createDOMFactory('output'),
	    p: createDOMFactory('p'),
	    param: createDOMFactory('param'),
	    picture: createDOMFactory('picture'),
	    pre: createDOMFactory('pre'),
	    progress: createDOMFactory('progress'),
	    q: createDOMFactory('q'),
	    rp: createDOMFactory('rp'),
	    rt: createDOMFactory('rt'),
	    ruby: createDOMFactory('ruby'),
	    s: createDOMFactory('s'),
	    samp: createDOMFactory('samp'),
	    script: createDOMFactory('script'),
	    section: createDOMFactory('section'),
	    select: createDOMFactory('select'),
	    small: createDOMFactory('small'),
	    source: createDOMFactory('source'),
	    span: createDOMFactory('span'),
	    strong: createDOMFactory('strong'),
	    style: createDOMFactory('style'),
	    sub: createDOMFactory('sub'),
	    summary: createDOMFactory('summary'),
	    sup: createDOMFactory('sup'),
	    table: createDOMFactory('table'),
	    tbody: createDOMFactory('tbody'),
	    td: createDOMFactory('td'),
	    textarea: createDOMFactory('textarea'),
	    tfoot: createDOMFactory('tfoot'),
	    th: createDOMFactory('th'),
	    thead: createDOMFactory('thead'),
	    time: createDOMFactory('time'),
	    title: createDOMFactory('title'),
	    tr: createDOMFactory('tr'),
	    track: createDOMFactory('track'),
	    u: createDOMFactory('u'),
	    ul: createDOMFactory('ul'),
	    var: createDOMFactory('var'),
	    video: createDOMFactory('video'),
	    wbr: createDOMFactory('wbr'),
	
	    // SVG
	    circle: createDOMFactory('circle'),
	    clipPath: createDOMFactory('clipPath'),
	    defs: createDOMFactory('defs'),
	    ellipse: createDOMFactory('ellipse'),
	    g: createDOMFactory('g'),
	    image: createDOMFactory('image'),
	    line: createDOMFactory('line'),
	    linearGradient: createDOMFactory('linearGradient'),
	    mask: createDOMFactory('mask'),
	    path: createDOMFactory('path'),
	    pattern: createDOMFactory('pattern'),
	    polygon: createDOMFactory('polygon'),
	    polyline: createDOMFactory('polyline'),
	    radialGradient: createDOMFactory('radialGradient'),
	    rect: createDOMFactory('rect'),
	    stop: createDOMFactory('stop'),
	    svg: createDOMFactory('svg'),
	    text: createDOMFactory('text'),
	    tspan: createDOMFactory('tspan'),
	  };
	
	  // due to wrapper and conditionals at the top, this will either become
	  // `module.exports ReactDOMFactories` if that is available,
	  // otherwise it will be defined via `define(['react'], ReactDOMFactories)`
	  // if that is available,
	  // otherwise it will be defined as global variable.
	  return ReactDOMFactories;
	});
	


/***/ }),
/* 323 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/
	
	(function () {
		'use strict';
	
		var canUseDOM = !!(
			typeof window !== 'undefined' &&
			window.document &&
			window.document.createElement
		);
	
		var ExecutionEnvironment = {
	
			canUseDOM: canUseDOM,
	
			canUseWorkers: typeof Worker !== 'undefined',
	
			canUseEventListeners:
				canUseDOM && !!(window.addEventListener || window.attachEvent),
	
			canUseViewport: canUseDOM && !!window.screen
	
		};
	
		if (true) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return ExecutionEnvironment;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = ExecutionEnvironment;
		} else {
			window.ExecutionEnvironment = ExecutionEnvironment;
		}
	
	}());


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	var React = __webpack_require__(1);
	var DOMFactories = __webpack_require__(322);
	var focusManager = __webpack_require__(325);
	var scopeTab = __webpack_require__(327);
	var Assign = __webpack_require__(328);
	var createReactClass = __webpack_require__(329);
	
	var div = DOMFactories.div;
	
	// so that our CSS is statically analyzable
	var CLASS_NAMES = {
	  overlay: 'ReactModal__Overlay',
	  content: 'ReactModal__Content'
	};
	
	var ModalPortal = module.exports = createReactClass({
	
	  displayName: 'ModalPortal',
	  shouldClose: null,
	
	  getDefaultProps: function() {
	    return {
	      style: {
	        overlay: {},
	        content: {}
	      }
	    };
	  },
	
	  getInitialState: function() {
	    return {
	      afterOpen: false,
	      beforeClose: false
	    };
	  },
	
	  componentDidMount: function() {
	    // Focus needs to be set when mounting and already open
	    if (this.props.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    }
	  },
	
	  componentWillUnmount: function() {
	    clearTimeout(this.closeTimer);
	  },
	
	  componentWillReceiveProps: function(newProps) {
	    // Focus only needs to be set once when the modal is being opened
	    if (!this.props.isOpen && newProps.isOpen) {
	      this.setFocusAfterRender(true);
	      this.open();
	    } else if (this.props.isOpen && !newProps.isOpen) {
	      this.close();
	    }
	  },
	
	  componentDidUpdate: function () {
	    if (this.focusAfterRender) {
	      this.focusContent();
	      this.setFocusAfterRender(false);
	    }
	  },
	
	  setFocusAfterRender: function (focus) {
	    this.focusAfterRender = focus;
	  },
	
	  afterClose: function () {
	    focusManager.returnFocus();
	    focusManager.teardownScopedFocus();
	  },
	
	  open: function () {
	    if (this.state.afterOpen && this.state.beforeClose) {
	      clearTimeout(this.closeTimer);
	      this.setState({ beforeClose: false });
	    } else {
	      focusManager.setupScopedFocus(this.node);
	      focusManager.markForFocusLater();
	      this.setState({isOpen: true}, function() {
	        this.setState({afterOpen: true});
	
	        if (this.props.isOpen && this.props.onAfterOpen) {
	          this.props.onAfterOpen();
	        }
	      }.bind(this));
	    }
	  },
	
	  close: function() {
	    if (this.props.closeTimeoutMS > 0)
	      this.closeWithTimeout();
	    else
	      this.closeWithoutTimeout();
	  },
	
	  focusContent: function() {
	    // Don't steal focus from inner elements
	    if (!this.contentHasFocus()) {
	      this.refs.content.focus();
	    }
	  },
	
	  closeWithTimeout: function() {
	    var closesAt = Date.now() + this.props.closeTimeoutMS;
	    this.setState({beforeClose: true, closesAt: closesAt}, function() {
	      this.closeTimer = setTimeout(this.closeWithoutTimeout, this.state.closesAt - Date.now());
	    }.bind(this));
	  },
	
	  closeWithoutTimeout: function() {
	    this.setState({
	      beforeClose: false,
	      isOpen: false,
	      afterOpen: false,
	      closesAt: null
	    }, this.afterClose);
	  },
	
	  handleKeyDown: function(event) {
	    if (event.keyCode == 9 /*tab*/) scopeTab(this.refs.content, event);
	    if (event.keyCode == 27 /*esc*/) {
	      event.preventDefault();
	      this.requestClose(event);
	    }
	  },
	
	  handleOverlayOnClick: function (event) {
	    if (this.shouldClose === null) {
	      this.shouldClose = true;
	    }
	
	    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {
	      if (this.ownerHandlesClose())
	        this.requestClose(event);
	      else
	        this.focusContent();
	    }
	    this.shouldClose = null;
	  },
	
	  handleContentOnClick: function () {
	    this.shouldClose = false;
	  },
	
	  requestClose: function(event) {
	    if (this.ownerHandlesClose())
	      this.props.onRequestClose(event);
	  },
	
	  ownerHandlesClose: function() {
	    return this.props.onRequestClose;
	  },
	
	  shouldBeClosed: function() {
	    return !this.state.isOpen && !this.state.beforeClose;
	  },
	
	  contentHasFocus: function() {
	    return document.activeElement === this.refs.content || this.refs.content.contains(document.activeElement);
	  },
	
	  buildClassName: function(which, additional) {
	    var classNames = (typeof additional === 'object') ? additional : {
	      base: CLASS_NAMES[which],
	      afterOpen: CLASS_NAMES[which] + "--after-open",
	      beforeClose: CLASS_NAMES[which] + "--before-close"
	    };
	    var className = classNames.base;
	    if (this.state.afterOpen) { className += " " + classNames.afterOpen; }
	    if (this.state.beforeClose) { className += " " + classNames.beforeClose; }
	    return (typeof additional === 'string' && additional) ? [className, additional].join(" ") : className;
	  },
	
	  render: function() {
	    var contentStyles = (this.props.className) ? {} : this.props.defaultStyles.content;
	    var overlayStyles = (this.props.overlayClassName) ? {} : this.props.defaultStyles.overlay;
	
	    return this.shouldBeClosed() ? div() : (
	      div({
	        ref: "overlay",
	        className: this.buildClassName('overlay', this.props.overlayClassName),
	        style: Assign({}, overlayStyles, this.props.style.overlay || {}),
	        onClick: this.handleOverlayOnClick
	      },
	        div({
	          ref: "content",
	          style: Assign({}, contentStyles, this.props.style.content || {}),
	          className: this.buildClassName('content', this.props.className),
	          tabIndex: "-1",
	          onKeyDown: this.handleKeyDown,
	          onClick: this.handleContentOnClick,
	          role: this.props.role,
	          "aria-label": this.props.contentLabel
	        },
	          this.props.children
	        )
	      )
	    );
	  }
	});


/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(326);
	var focusLaterElements = [];
	var modalElement = null;
	var needToFocus = false;
	
	function handleBlur(event) {
	  needToFocus = true;
	}
	
	function handleFocus(event) {
	  if (needToFocus) {
	    needToFocus = false;
	    if (!modalElement) {
	      return;
	    }
	    // need to see how jQuery shims document.on('focusin') so we don't need the
	    // setTimeout, firefox doesn't support focusin, if it did, we could focus
	    // the element outside of a setTimeout. Side-effect of this implementation
	    // is that the document.body gets focus, and then we focus our element right
	    // after, seems fine.
	    setTimeout(function() {
	      if (modalElement.contains(document.activeElement))
	        return;
	      var el = (findTabbable(modalElement)[0] || modalElement);
	      el.focus();
	    }, 0);
	  }
	}
	
	exports.markForFocusLater = function() {
	  focusLaterElements.push(document.activeElement);
	};
	
	exports.returnFocus = function() {
	  var toFocus = null;
	  try {
	    toFocus = focusLaterElements.pop();
	    toFocus.focus();
	    return;
	  }
	  catch (e) {
	    console.warn('You tried to return focus to '+toFocus+' but it is not in the DOM anymore');
	  }
	};
	
	exports.setupScopedFocus = function(element) {
	  modalElement = element;
	
	  if (window.addEventListener) {
	    window.addEventListener('blur', handleBlur, false);
	    document.addEventListener('focus', handleFocus, true);
	  } else {
	    window.attachEvent('onBlur', handleBlur);
	    document.attachEvent('onFocus', handleFocus);
	  }
	};
	
	exports.teardownScopedFocus = function() {
	  modalElement = null;
	
	  if (window.addEventListener) {
	    window.removeEventListener('blur', handleBlur);
	    document.removeEventListener('focus', handleFocus);
	  } else {
	    window.detachEvent('onBlur', handleBlur);
	    document.detachEvent('onFocus', handleFocus);
	  }
	};


/***/ }),
/* 326 */
/***/ (function(module, exports) {

	/*!
	 * Adapted from jQuery UI core
	 *
	 * http://jqueryui.com
	 *
	 * Copyright 2014 jQuery Foundation and other contributors
	 * Released under the MIT license.
	 * http://jquery.org/license
	 *
	 * http://api.jqueryui.com/category/ui-core/
	 */
	
	function focusable(element, isTabIndexNotNaN) {
	  var nodeName = element.nodeName.toLowerCase();
	  return (/input|select|textarea|button|object/.test(nodeName) ?
	    !element.disabled :
	    "a" === nodeName ?
	      element.href || isTabIndexNotNaN :
	      isTabIndexNotNaN) && visible(element);
	}
	
	function hidden(el) {
	  return (el.offsetWidth <= 0 && el.offsetHeight <= 0) ||
	    el.style.display === 'none';
	}
	
	function visible(element) {
	  while (element) {
	    if (element === document.body) break;
	    if (hidden(element)) return false;
	    element = element.parentNode;
	  }
	  return true;
	}
	
	function tabbable(element) {
	  var tabIndex = element.getAttribute('tabindex');
	  if (tabIndex === null) tabIndex = undefined;
	  var isTabIndexNaN = isNaN(tabIndex);
	  return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
	}
	
	function findTabbableDescendants(element) {
	  return [].slice.call(element.querySelectorAll('*'), 0).filter(function(el) {
	    return tabbable(el);
	  });
	}
	
	module.exports = findTabbableDescendants;
	


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	var findTabbable = __webpack_require__(326);
	
	module.exports = function(node, event) {
	  var tabbable = findTabbable(node);
	  if (!tabbable.length) {
	      event.preventDefault();
	      return;
	  }
	  var finalTabbable = tabbable[event.shiftKey ? 0 : tabbable.length - 1];
	  var leavingFinalTabbable = (
	    finalTabbable === document.activeElement ||
	    // handle immediate shift+tab after opening with mouse
	    node === document.activeElement
	  );
	  if (!leavingFinalTabbable) return;
	  event.preventDefault();
	  var target = tabbable[event.shiftKey ? tabbable.length - 1 : 0];
	  target.focus();
	};


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]';
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;
	
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object),
	    nativeMax = Math.max;
	
	/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
	var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];
	
	  var length = result.length,
	      skipIndexes = !!length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    object[key] = value;
	  }
	}
	
	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = array;
	    return apply(func, this, otherArgs);
	  };
	}
	
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  object || (object = {});
	
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	
	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;
	
	    assignValue(object, key, newValue === undefined ? source[key] : newValue);
	  }
	  return object;
	}
	
	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;
	
	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;
	
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	  return value === proto;
	}
	
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	
	module.exports = assign;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var React = __webpack_require__(1);
	var factory = __webpack_require__(35);
	
	if (typeof React === 'undefined') {
	  throw Error(
	    'create-react-class could not find the React object. If you are using script tags, ' +
	      'make sure that React is being loaded before create-react-class.'
	  );
	}
	
	// Hack to grab NoopUpdateQueue from isomorphic React
	var ReactNoopUpdateQueue = new React.Component().updater;
	
	module.exports = factory(
	  React.Component,
	  React.isValidElement,
	  ReactNoopUpdateQueue
	);


/***/ }),
/* 330 */
/***/ (function(module, exports) {

	var _element = typeof document !== 'undefined' ? document.body : null;
	
	function setElement(element) {
	  if (typeof element === 'string') {
	    var el = document.querySelectorAll(element);
	    element = 'length' in el ? el[0] : el;
	  }
	  _element = element || _element;
	  return _element;
	}
	
	function hide(appElement) {
	  validateElement(appElement);
	  (appElement || _element).setAttribute('aria-hidden', 'true');
	}
	
	function show(appElement) {
	  validateElement(appElement);
	  (appElement || _element).removeAttribute('aria-hidden');
	}
	
	function toggle(shouldHide, appElement) {
	  if (shouldHide)
	    hide(appElement);
	  else
	    show(appElement);
	}
	
	function validateElement(appElement) {
	  if (!appElement && !_element)
	    throw new Error('react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible');
	}
	
	function resetForTesting() {
	  _element = document.body;
	}
	
	exports.toggle = toggle;
	exports.setElement = setElement;
	exports.show = show;
	exports.hide = hide;
	exports.resetForTesting = resetForTesting;


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	var modals = [];
	
	module.exports = {
	  add: function (element) {
	    if (modals.indexOf(element) === -1) {
	      modals.push(element);
	    }
	  },
	  remove: function (element) {
	    var index = modals.indexOf(element);
	    if (index === -1) {
	      return;
	    }
	    modals.splice(index, 1);
	  },
	  count: function () {
	    return modals.length;
	  }
	};


/***/ }),
/* 332 */
/***/ (function(module, exports) {

	module.exports = function(opts) {
	  return new ElementClass(opts)
	}
	
	function indexOf(arr, prop) {
	  if (arr.indexOf) return arr.indexOf(prop)
	  for (var i = 0, len = arr.length; i < len; i++)
	    if (arr[i] === prop) return i
	  return -1
	}
	
	function ElementClass(opts) {
	  if (!(this instanceof ElementClass)) return new ElementClass(opts)
	  var self = this
	  if (!opts) opts = {}
	
	  // similar doing instanceof HTMLElement but works in IE8
	  if (opts.nodeType) opts = {el: opts}
	
	  this.opts = opts
	  this.el = opts.el || document.body
	  if (typeof this.el !== 'object') this.el = document.querySelector(this.el)
	}
	
	ElementClass.prototype.add = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return el.className = className
	  var classes = el.className.split(' ')
	  if (indexOf(classes, className) > -1) return classes
	  classes.push(className)
	  el.className = classes.join(' ')
	  return classes
	}
	
	ElementClass.prototype.remove = function(className) {
	  var el = this.el
	  if (!el) return
	  if (el.className === "") return
	  var classes = el.className.split(' ')
	  var idx = indexOf(classes, className)
	  if (idx > -1) classes.splice(idx, 1)
	  el.className = classes.join(' ')
	  return classes
	}
	
	ElementClass.prototype.has = function(className) {
	  var el = this.el
	  if (!el) return
	  var classes = el.className.split(' ')
	  return indexOf(classes, className) > -1
	}
	
	ElementClass.prototype.toggle = function(className) {
	  var el = this.el
	  if (!el) return
	  if (this.has(className)) this.remove(className)
	  else this.add(className)
	}


/***/ }),
/* 333 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var instructionStyle = exports.instructionStyle = {
	  overlay: {
	    position: 'fixed',
	    top: 0,
	    left: 0,
	    right: 0,
	    bottom: 0,
	    backgroundColor: 'rgba(0, 0, 0, 0.75)'
	  },
	  content: {
	    position: 'fixed',
	    top: '40%',
	    bottom: 'auto',
	    left: '50%',
	    right: 'auto',
	    borderRadius: '2px',
	    minHeight: '10rem',
	    padding: '2rem',
	    transform: 'translate(-50%,-50%)',
	    width: '400px',
	    backgroundColor: 'rgb(19, 30, 43)',
	    color: 'rgb(15, 140, 249)'
	  }
	};

/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Instructions = function Instructions() {
	  return _react2.default.createElement(
	    'div',
	    { className: 'instructions' },
	    _react2.default.createElement(
	      'p',
	      null,
	      'Welcome to React Machine! ',
	      _react2.default.createElement('br', null),
	      'Headphones are recommended.',
	      _react2.default.createElement('br', null),
	      _react2.default.createElement('br', null),
	      'To toggle playback, press the play button, or use the spacebar.  The number in the top left represents the tempo in beats per minute.',
	      _react2.default.createElement('br', null),
	      _react2.default.createElement('br', null),
	      'Each row represents a different instrument, and you can toggle sounds by clicking on individual squares.  The yellow dials on the left control the volume of each instrument and can be controlled by clicking and dragging or by scrolling.',
	      _react2.default.createElement('br', null),
	      _react2.default.createElement('br', null),
	      'In the bottom left, there is an FX-pad which houses 2 effects that can be controlled via the x and y axis. Click and drag over the pad to activate the effects.  You can change the active effect via the dropdown below the pad.'
	    )
	  );
	};
	
	exports.default = Instructions;

/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _getPrototypeOf = __webpack_require__(235);
	
	var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(241);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(245);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(278);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _react = __webpack_require__(1);
	
	var _getMuiTheme = __webpack_require__(336);
	
	var _getMuiTheme2 = _interopRequireDefault(_getMuiTheme);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var MuiThemeProvider = function (_Component) {
	  (0, _inherits3.default)(MuiThemeProvider, _Component);
	
	  function MuiThemeProvider() {
	    (0, _classCallCheck3.default)(this, MuiThemeProvider);
	    return (0, _possibleConstructorReturn3.default)(this, (MuiThemeProvider.__proto__ || (0, _getPrototypeOf2.default)(MuiThemeProvider)).apply(this, arguments));
	  }
	
	  (0, _createClass3.default)(MuiThemeProvider, [{
	    key: 'getChildContext',
	    value: function getChildContext() {
	      return {
	        muiTheme: this.props.muiTheme || (0, _getMuiTheme2.default)()
	      };
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      return this.props.children;
	    }
	  }]);
	  return MuiThemeProvider;
	}(_react.Component);
	
	MuiThemeProvider.childContextTypes = {
	  muiTheme: _react.PropTypes.object.isRequired
	};
	process.env.NODE_ENV !== "production" ? MuiThemeProvider.propTypes = {
	  children: _react.PropTypes.element,
	  muiTheme: _react.PropTypes.object
	} : void 0;
	exports.default = MuiThemeProvider;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _toConsumableArray2 = __webpack_require__(337);
	
	var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);
	
	exports.default = getMuiTheme;
	
	var _lodash = __webpack_require__(347);
	
	var _lodash2 = _interopRequireDefault(_lodash);
	
	var _colorManipulator = __webpack_require__(349);
	
	var _lightBaseTheme = __webpack_require__(350);
	
	var _lightBaseTheme2 = _interopRequireDefault(_lightBaseTheme);
	
	var _zIndex = __webpack_require__(353);
	
	var _zIndex2 = _interopRequireDefault(_zIndex);
	
	var _autoprefixer = __webpack_require__(354);
	
	var _autoprefixer2 = _interopRequireDefault(_autoprefixer);
	
	var _callOnce = __webpack_require__(390);
	
	var _callOnce2 = _interopRequireDefault(_callOnce);
	
	var _rtl = __webpack_require__(391);
	
	var _rtl2 = _interopRequireDefault(_rtl);
	
	var _compose = __webpack_require__(395);
	
	var _compose2 = _interopRequireDefault(_compose);
	
	var _typography = __webpack_require__(396);
	
	var _typography2 = _interopRequireDefault(_typography);
	
	var _colors = __webpack_require__(351);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Get the MUI theme corresponding to a base theme.
	 * It's possible to override the computed theme values
	 * by providing a second argument. The calculated
	 * theme will be deeply merged with the second argument.
	 */
	function getMuiTheme(muiTheme) {
	  for (var _len = arguments.length, more = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    more[_key - 1] = arguments[_key];
	  }
	
	  muiTheme = _lodash2.default.apply(undefined, [{
	    zIndex: _zIndex2.default,
	    isRtl: false,
	    userAgent: undefined
	  }, _lightBaseTheme2.default, muiTheme].concat(more));
	
	  var _muiTheme = muiTheme,
	      spacing = _muiTheme.spacing,
	      fontFamily = _muiTheme.fontFamily,
	      palette = _muiTheme.palette;
	
	  var baseTheme = { spacing: spacing, fontFamily: fontFamily, palette: palette };
	
	  muiTheme = (0, _lodash2.default)({
	    appBar: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      height: spacing.desktopKeylineIncrement,
	      titleFontWeight: _typography2.default.fontWeightNormal,
	      padding: spacing.desktopGutter
	    },
	    avatar: {
	      color: palette.canvasColor,
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.26)
	    },
	    badge: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    bottomNavigation: {
	      backgroundColor: palette.canvasColor,
	      unselectedColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      selectedColor: palette.primary1Color,
	      height: 56,
	      unselectedFontSize: 12,
	      selectedFontSize: 14
	    },
	    button: {
	      height: 36,
	      minWidth: 88,
	      iconButtonSize: spacing.iconSize * 2
	    },
	    card: {
	      titleColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      subtitleColor: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    cardMedia: {
	      color: _colors.darkWhite,
	      overlayContentBackground: _colors.lightBlack,
	      titleColor: _colors.darkWhite,
	      subtitleColor: _colors.lightWhite
	    },
	    cardText: {
	      textColor: palette.textColor
	    },
	    checkbox: {
	      boxColor: palette.textColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    chip: {
	      backgroundColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12),
	      deleteIconColor: (0, _colorManipulator.fade)(palette.textColor, 0.26),
	      textColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      fontSize: 14,
	      fontWeight: _typography2.default.fontWeightNormal,
	      shadow: '0 1px 6px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12) + ',\n        0 1px 4px ' + (0, _colorManipulator.fade)(palette.shadowColor, 0.12)
	    },
	    datePicker: {
	      color: palette.primary1Color,
	      textColor: palette.alternateTextColor,
	      calendarTextColor: palette.textColor,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor,
	      calendarYearBackgroundColor: palette.canvasColor
	    },
	    dialog: {
	      titleFontSize: 22,
	      bodyFontSize: 16,
	      bodyColor: (0, _colorManipulator.fade)(palette.textColor, 0.6)
	    },
	    dropDownMenu: {
	      accentColor: palette.borderColor
	    },
	    enhancedButton: {
	      tapHighlightColor: _colors.transparent
	    },
	    flatButton: {
	      color: _colors.transparent,
	      buttonFilterColor: '#999999',
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      textColor: palette.textColor,
	      primaryTextColor: palette.primary1Color,
	      secondaryTextColor: palette.accent1Color,
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    floatingActionButton: {
	      buttonSize: 56,
	      miniSize: 40,
	      color: palette.primary1Color,
	      iconColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryIconColor: palette.alternateTextColor,
	      disabledTextColor: palette.disabledColor,
	      disabledColor: (0, _colorManipulator.emphasize)(palette.canvasColor, 0.12)
	    },
	    gridTile: {
	      textColor: _colors.white
	    },
	    icon: {
	      color: palette.canvasColor,
	      backgroundColor: palette.primary1Color
	    },
	    inkBar: {
	      backgroundColor: palette.accent1Color
	    },
	    drawer: {
	      width: spacing.desktopKeylineIncrement * 4,
	      color: palette.canvasColor
	    },
	    listItem: {
	      nestedLevelDepth: 18,
	      secondaryTextColor: palette.secondaryTextColor,
	      leftIconColor: _colors.grey600,
	      rightIconColor: _colors.grey600
	    },
	    menu: {
	      backgroundColor: palette.canvasColor,
	      containerBackgroundColor: palette.canvasColor
	    },
	    menuItem: {
	      dataHeight: 32,
	      height: 48,
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1),
	      padding: spacing.desktopGutter,
	      selectedTextColor: palette.accent1Color,
	      rightIconDesktopFill: _colors.grey600
	    },
	    menuSubheader: {
	      padding: spacing.desktopGutter,
	      borderColor: palette.borderColor,
	      textColor: palette.primary1Color
	    },
	    overlay: {
	      backgroundColor: _colors.lightBlack
	    },
	    paper: {
	      color: palette.textColor,
	      backgroundColor: palette.canvasColor,
	      zDepthShadows: [[1, 6, 0.12, 1, 4, 0.12], [3, 10, 0.16, 3, 10, 0.23], [10, 30, 0.19, 6, 10, 0.23], [14, 45, 0.25, 10, 18, 0.22], [19, 60, 0.30, 15, 20, 0.22]].map(function (d) {
	        return '0 ' + d[0] + 'px ' + d[1] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[2]) + ',\n         0 ' + d[3] + 'px ' + d[4] + 'px ' + (0, _colorManipulator.fade)(palette.shadowColor, d[5]);
	      })
	    },
	    radioButton: {
	      borderColor: palette.textColor,
	      backgroundColor: palette.alternateTextColor,
	      checkedColor: palette.primary1Color,
	      requiredColor: palette.primary1Color,
	      disabledColor: palette.disabledColor,
	      size: 24,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor
	    },
	    raisedButton: {
	      color: palette.alternateTextColor,
	      textColor: palette.textColor,
	      primaryColor: palette.primary1Color,
	      primaryTextColor: palette.alternateTextColor,
	      secondaryColor: palette.accent1Color,
	      secondaryTextColor: palette.alternateTextColor,
	      disabledColor: (0, _colorManipulator.darken)(palette.alternateTextColor, 0.1),
	      disabledTextColor: (0, _colorManipulator.fade)(palette.textColor, 0.3),
	      fontSize: _typography2.default.fontStyleButtonFontSize,
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    refreshIndicator: {
	      strokeColor: palette.borderColor,
	      loadingStrokeColor: palette.primary1Color
	    },
	    ripple: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.87)
	    },
	    slider: {
	      trackSize: 2,
	      trackColor: palette.primary3Color,
	      trackColorSelected: palette.accent3Color,
	      handleSize: 12,
	      handleSizeDisabled: 8,
	      handleSizeActive: 18,
	      handleColorZero: palette.primary3Color,
	      handleFillColor: palette.alternateTextColor,
	      selectionColor: palette.primary1Color,
	      rippleColor: palette.primary1Color
	    },
	    snackbar: {
	      textColor: palette.alternateTextColor,
	      backgroundColor: palette.textColor,
	      actionColor: palette.accent1Color
	    },
	    subheader: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      fontWeight: _typography2.default.fontWeightMedium
	    },
	    stepper: {
	      backgroundColor: 'transparent',
	      hoverBackgroundColor: (0, _colorManipulator.fade)(_colors.black, 0.06),
	      iconColor: palette.primary1Color,
	      hoveredIconColor: _colors.grey700,
	      inactiveIconColor: _colors.grey500,
	      textColor: (0, _colorManipulator.fade)(_colors.black, 0.87),
	      disabledTextColor: (0, _colorManipulator.fade)(_colors.black, 0.26),
	      connectorLineColor: _colors.grey400
	    },
	    svgIcon: {
	      color: palette.textColor
	    },
	    table: {
	      backgroundColor: palette.canvasColor
	    },
	    tableFooter: {
	      borderColor: palette.borderColor,
	      textColor: palette.accent3Color
	    },
	    tableHeader: {
	      borderColor: palette.borderColor
	    },
	    tableHeaderColumn: {
	      textColor: palette.accent3Color,
	      height: 56,
	      spacing: 24
	    },
	    tableRow: {
	      hoverColor: palette.accent2Color,
	      stripeColor: (0, _colorManipulator.fade)((0, _colorManipulator.lighten)(palette.primary1Color, 0.5), 0.4),
	      selectedColor: palette.borderColor,
	      textColor: palette.textColor,
	      borderColor: palette.borderColor,
	      height: 48
	    },
	    tableRowColumn: {
	      height: 48,
	      spacing: 24
	    },
	    tabs: {
	      backgroundColor: palette.primary1Color,
	      textColor: (0, _colorManipulator.fade)(palette.alternateTextColor, 0.7),
	      selectedTextColor: palette.alternateTextColor
	    },
	    textField: {
	      textColor: palette.textColor,
	      hintColor: palette.disabledColor,
	      floatingLabelColor: palette.disabledColor,
	      disabledTextColor: palette.disabledColor,
	      errorColor: _colors.red500,
	      focusColor: palette.primary1Color,
	      backgroundColor: 'transparent',
	      borderColor: palette.borderColor
	    },
	    timePicker: {
	      color: palette.alternateTextColor,
	      textColor: palette.alternateTextColor,
	      accentColor: palette.primary1Color,
	      clockColor: palette.textColor,
	      clockCircleColor: palette.clockCircleColor,
	      headerColor: palette.pickerHeaderColor || palette.primary1Color,
	      selectColor: palette.primary2Color,
	      selectTextColor: palette.alternateTextColor
	    },
	    toggle: {
	      thumbOnColor: palette.primary1Color,
	      thumbOffColor: palette.accent2Color,
	      thumbDisabledColor: palette.borderColor,
	      thumbRequiredColor: palette.primary1Color,
	      trackOnColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5),
	      trackOffColor: palette.primary3Color,
	      trackDisabledColor: palette.primary3Color,
	      labelColor: palette.textColor,
	      labelDisabledColor: palette.disabledColor,
	      trackRequiredColor: (0, _colorManipulator.fade)(palette.primary1Color, 0.5)
	    },
	    toolbar: {
	      color: (0, _colorManipulator.fade)(palette.textColor, 0.54),
	      hoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.87),
	      backgroundColor: (0, _colorManipulator.darken)(palette.accent2Color, 0.05),
	      height: 56,
	      titleFontSize: 20,
	      iconColor: (0, _colorManipulator.fade)(palette.textColor, 0.4),
	      separatorColor: (0, _colorManipulator.fade)(palette.textColor, 0.175),
	      menuHoverColor: (0, _colorManipulator.fade)(palette.textColor, 0.1)
	    },
	    tooltip: {
	      color: _colors.white,
	      rippleBackgroundColor: _colors.grey700
	    }
	  }, muiTheme, {
	    baseTheme: baseTheme, // To provide backward compatibility.
	    rawTheme: baseTheme });
	
	  var transformers = [_autoprefixer2.default, _rtl2.default, _callOnce2.default].map(function (t) {
	    return t(muiTheme);
	  }).filter(function (t) {
	    return t;
	  });
	
	  muiTheme.prepareStyles = _compose2.default.apply(undefined, (0, _toConsumableArray3.default)(transformers));
	
	  return muiTheme;
	}

/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _from = __webpack_require__(338);
	
	var _from2 = _interopRequireDefault(_from);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }
	
	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};

/***/ }),
/* 338 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(339), __esModule: true };

/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(249);
	__webpack_require__(340);
	module.exports = __webpack_require__(201).Array.from;


/***/ }),
/* 340 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var ctx = __webpack_require__(202);
	var $export = __webpack_require__(199);
	var toObject = __webpack_require__(233);
	var call = __webpack_require__(341);
	var isArrayIter = __webpack_require__(342);
	var toLength = __webpack_require__(223);
	var createProperty = __webpack_require__(343);
	var getIterFn = __webpack_require__(344);
	
	$export($export.S + $export.F * !__webpack_require__(346)(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = getIterFn(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(206);
	module.exports = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) anObject(ret.call(iterator));
	    throw e;
	  }
	};


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators = __webpack_require__(253);
	var ITERATOR = __webpack_require__(259)('iterator');
	var ArrayProto = Array.prototype;
	
	module.exports = function (it) {
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var $defineProperty = __webpack_require__(205);
	var createDesc = __webpack_require__(213);
	
	module.exports = function (object, index, value) {
	  if (index in object) $defineProperty.f(object, index, createDesc(0, value));
	  else object[index] = value;
	};


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	var classof = __webpack_require__(345);
	var ITERATOR = __webpack_require__(259)('iterator');
	var Iterators = __webpack_require__(253);
	module.exports = __webpack_require__(201).getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(220);
	var TAG = __webpack_require__(259)('toStringTag');
	// ES3 wrong here
	var ARG = cof(function () { return arguments; }()) == 'Arguments';
	
	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};
	
	module.exports = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	var ITERATOR = __webpack_require__(259)('iterator');
	var SAFE_CLOSING = false;
	
	try {
	  var riter = [7][ITERATOR]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }
	
	module.exports = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};


/***/ }),
/* 347 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/**
	 * Lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright JS Foundation and other contributors <https://js.foundation/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */
	
	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;
	
	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';
	
	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;
	
	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    asyncTag = '[object AsyncFunction]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    nullTag = '[object Null]',
	    objectTag = '[object Object]',
	    proxyTag = '[object Proxy]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    undefinedTag = '[object Undefined]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
	
	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;
	
	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
	
	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
	
	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;
	
	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;
	
	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());
	
	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
	
	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	
	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);
	
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	
	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}
	
	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}
	
	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}
	
	/**
	 * Gets the value at `key`, unless `key` is "__proto__".
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function safeGet(object, key) {
	  return key == '__proto__'
	    ? undefined
	    : object[key];
	}
	
	/** Used for built-in method references. */
	var arrayProto = Array.prototype,
	    funcProto = Function.prototype,
	    objectProto = Object.prototype;
	
	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];
	
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    Symbol = root.Symbol,
	    Uint8Array = root.Uint8Array,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
	    getPrototype = overArg(Object.getPrototypeOf, Object),
	    objectCreate = Object.create,
	    propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice,
	    symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
	    nativeMax = Math.max,
	    nativeNow = Date.now;
	
	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map'),
	    nativeCreate = getNative(Object, 'create');
	
	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());
	
	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}
	
	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}
	
	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}
	
	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;
	
	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	
	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  return index < 0 ? undefined : data[index][1];
	}
	
	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}
	
	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);
	
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	
	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;
	
	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;
	
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}
	
	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}
	
	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	
	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}
	
	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}
	
	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;
	
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	
	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;
	
	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}
	
	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}
	
	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);
	
	  this.size = data.size;
	  return result;
	}
	
	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}
	
	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}
	
	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	
	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;
	
	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;
	
	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}
	
	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}
	
	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	
	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}
	
	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}
	
	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}
	
	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}
	
	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];
	
	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  baseFor(source, function(srcValue, key) {
	    if (isObject(srcValue)) {
	      stack || (stack = new Stack);
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	        : undefined;
	
	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn);
	}
	
	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = safeGet(object, key),
	      srcValue = safeGet(source, key),
	      stacked = stack.get(srcValue);
	
	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;
	
	  var isCommon = newValue === undefined;
	
	  if (isCommon) {
	    var isArr = isArray(srcValue),
	        isBuff = !isArr && isBuffer(srcValue),
	        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	
	    newValue = srcValue;
	    if (isArr || isBuff || isTyped) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer(srcValue, true);
	      }
	      else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray(srcValue, true);
	      }
	      else {
	        newValue = [];
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      newValue = objValue;
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
	        newValue = initCloneObject(srcValue);
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}
	
	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}
	
	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};
	
	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
	
	  buffer.copy(result);
	  return result;
	}
	
	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}
	
	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}
	
	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;
	
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});
	
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	
	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;
	
	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}
	
	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;
	
	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;
	
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}
	
	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;
	
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	
	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}
	
	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	
	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}
	
	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}
	
	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;
	
	  return value === proto;
	}
	
	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);
	
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}
	
	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);
	
	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;
	
	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);
	
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}
	
	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}
	
	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}
	
	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;
	
	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}
	
	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}
	
	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
	
	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}
	
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}
	
	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function(object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});
	
	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}
	
	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}
	
	module.exports = merge;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(348)(module)))

/***/ }),
/* 348 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 349 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.convertColorToString = convertColorToString;
	exports.convertHexToRGB = convertHexToRGB;
	exports.decomposeColor = decomposeColor;
	exports.getContrastRatio = getContrastRatio;
	exports.getLuminance = getLuminance;
	exports.emphasize = emphasize;
	exports.fade = fade;
	exports.darken = darken;
	exports.lighten = lighten;
	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value, min, max) {
	  if (value < min) {
	    return min;
	  }
	  if (value > max) {
	    return max;
	  }
	  return value;
	}
	
	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of, 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function convertColorToString(color) {
	  var type = color.type,
	      values = color.values;
	
	
	  if (type.indexOf('rgb') > -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    for (var i = 0; i < 3; i++) {
	      values[i] = parseInt(values[i]);
	    }
	  }
	
	  var colorString = void 0;
	
	  if (type.indexOf('hsl') > -1) {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + '%, ' + values[2] + '%';
	  } else {
	    colorString = color.type + '(' + values[0] + ', ' + values[1] + ', ' + values[2];
	  }
	
	  if (values.length === 4) {
	    colorString += ', ' + color.values[3] + ')';
	  } else {
	    colorString += ')';
	  }
	
	  return colorString;
	}
	
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 *  @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 *  @returns {string} A CSS rgb color string
	 */
	function convertHexToRGB(color) {
	  if (color.length === 4) {
	    var extendedColor = '#';
	    for (var i = 1; i < color.length; i++) {
	      extendedColor += color.charAt(i) + color.charAt(i);
	    }
	    color = extendedColor;
	  }
	
	  var values = {
	    r: parseInt(color.substr(1, 2), 16),
	    g: parseInt(color.substr(3, 2), 16),
	    b: parseInt(color.substr(5, 2), 16)
	  };
	
	  return 'rgb(' + values.r + ', ' + values.g + ', ' + values.b + ')';
	}
	
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {{type: string, values: number[]}} A MUI color object
	 */
	function decomposeColor(color) {
	  if (color.charAt(0) === '#') {
	    return decomposeColor(convertHexToRGB(color));
	  }
	
	  var marker = color.indexOf('(');
	  var type = color.substring(0, marker);
	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });
	
	  return { type: type, values: values };
	}
	
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21 with 2 digit precision.
	 */
	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  var contrastRatio = (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	
	  return Number(contrastRatio.toFixed(2)); // Truncate at two digits
	}
	
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/WAI/GL/wiki/Relative_luminance
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);
	
	  if (color.type.indexOf('rgb') > -1) {
	    var rgb = color.values.map(function (val) {
	      val /= 255; // normalized
	      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	    });
	    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3)); // Truncate at 3 digits
	  } else if (color.type.indexOf('hsl') > -1) {
	    return color.values[2] / 100;
	  }
	}
	
	/**
	 * Darken or lighten a colour, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function emphasize(color) {
	  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
	
	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}
	
	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function fade(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value, 0, 1);
	
	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  color.values[3] = value;
	
	  return convertColorToString(color);
	}
	
	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);
	
	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return convertColorToString(color);
	}
	
	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient, 0, 1);
	
	  if (color.type.indexOf('hsl') > -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') > -1) {
	    for (var i = 0; i < 3; i++) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }
	
	  return convertColorToString(color);
	}

/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _colors = __webpack_require__(351);
	
	var _colorManipulator = __webpack_require__(349);
	
	var _spacing = __webpack_require__(352);
	
	var _spacing2 = _interopRequireDefault(_spacing);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 *  Light Theme is the default theme used in material-ui. It is guaranteed to
	 *  have all theme variables needed for every component. Variables not defined
	 *  in a custom theme will default to these values.
	 */
	exports.default = {
	  spacing: _spacing2.default,
	  fontFamily: 'Roboto, sans-serif',
	  palette: {
	    primary1Color: _colors.cyan500,
	    primary2Color: _colors.cyan700,
	    primary3Color: _colors.grey400,
	    accent1Color: _colors.pinkA200,
	    accent2Color: _colors.grey100,
	    accent3Color: _colors.grey500,
	    textColor: _colors.darkBlack,
	    secondaryTextColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.54),
	    alternateTextColor: _colors.white,
	    canvasColor: _colors.white,
	    borderColor: _colors.grey300,
	    disabledColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.3),
	    pickerHeaderColor: _colors.cyan500,
	    clockCircleColor: (0, _colorManipulator.fade)(_colors.darkBlack, 0.07),
	    shadowColor: _colors.fullBlack
	  }
	}; /**
	    * NB: If you update this file, please also update `docs/src/app/customization/Themes.js`
	    */

/***/ }),
/* 351 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	var red50 = exports.red50 = '#ffebee';
	var red100 = exports.red100 = '#ffcdd2';
	var red200 = exports.red200 = '#ef9a9a';
	var red300 = exports.red300 = '#e57373';
	var red400 = exports.red400 = '#ef5350';
	var red500 = exports.red500 = '#f44336';
	var red600 = exports.red600 = '#e53935';
	var red700 = exports.red700 = '#d32f2f';
	var red800 = exports.red800 = '#c62828';
	var red900 = exports.red900 = '#b71c1c';
	var redA100 = exports.redA100 = '#ff8a80';
	var redA200 = exports.redA200 = '#ff5252';
	var redA400 = exports.redA400 = '#ff1744';
	var redA700 = exports.redA700 = '#d50000';
	
	var pink50 = exports.pink50 = '#fce4ec';
	var pink100 = exports.pink100 = '#f8bbd0';
	var pink200 = exports.pink200 = '#f48fb1';
	var pink300 = exports.pink300 = '#f06292';
	var pink400 = exports.pink400 = '#ec407a';
	var pink500 = exports.pink500 = '#e91e63';
	var pink600 = exports.pink600 = '#d81b60';
	var pink700 = exports.pink700 = '#c2185b';
	var pink800 = exports.pink800 = '#ad1457';
	var pink900 = exports.pink900 = '#880e4f';
	var pinkA100 = exports.pinkA100 = '#ff80ab';
	var pinkA200 = exports.pinkA200 = '#ff4081';
	var pinkA400 = exports.pinkA400 = '#f50057';
	var pinkA700 = exports.pinkA700 = '#c51162';
	
	var purple50 = exports.purple50 = '#f3e5f5';
	var purple100 = exports.purple100 = '#e1bee7';
	var purple200 = exports.purple200 = '#ce93d8';
	var purple300 = exports.purple300 = '#ba68c8';
	var purple400 = exports.purple400 = '#ab47bc';
	var purple500 = exports.purple500 = '#9c27b0';
	var purple600 = exports.purple600 = '#8e24aa';
	var purple700 = exports.purple700 = '#7b1fa2';
	var purple800 = exports.purple800 = '#6a1b9a';
	var purple900 = exports.purple900 = '#4a148c';
	var purpleA100 = exports.purpleA100 = '#ea80fc';
	var purpleA200 = exports.purpleA200 = '#e040fb';
	var purpleA400 = exports.purpleA400 = '#d500f9';
	var purpleA700 = exports.purpleA700 = '#aa00ff';
	
	var deepPurple50 = exports.deepPurple50 = '#ede7f6';
	var deepPurple100 = exports.deepPurple100 = '#d1c4e9';
	var deepPurple200 = exports.deepPurple200 = '#b39ddb';
	var deepPurple300 = exports.deepPurple300 = '#9575cd';
	var deepPurple400 = exports.deepPurple400 = '#7e57c2';
	var deepPurple500 = exports.deepPurple500 = '#673ab7';
	var deepPurple600 = exports.deepPurple600 = '#5e35b1';
	var deepPurple700 = exports.deepPurple700 = '#512da8';
	var deepPurple800 = exports.deepPurple800 = '#4527a0';
	var deepPurple900 = exports.deepPurple900 = '#311b92';
	var deepPurpleA100 = exports.deepPurpleA100 = '#b388ff';
	var deepPurpleA200 = exports.deepPurpleA200 = '#7c4dff';
	var deepPurpleA400 = exports.deepPurpleA400 = '#651fff';
	var deepPurpleA700 = exports.deepPurpleA700 = '#6200ea';
	
	var indigo50 = exports.indigo50 = '#e8eaf6';
	var indigo100 = exports.indigo100 = '#c5cae9';
	var indigo200 = exports.indigo200 = '#9fa8da';
	var indigo300 = exports.indigo300 = '#7986cb';
	var indigo400 = exports.indigo400 = '#5c6bc0';
	var indigo500 = exports.indigo500 = '#3f51b5';
	var indigo600 = exports.indigo600 = '#3949ab';
	var indigo700 = exports.indigo700 = '#303f9f';
	var indigo800 = exports.indigo800 = '#283593';
	var indigo900 = exports.indigo900 = '#1a237e';
	var indigoA100 = exports.indigoA100 = '#8c9eff';
	var indigoA200 = exports.indigoA200 = '#536dfe';
	var indigoA400 = exports.indigoA400 = '#3d5afe';
	var indigoA700 = exports.indigoA700 = '#304ffe';
	
	var blue50 = exports.blue50 = '#e3f2fd';
	var blue100 = exports.blue100 = '#bbdefb';
	var blue200 = exports.blue200 = '#90caf9';
	var blue300 = exports.blue300 = '#64b5f6';
	var blue400 = exports.blue400 = '#42a5f5';
	var blue500 = exports.blue500 = '#2196f3';
	var blue600 = exports.blue600 = '#1e88e5';
	var blue700 = exports.blue700 = '#1976d2';
	var blue800 = exports.blue800 = '#1565c0';
	var blue900 = exports.blue900 = '#0d47a1';
	var blueA100 = exports.blueA100 = '#82b1ff';
	var blueA200 = exports.blueA200 = '#448aff';
	var blueA400 = exports.blueA400 = '#2979ff';
	var blueA700 = exports.blueA700 = '#2962ff';
	
	var lightBlue50 = exports.lightBlue50 = '#e1f5fe';
	var lightBlue100 = exports.lightBlue100 = '#b3e5fc';
	var lightBlue200 = exports.lightBlue200 = '#81d4fa';
	var lightBlue300 = exports.lightBlue300 = '#4fc3f7';
	var lightBlue400 = exports.lightBlue400 = '#29b6f6';
	var lightBlue500 = exports.lightBlue500 = '#03a9f4';
	var lightBlue600 = exports.lightBlue600 = '#039be5';
	var lightBlue700 = exports.lightBlue700 = '#0288d1';
	var lightBlue800 = exports.lightBlue800 = '#0277bd';
	var lightBlue900 = exports.lightBlue900 = '#01579b';
	var lightBlueA100 = exports.lightBlueA100 = '#80d8ff';
	var lightBlueA200 = exports.lightBlueA200 = '#40c4ff';
	var lightBlueA400 = exports.lightBlueA400 = '#00b0ff';
	var lightBlueA700 = exports.lightBlueA700 = '#0091ea';
	
	var cyan50 = exports.cyan50 = '#e0f7fa';
	var cyan100 = exports.cyan100 = '#b2ebf2';
	var cyan200 = exports.cyan200 = '#80deea';
	var cyan300 = exports.cyan300 = '#4dd0e1';
	var cyan400 = exports.cyan400 = '#26c6da';
	var cyan500 = exports.cyan500 = '#00bcd4';
	var cyan600 = exports.cyan600 = '#00acc1';
	var cyan700 = exports.cyan700 = '#0097a7';
	var cyan800 = exports.cyan800 = '#00838f';
	var cyan900 = exports.cyan900 = '#006064';
	var cyanA100 = exports.cyanA100 = '#84ffff';
	var cyanA200 = exports.cyanA200 = '#18ffff';
	var cyanA400 = exports.cyanA400 = '#00e5ff';
	var cyanA700 = exports.cyanA700 = '#00b8d4';
	
	var teal50 = exports.teal50 = '#e0f2f1';
	var teal100 = exports.teal100 = '#b2dfdb';
	var teal200 = exports.teal200 = '#80cbc4';
	var teal300 = exports.teal300 = '#4db6ac';
	var teal400 = exports.teal400 = '#26a69a';
	var teal500 = exports.teal500 = '#009688';
	var teal600 = exports.teal600 = '#00897b';
	var teal700 = exports.teal700 = '#00796b';
	var teal800 = exports.teal800 = '#00695c';
	var teal900 = exports.teal900 = '#004d40';
	var tealA100 = exports.tealA100 = '#a7ffeb';
	var tealA200 = exports.tealA200 = '#64ffda';
	var tealA400 = exports.tealA400 = '#1de9b6';
	var tealA700 = exports.tealA700 = '#00bfa5';
	
	var green50 = exports.green50 = '#e8f5e9';
	var green100 = exports.green100 = '#c8e6c9';
	var green200 = exports.green200 = '#a5d6a7';
	var green300 = exports.green300 = '#81c784';
	var green400 = exports.green400 = '#66bb6a';
	var green500 = exports.green500 = '#4caf50';
	var green600 = exports.green600 = '#43a047';
	var green700 = exports.green700 = '#388e3c';
	var green800 = exports.green800 = '#2e7d32';
	var green900 = exports.green900 = '#1b5e20';
	var greenA100 = exports.greenA100 = '#b9f6ca';
	var greenA200 = exports.greenA200 = '#69f0ae';
	var greenA400 = exports.greenA400 = '#00e676';
	var greenA700 = exports.greenA700 = '#00c853';
	
	var lightGreen50 = exports.lightGreen50 = '#f1f8e9';
	var lightGreen100 = exports.lightGreen100 = '#dcedc8';
	var lightGreen200 = exports.lightGreen200 = '#c5e1a5';
	var lightGreen300 = exports.lightGreen300 = '#aed581';
	var lightGreen400 = exports.lightGreen400 = '#9ccc65';
	var lightGreen500 = exports.lightGreen500 = '#8bc34a';
	var lightGreen600 = exports.lightGreen600 = '#7cb342';
	var lightGreen700 = exports.lightGreen700 = '#689f38';
	var lightGreen800 = exports.lightGreen800 = '#558b2f';
	var lightGreen900 = exports.lightGreen900 = '#33691e';
	var lightGreenA100 = exports.lightGreenA100 = '#ccff90';
	var lightGreenA200 = exports.lightGreenA200 = '#b2ff59';
	var lightGreenA400 = exports.lightGreenA400 = '#76ff03';
	var lightGreenA700 = exports.lightGreenA700 = '#64dd17';
	
	var lime50 = exports.lime50 = '#f9fbe7';
	var lime100 = exports.lime100 = '#f0f4c3';
	var lime200 = exports.lime200 = '#e6ee9c';
	var lime300 = exports.lime300 = '#dce775';
	var lime400 = exports.lime400 = '#d4e157';
	var lime500 = exports.lime500 = '#cddc39';
	var lime600 = exports.lime600 = '#c0ca33';
	var lime700 = exports.lime700 = '#afb42b';
	var lime800 = exports.lime800 = '#9e9d24';
	var lime900 = exports.lime900 = '#827717';
	var limeA100 = exports.limeA100 = '#f4ff81';
	var limeA200 = exports.limeA200 = '#eeff41';
	var limeA400 = exports.limeA400 = '#c6ff00';
	var limeA700 = exports.limeA700 = '#aeea00';
	
	var yellow50 = exports.yellow50 = '#fffde7';
	var yellow100 = exports.yellow100 = '#fff9c4';
	var yellow200 = exports.yellow200 = '#fff59d';
	var yellow300 = exports.yellow300 = '#fff176';
	var yellow400 = exports.yellow400 = '#ffee58';
	var yellow500 = exports.yellow500 = '#ffeb3b';
	var yellow600 = exports.yellow600 = '#fdd835';
	var yellow700 = exports.yellow700 = '#fbc02d';
	var yellow800 = exports.yellow800 = '#f9a825';
	var yellow900 = exports.yellow900 = '#f57f17';
	var yellowA100 = exports.yellowA100 = '#ffff8d';
	var yellowA200 = exports.yellowA200 = '#ffff00';
	var yellowA400 = exports.yellowA400 = '#ffea00';
	var yellowA700 = exports.yellowA700 = '#ffd600';
	
	var amber50 = exports.amber50 = '#fff8e1';
	var amber100 = exports.amber100 = '#ffecb3';
	var amber200 = exports.amber200 = '#ffe082';
	var amber300 = exports.amber300 = '#ffd54f';
	var amber400 = exports.amber400 = '#ffca28';
	var amber500 = exports.amber500 = '#ffc107';
	var amber600 = exports.amber600 = '#ffb300';
	var amber700 = exports.amber700 = '#ffa000';
	var amber800 = exports.amber800 = '#ff8f00';
	var amber900 = exports.amber900 = '#ff6f00';
	var amberA100 = exports.amberA100 = '#ffe57f';
	var amberA200 = exports.amberA200 = '#ffd740';
	var amberA400 = exports.amberA400 = '#ffc400';
	var amberA700 = exports.amberA700 = '#ffab00';
	
	var orange50 = exports.orange50 = '#fff3e0';
	var orange100 = exports.orange100 = '#ffe0b2';
	var orange200 = exports.orange200 = '#ffcc80';
	var orange300 = exports.orange300 = '#ffb74d';
	var orange400 = exports.orange400 = '#ffa726';
	var orange500 = exports.orange500 = '#ff9800';
	var orange600 = exports.orange600 = '#fb8c00';
	var orange700 = exports.orange700 = '#f57c00';
	var orange800 = exports.orange800 = '#ef6c00';
	var orange900 = exports.orange900 = '#e65100';
	var orangeA100 = exports.orangeA100 = '#ffd180';
	var orangeA200 = exports.orangeA200 = '#ffab40';
	var orangeA400 = exports.orangeA400 = '#ff9100';
	var orangeA700 = exports.orangeA700 = '#ff6d00';
	
	var deepOrange50 = exports.deepOrange50 = '#fbe9e7';
	var deepOrange100 = exports.deepOrange100 = '#ffccbc';
	var deepOrange200 = exports.deepOrange200 = '#ffab91';
	var deepOrange300 = exports.deepOrange300 = '#ff8a65';
	var deepOrange400 = exports.deepOrange400 = '#ff7043';
	var deepOrange500 = exports.deepOrange500 = '#ff5722';
	var deepOrange600 = exports.deepOrange600 = '#f4511e';
	var deepOrange700 = exports.deepOrange700 = '#e64a19';
	var deepOrange800 = exports.deepOrange800 = '#d84315';
	var deepOrange900 = exports.deepOrange900 = '#bf360c';
	var deepOrangeA100 = exports.deepOrangeA100 = '#ff9e80';
	var deepOrangeA200 = exports.deepOrangeA200 = '#ff6e40';
	var deepOrangeA400 = exports.deepOrangeA400 = '#ff3d00';
	var deepOrangeA700 = exports.deepOrangeA700 = '#dd2c00';
	
	var brown50 = exports.brown50 = '#efebe9';
	var brown100 = exports.brown100 = '#d7ccc8';
	var brown200 = exports.brown200 = '#bcaaa4';
	var brown300 = exports.brown300 = '#a1887f';
	var brown400 = exports.brown400 = '#8d6e63';
	var brown500 = exports.brown500 = '#795548';
	var brown600 = exports.brown600 = '#6d4c41';
	var brown700 = exports.brown700 = '#5d4037';
	var brown800 = exports.brown800 = '#4e342e';
	var brown900 = exports.brown900 = '#3e2723';
	
	var blueGrey50 = exports.blueGrey50 = '#eceff1';
	var blueGrey100 = exports.blueGrey100 = '#cfd8dc';
	var blueGrey200 = exports.blueGrey200 = '#b0bec5';
	var blueGrey300 = exports.blueGrey300 = '#90a4ae';
	var blueGrey400 = exports.blueGrey400 = '#78909c';
	var blueGrey500 = exports.blueGrey500 = '#607d8b';
	var blueGrey600 = exports.blueGrey600 = '#546e7a';
	var blueGrey700 = exports.blueGrey700 = '#455a64';
	var blueGrey800 = exports.blueGrey800 = '#37474f';
	var blueGrey900 = exports.blueGrey900 = '#263238';
	
	var grey50 = exports.grey50 = '#fafafa';
	var grey100 = exports.grey100 = '#f5f5f5';
	var grey200 = exports.grey200 = '#eeeeee';
	var grey300 = exports.grey300 = '#e0e0e0';
	var grey400 = exports.grey400 = '#bdbdbd';
	var grey500 = exports.grey500 = '#9e9e9e';
	var grey600 = exports.grey600 = '#757575';
	var grey700 = exports.grey700 = '#616161';
	var grey800 = exports.grey800 = '#424242';
	var grey900 = exports.grey900 = '#212121';
	
	var black = exports.black = '#000000';
	var white = exports.white = '#ffffff';
	
	var transparent = exports.transparent = 'rgba(0, 0, 0, 0)';
	var fullBlack = exports.fullBlack = 'rgba(0, 0, 0, 1)';
	var darkBlack = exports.darkBlack = 'rgba(0, 0, 0, 0.87)';
	var lightBlack = exports.lightBlack = 'rgba(0, 0, 0, 0.54)';
	var minBlack = exports.minBlack = 'rgba(0, 0, 0, 0.26)';
	var faintBlack = exports.faintBlack = 'rgba(0, 0, 0, 0.12)';
	var fullWhite = exports.fullWhite = 'rgba(255, 255, 255, 1)';
	var darkWhite = exports.darkWhite = 'rgba(255, 255, 255, 0.87)';
	var lightWhite = exports.lightWhite = 'rgba(255, 255, 255, 0.54)';

/***/ }),
/* 352 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  iconSize: 24,
	
	  desktopGutter: 24,
	  desktopGutterMore: 32,
	  desktopGutterLess: 16,
	  desktopGutterMini: 8,
	  desktopKeylineIncrement: 64,
	  desktopDropDownMenuItemHeight: 32,
	  desktopDropDownMenuFontSize: 15,
	  desktopDrawerMenuItemHeight: 48,
	  desktopSubheaderHeight: 48,
	  desktopToolbarHeight: 56
	};

/***/ }),
/* 353 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = {
	  menu: 1000,
	  appBar: 1100,
	  drawerOverlay: 1200,
	  drawer: 1300,
	  dialogOverlay: 1400,
	  dialog: 1500,
	  layer: 2000,
	  popover: 2100,
	  snackbar: 2900,
	  tooltip: 3000
	};

/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof2 = __webpack_require__(246);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	exports.default = function (muiTheme) {
	  var isClient = typeof navigator !== 'undefined';
	  var userAgent = muiTheme.userAgent;
	
	  if (userAgent === undefined && isClient) {
	    userAgent = navigator.userAgent;
	  }
	
	  if (userAgent === undefined && !hasWarnedAboutUserAgent) {
	    process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: userAgent should be supplied in the muiTheme context\n      for server-side rendering.') : void 0;
	
	    hasWarnedAboutUserAgent = true;
	  }
	
	  if (userAgent === false) {
	    // Disabled autoprefixer
	    return null;
	  } else if (userAgent === 'all' || userAgent === undefined) {
	    // Prefix for all user agent
	    return function (style) {
	      var isFlex = ['flex', 'inline-flex'].indexOf(style.display) !== -1;
	      var stylePrefixed = _inlineStylePrefixer2.default.prefixAll(style);
	
	      if (isFlex) {
	        var display = stylePrefixed.display;
	        if (isClient) {
	          // We can't apply this join with react-dom:
	          // #https://github.com/facebook/react/issues/6467
	          stylePrefixed.display = display[display.length - 1];
	        } else {
	          stylePrefixed.display = display.join('; display: ');
	        }
	      }
	
	      return stylePrefixed;
	    };
	  } else {
	    var _ret = function () {
	      var prefixer = new _inlineStylePrefixer2.default({
	        userAgent: userAgent
	      });
	
	      return {
	        v: function v(style) {
	          return prefixer.prefix(style);
	        }
	      };
	    }();
	
	    if ((typeof _ret === 'undefined' ? 'undefined' : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
	  }
	};
	
	var _inlineStylePrefixer = __webpack_require__(355);
	
	var _inlineStylePrefixer2 = _interopRequireDefault(_inlineStylePrefixer);
	
	var _warning = __webpack_require__(289);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var hasWarnedAboutUserAgent = false;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	// special flexbox specifications
	
	
	var _prefixAll2 = __webpack_require__(356);
	
	var _prefixAll3 = _interopRequireDefault(_prefixAll2);
	
	var _getBrowserInformation = __webpack_require__(373);
	
	var _getBrowserInformation2 = _interopRequireDefault(_getBrowserInformation);
	
	var _getPrefixedKeyframes = __webpack_require__(376);
	
	var _getPrefixedKeyframes2 = _interopRequireDefault(_getPrefixedKeyframes);
	
	var _capitalizeString = __webpack_require__(358);
	
	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
	
	var _sortPrefixedStyle = __webpack_require__(359);
	
	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);
	
	var _prefixProps = __webpack_require__(377);
	
	var _prefixProps2 = _interopRequireDefault(_prefixProps);
	
	var _position = __webpack_require__(378);
	
	var _position2 = _interopRequireDefault(_position);
	
	var _calc = __webpack_require__(380);
	
	var _calc2 = _interopRequireDefault(_calc);
	
	var _zoomCursor = __webpack_require__(381);
	
	var _zoomCursor2 = _interopRequireDefault(_zoomCursor);
	
	var _grabCursor = __webpack_require__(382);
	
	var _grabCursor2 = _interopRequireDefault(_grabCursor);
	
	var _flex = __webpack_require__(383);
	
	var _flex2 = _interopRequireDefault(_flex);
	
	var _sizing = __webpack_require__(384);
	
	var _sizing2 = _interopRequireDefault(_sizing);
	
	var _gradient = __webpack_require__(385);
	
	var _gradient2 = _interopRequireDefault(_gradient);
	
	var _transition = __webpack_require__(386);
	
	var _transition2 = _interopRequireDefault(_transition);
	
	var _flexboxIE = __webpack_require__(388);
	
	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);
	
	var _flexboxOld = __webpack_require__(389);
	
	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var plugins = [_position2.default, _calc2.default, _zoomCursor2.default, _grabCursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default,
	// this must be run AFTER the flexbox specs
	_flex2.default];
	
	var Prefixer = function () {
	  /**
	   * Instantiante a new prefixer
	   * @param {string} userAgent - userAgent to gather prefix information according to caniuse.com
	   * @param {string} keepUnprefixed - keeps unprefixed properties and values
	   */
	
	  function Prefixer() {
	    var _this = this;
	
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, Prefixer);
	
	    var defaultUserAgent = typeof navigator !== 'undefined' ? navigator.userAgent : undefined;
	
	    this._userAgent = options.userAgent || defaultUserAgent;
	    this._keepUnprefixed = options.keepUnprefixed || false;
	
	    this._browserInfo = (0, _getBrowserInformation2.default)(this._userAgent);
	
	    // Checks if the userAgent was resolved correctly
	    if (this._browserInfo && this._browserInfo.prefix) {
	      // set additional prefix information
	      this.cssPrefix = this._browserInfo.prefix.css;
	      this.jsPrefix = this._browserInfo.prefix.inline;
	      this.prefixedKeyframes = (0, _getPrefixedKeyframes2.default)(this._browserInfo);
	    } else {
	      this._usePrefixAllFallback = true;
	      return false;
	    }
	
	    var data = this._browserInfo.browser && _prefixProps2.default[this._browserInfo.browser];
	    if (data) {
	      this._requiresPrefix = Object.keys(data).filter(function (key) {
	        return data[key] >= _this._browserInfo.version;
	      }).reduce(function (result, name) {
	        result[name] = true;
	        return result;
	      }, {});
	      this._hasPropsRequiringPrefix = Object.keys(this._requiresPrefix).length > 0;
	    } else {
	      this._usePrefixAllFallback = true;
	    }
	  }
	
	  /**
	   * Returns a prefixed version of the style object
	   * @param {Object} styles - Style object that gets prefixed properties added
	   * @returns {Object} - Style object with prefixed properties and values
	   */
	
	
	  _createClass(Prefixer, [{
	    key: 'prefix',
	    value: function prefix(styles) {
	      var _this2 = this;
	
	      // use prefixAll as fallback if userAgent can not be resolved
	      if (this._usePrefixAllFallback) {
	        return (0, _prefixAll3.default)(styles);
	      }
	
	      // only add prefixes if needed
	      if (!this._hasPropsRequiringPrefix) {
	        return styles;
	      }
	
	      Object.keys(styles).forEach(function (property) {
	        var value = styles[property];
	        if (value instanceof Object && !Array.isArray(value)) {
	          // recurse through nested style objects
	          styles[property] = _this2.prefix(value);
	        } else {
	          // add prefixes if needed
	          if (_this2._requiresPrefix[property]) {
	            styles[_this2.jsPrefix + (0, _capitalizeString2.default)(property)] = value;
	            if (!_this2._keepUnprefixed) {
	              delete styles[property];
	            }
	          }
	        }
	      });
	
	      Object.keys(styles).forEach(function (property) {
	        [].concat(styles[property]).forEach(function (value) {
	          // resolve plugins
	          plugins.forEach(function (plugin) {
	            // generates a new plugin interface with current data
	            assignStyles(styles, plugin({
	              property: property,
	              value: value,
	              styles: styles,
	              browserInfo: _this2._browserInfo,
	              prefix: {
	                js: _this2.jsPrefix,
	                css: _this2.cssPrefix,
	                keyframes: _this2.prefixedKeyframes
	              },
	              keepUnprefixed: _this2._keepUnprefixed,
	              requiresPrefix: _this2._requiresPrefix
	            }), value, _this2._keepUnprefixed);
	          });
	        });
	      });
	
	      return (0, _sortPrefixedStyle2.default)(styles);
	    }
	
	    /**
	     * Returns a prefixed version of the style object using all vendor prefixes
	     * @param {Object} styles - Style object that gets prefixed properties added
	     * @returns {Object} - Style object with prefixed properties and values
	     */
	
	  }], [{
	    key: 'prefixAll',
	    value: function prefixAll(styles) {
	      return (0, _prefixAll3.default)(styles);
	    }
	  }]);
	
	  return Prefixer;
	}();
	
	exports.default = Prefixer;
	
	
	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var value = arguments[2];
	  var keepUnprefixed = arguments[3];
	
	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (val) {
	        if (base[property].indexOf(val) === -1) {
	          base[property].splice(baseValue.indexOf(value), keepUnprefixed ? 0 : 1, val);
	        }
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = prefixAll;
	
	var _prefixProps = __webpack_require__(357);
	
	var _prefixProps2 = _interopRequireDefault(_prefixProps);
	
	var _capitalizeString = __webpack_require__(358);
	
	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
	
	var _sortPrefixedStyle = __webpack_require__(359);
	
	var _sortPrefixedStyle2 = _interopRequireDefault(_sortPrefixedStyle);
	
	var _position = __webpack_require__(361);
	
	var _position2 = _interopRequireDefault(_position);
	
	var _calc = __webpack_require__(362);
	
	var _calc2 = _interopRequireDefault(_calc);
	
	var _cursor = __webpack_require__(365);
	
	var _cursor2 = _interopRequireDefault(_cursor);
	
	var _flex = __webpack_require__(366);
	
	var _flex2 = _interopRequireDefault(_flex);
	
	var _sizing = __webpack_require__(367);
	
	var _sizing2 = _interopRequireDefault(_sizing);
	
	var _gradient = __webpack_require__(368);
	
	var _gradient2 = _interopRequireDefault(_gradient);
	
	var _transition = __webpack_require__(369);
	
	var _transition2 = _interopRequireDefault(_transition);
	
	var _flexboxIE = __webpack_require__(371);
	
	var _flexboxIE2 = _interopRequireDefault(_flexboxIE);
	
	var _flexboxOld = __webpack_require__(372);
	
	var _flexboxOld2 = _interopRequireDefault(_flexboxOld);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// special flexbox specifications
	
	
	var plugins = [_position2.default, _calc2.default, _cursor2.default, _sizing2.default, _gradient2.default, _transition2.default, _flexboxIE2.default, _flexboxOld2.default, _flex2.default];
	
	/**
	 * Returns a prefixed version of the style object using all vendor prefixes
	 * @param {Object} styles - Style object that gets prefixed properties added
	 * @returns {Object} - Style object with prefixed properties and values
	 */
	function prefixAll(styles) {
	  Object.keys(styles).forEach(function (property) {
	    var value = styles[property];
	    if (value instanceof Object && !Array.isArray(value)) {
	      // recurse through nested style objects
	      styles[property] = prefixAll(value);
	    } else {
	      Object.keys(_prefixProps2.default).forEach(function (prefix) {
	        var properties = _prefixProps2.default[prefix];
	        // add prefixes if needed
	        if (properties[property]) {
	          styles[prefix + (0, _capitalizeString2.default)(property)] = value;
	        }
	      });
	    }
	  });
	
	  Object.keys(styles).forEach(function (property) {
	    [].concat(styles[property]).forEach(function (value, index) {
	      // resolve every special plugins
	      plugins.forEach(function (plugin) {
	        return assignStyles(styles, plugin(property, value));
	      });
	    });
	  });
	
	  return (0, _sortPrefixedStyle2.default)(styles);
	}
	
	function assignStyles(base) {
	  var extend = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  Object.keys(extend).forEach(function (property) {
	    var baseValue = base[property];
	    if (Array.isArray(baseValue)) {
	      [].concat(extend[property]).forEach(function (value) {
	        var valueIndex = baseValue.indexOf(value);
	        if (valueIndex > -1) {
	          base[property].splice(valueIndex, 1);
	        }
	        base[property].push(value);
	      });
	    } else {
	      base[property] = extend[property];
	    }
	  });
	}
	module.exports = exports['default'];

/***/ }),
/* 357 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };
	module.exports = exports["default"];

/***/ }),
/* 358 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	// helper to capitalize strings
	
	exports.default = function (str) {
	  return str.charAt(0).toUpperCase() + str.slice(1);
	};
	
	module.exports = exports["default"];

/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sortPrefixedStyle;
	
	var _isPrefixedProperty = __webpack_require__(360);
	
	var _isPrefixedProperty2 = _interopRequireDefault(_isPrefixedProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function sortPrefixedStyle(style) {
	  return Object.keys(style).sort(function (left, right) {
	    if ((0, _isPrefixedProperty2.default)(left) && !(0, _isPrefixedProperty2.default)(right)) {
	      return -1;
	    } else if (!(0, _isPrefixedProperty2.default)(left) && (0, _isPrefixedProperty2.default)(right)) {
	      return 1;
	    }
	    return 0;
	  }).reduce(function (sortedStyle, prop) {
	    sortedStyle[prop] = style[prop];
	    return sortedStyle;
	  }, {});
	}
	module.exports = exports['default'];

/***/ }),
/* 360 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (property) {
	  return property.match(/^(Webkit|Moz|O|ms)/) !== null;
	};
	
	module.exports = exports["default"];

/***/ }),
/* 361 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;
	function position(property, value) {
	  if (property === 'position' && value === 'sticky') {
	    return { position: ['-webkit-sticky', 'sticky'] };
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;
	
	var _joinPrefixedValue = __webpack_require__(363);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	var _isPrefixedValue = __webpack_require__(364);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function calc(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('calc(') > -1) {
	    return (0, _joinPrefixedValue2.default)(property, value, function (prefix, value) {
	      return value.replace(/calc\(/g, prefix + 'calc(');
	    });
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 363 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	// returns a style object with a single concated prefixed value string
	
	exports.default = function (property, value) {
	  var replacer = arguments.length <= 2 || arguments[2] === undefined ? function (prefix, value) {
	    return prefix + value;
	  } : arguments[2];
	  return _defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
	    return replacer(prefix, value);
	  }));
	};
	
	module.exports = exports['default'];

/***/ }),
/* 364 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (value) {
	  if (Array.isArray(value)) value = value.join(',');
	
	  return value.match(/-webkit-|-moz-|-ms-/) !== null;
	};
	
	module.exports = exports['default'];

/***/ }),
/* 365 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = cursor;
	
	var _joinPrefixedValue = __webpack_require__(363);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = {
	  'zoom-in': true,
	  'zoom-out': true,
	  grab: true,
	  grabbing: true
	};
	
	function cursor(property, value) {
	  if (property === 'cursor' && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 366 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	var values = { flex: true, 'inline-flex': true };
	
	function flex(property, value) {
	  if (property === 'display' && values[value]) {
	    return {
	      display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
	    };
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;
	
	var _joinPrefixedValue = __webpack_require__(363);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};
	
	function sizing(property, value) {
	  if (properties[property] && values[value]) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;
	
	var _joinPrefixedValue = __webpack_require__(363);
	
	var _joinPrefixedValue2 = _interopRequireDefault(_joinPrefixedValue);
	
	var _isPrefixedValue = __webpack_require__(364);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;
	
	function gradient(property, value) {
	  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.match(values) !== null) {
	    return (0, _joinPrefixedValue2.default)(property, value);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = transition;
	
	var _hyphenateStyleName = __webpack_require__(370);
	
	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
	
	var _capitalizeString = __webpack_require__(358);
	
	var _capitalizeString2 = _interopRequireDefault(_capitalizeString);
	
	var _isPrefixedValue = __webpack_require__(364);
	
	var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);
	
	var _prefixProps = __webpack_require__(357);
	
	var _prefixProps2 = _interopRequireDefault(_prefixProps);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var properties = {
	  transition: true,
	  transitionProperty: true,
	  WebkitTransition: true,
	  WebkitTransitionProperty: true
	};
	
	function transition(property, value) {
	  // also check for already prefixed transitions
	  if (typeof value === 'string' && properties[property]) {
	    var _ref2;
	
	    var outputValue = prefixValue(value);
	    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
	      return value.match(/-moz-|-ms-/) === null;
	    }).join(',');
	
	    // if the property is already prefixed
	    if (property.indexOf('Webkit') > -1) {
	      return _defineProperty({}, property, webkitOutput);
	    }
	
	    return _ref2 = {}, _defineProperty(_ref2, 'Webkit' + (0, _capitalizeString2.default)(property), webkitOutput), _defineProperty(_ref2, property, outputValue), _ref2;
	  }
	}
	
	function prefixValue(value) {
	  if ((0, _isPrefixedValue2.default)(value)) {
	    return value;
	  }
	
	  // only split multi values, not cubic beziers
	  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
	
	  // iterate each single value and check for transitioned properties
	  // that need to be prefixed as well
	  multipleValues.forEach(function (val, index) {
	    multipleValues[index] = Object.keys(_prefixProps2.default).reduce(function (out, prefix) {
	      var dashCasePrefix = '-' + prefix.toLowerCase() + '-';
	
	      Object.keys(_prefixProps2.default[prefix]).forEach(function (prop) {
	        var dashCaseProperty = (0, _hyphenateStyleName2.default)(prop);
	
	        if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
	          // join all prefixes and create a new value
	          out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
	        }
	      });
	      return out;
	    }, val);
	  });
	
	  return multipleValues.join(',');
	}
	module.exports = exports['default'];

/***/ }),
/* 370 */
/***/ (function(module, exports) {

	'use strict';
	
	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};
	
	function hyphenateStyleName(string) {
	    return string in cache
	    ? cache[string]
	    : cache[string] = string
	      .replace(uppercasePattern, '-$&')
	      .toLowerCase()
	      .replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;


/***/ }),
/* 371 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};
	
	function flexboxIE(property, value) {
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 372 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple'
	};
	
	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};
	
	function flexboxOld(property, value) {
	  if (property === 'flexDirection' && typeof value === 'string') {
	    return {
	      WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	      WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	    };
	  }
	  if (alternativeProps[property]) {
	    return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 373 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _bowser = __webpack_require__(374);
	
	var _bowser2 = _interopRequireDefault(_bowser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var vendorPrefixes = {
	  Webkit: ['chrome', 'safari', 'ios', 'android', 'phantom', 'opera', 'webos', 'blackberry', 'bada', 'tizen', 'chromium', 'vivaldi'],
	  Moz: ['firefox', 'seamonkey', 'sailfish'],
	  ms: ['msie', 'msedge']
	};
	var browsers = {
	  chrome: [['chrome'], ['chromium']],
	  safari: [['safari']],
	  firefox: [['firefox']],
	  edge: [['msedge']],
	  opera: [['opera'], ['vivaldi']],
	  ios_saf: [['ios', 'mobile'], ['ios', 'tablet']],
	  ie: [['msie']],
	  op_mini: [['opera', 'mobile'], ['opera', 'tablet']],
	  and_uc: [['android', 'mobile'], ['android', 'tablet']],
	  android: [['android', 'mobile'], ['android', 'tablet']]
	};
	
	var browserByInfo = function browserByInfo(info) {
	  if (info.firefox) {
	    return 'firefox';
	  }
	  var name = '';
	
	  Object.keys(browsers).forEach(function (browser) {
	    browsers[browser].forEach(function (condition) {
	      var match = 0;
	      condition.forEach(function (single) {
	        if (info[single]) {
	          match += 1;
	        }
	      });
	      if (condition.length === match) {
	        name = browser;
	      }
	    });
	  });
	
	  return name;
	};
	
	/**
	 * Uses bowser to get default browser information such as version and name
	 * Evaluates bowser info and adds vendorPrefix information
	 * @param {string} userAgent - userAgent that gets evaluated
	 */
	
	exports.default = function (userAgent) {
	  if (!userAgent) {
	    return false;
	  }
	  var info = _bowser2.default._detect(userAgent);
	
	  Object.keys(vendorPrefixes).forEach(function (prefix) {
	    vendorPrefixes[prefix].forEach(function (browser) {
	      if (info[browser]) {
	        info.prefix = {
	          inline: prefix,
	          css: '-' + prefix.toLowerCase() + '-'
	        };
	      }
	    });
	  });
	
	  info.browser = browserByInfo(info);
	
	  // For cordova IOS 8 the version is missing, set truncated osversion to prevent NaN
	  info.version = info.version ? parseFloat(info.version) : parseInt(parseFloat(info.osversion), 10);
	  info.osversion = parseFloat(info.osversion);
	
	  // iOS forces all browsers to use Safari under the hood
	  // as the Safari version seems to match the iOS version
	  // we just explicitely use the osversion instead
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/72
	  if (info.browser === 'ios_saf' && info.version > info.osversion) {
	    info.version = info.osversion;
	    info.safari = true;
	  }
	
	  // seperate native android chrome
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/45
	  if (info.browser === 'android' && info.chrome && info.version > 37) {
	    info.browser = 'and_chr';
	  }
	
	  // For android < 4.4 we want to check the osversion
	  // not the chrome version, see issue #26
	  // https://github.com/rofrischmann/inline-style-prefixer/issues/26
	  if (info.browser === 'android' && info.osversion < 5) {
	    info.version = info.osversion;
	  }
	
	  return info;
	};
	
	module.exports = exports['default'];

/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	/*!
	 * Bowser - a browser detector
	 * https://github.com/ded/bowser
	 * MIT License | (c) Dustin Diaz 2015
	 */
	
	!function (root, name, definition) {
	  if (typeof module != 'undefined' && module.exports) module.exports = definition()
	  else if (true) __webpack_require__(375)(name, definition)
	  else root[name] = definition()
	}(this, 'bowser', function () {
	  /**
	    * See useragents.js for examples of navigator.userAgent
	    */
	
	  var t = true
	
	  function detect(ua) {
	
	    function getFirstMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[1]) || '';
	    }
	
	    function getSecondMatch(regex) {
	      var match = ua.match(regex);
	      return (match && match.length > 1 && match[2]) || '';
	    }
	
	    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
	      , likeAndroid = /like android/i.test(ua)
	      , android = !likeAndroid && /android/i.test(ua)
	      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
	      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
	      , chromeos = /CrOS/.test(ua)
	      , silk = /silk/i.test(ua)
	      , sailfish = /sailfish/i.test(ua)
	      , tizen = /tizen/i.test(ua)
	      , webos = /(web|hpw)(o|0)s/i.test(ua)
	      , windowsphone = /windows phone/i.test(ua)
	      , samsungBrowser = /SamsungBrowser/i.test(ua)
	      , windows = !windowsphone && /windows/i.test(ua)
	      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
	      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
	      , edgeVersion = getSecondMatch(/edg([ea]|ios)\/(\d+(\.\d+)?)/i)
	      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
	      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)
	      , mobile = !tablet && /[^-]mobi/i.test(ua)
	      , xbox = /xbox/i.test(ua)
	      , result
	
	    if (/opera/i.test(ua)) {
	      //  an old Opera
	      result = {
	        name: 'Opera'
	      , opera: t
	      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
	      }
	    } else if (/opr\/|opios/i.test(ua)) {
	      // a new Opera
	      result = {
	        name: 'Opera'
	        , opera: t
	        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/SamsungBrowser/i.test(ua)) {
	      result = {
	        name: 'Samsung Internet for Android'
	        , samsungBrowser: t
	        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/Whale/i.test(ua)) {
	      result = {
	        name: 'NAVER Whale browser'
	        , whale: t
	        , version: getFirstMatch(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/MZBrowser/i.test(ua)) {
	      result = {
	        name: 'MZ Browser'
	        , mzbrowser: t
	        , version: getFirstMatch(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/coast/i.test(ua)) {
	      result = {
	        name: 'Opera Coast'
	        , coast: t
	        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/focus/i.test(ua)) {
	      result = {
	        name: 'Focus'
	        , focus: t
	        , version: getFirstMatch(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/yabrowser/i.test(ua)) {
	      result = {
	        name: 'Yandex Browser'
	      , yandexbrowser: t
	      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/ucbrowser/i.test(ua)) {
	      result = {
	          name: 'UC Browser'
	        , ucbrowser: t
	        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/mxios/i.test(ua)) {
	      result = {
	        name: 'Maxthon'
	        , maxthon: t
	        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/epiphany/i.test(ua)) {
	      result = {
	        name: 'Epiphany'
	        , epiphany: t
	        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/puffin/i.test(ua)) {
	      result = {
	        name: 'Puffin'
	        , puffin: t
	        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
	      }
	    }
	    else if (/sleipnir/i.test(ua)) {
	      result = {
	        name: 'Sleipnir'
	        , sleipnir: t
	        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (/k-meleon/i.test(ua)) {
	      result = {
	        name: 'K-Meleon'
	        , kMeleon: t
	        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
	      }
	    }
	    else if (windowsphone) {
	      result = {
	        name: 'Windows Phone'
	      , osname: 'Windows Phone'
	      , windowsphone: t
	      }
	      if (edgeVersion) {
	        result.msedge = t
	        result.version = edgeVersion
	      }
	      else {
	        result.msie = t
	        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/msie|trident/i.test(ua)) {
	      result = {
	        name: 'Internet Explorer'
	      , msie: t
	      , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
	      }
	    } else if (chromeos) {
	      result = {
	        name: 'Chrome'
	      , osname: 'Chrome OS'
	      , chromeos: t
	      , chromeBook: t
	      , chrome: t
	      , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    } else if (/edg([ea]|ios)/i.test(ua)) {
	      result = {
	        name: 'Microsoft Edge'
	      , msedge: t
	      , version: edgeVersion
	      }
	    }
	    else if (/vivaldi/i.test(ua)) {
	      result = {
	        name: 'Vivaldi'
	        , vivaldi: t
	        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (sailfish) {
	      result = {
	        name: 'Sailfish'
	      , osname: 'Sailfish OS'
	      , sailfish: t
	      , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/seamonkey\//i.test(ua)) {
	      result = {
	        name: 'SeaMonkey'
	      , seamonkey: t
	      , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/firefox|iceweasel|fxios/i.test(ua)) {
	      result = {
	        name: 'Firefox'
	      , firefox: t
	      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
	      }
	      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
	        result.firefoxos = t
	        result.osname = 'Firefox OS'
	      }
	    }
	    else if (silk) {
	      result =  {
	        name: 'Amazon Silk'
	      , silk: t
	      , version : getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/phantom/i.test(ua)) {
	      result = {
	        name: 'PhantomJS'
	      , phantom: t
	      , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/slimerjs/i.test(ua)) {
	      result = {
	        name: 'SlimerJS'
	        , slimer: t
	        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
	      result = {
	        name: 'BlackBerry'
	      , osname: 'BlackBerry OS'
	      , blackberry: t
	      , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (webos) {
	      result = {
	        name: 'WebOS'
	      , osname: 'WebOS'
	      , webos: t
	      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
	      };
	      /touchpad\//i.test(ua) && (result.touchpad = t)
	    }
	    else if (/bada/i.test(ua)) {
	      result = {
	        name: 'Bada'
	      , osname: 'Bada'
	      , bada: t
	      , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
	      };
	    }
	    else if (tizen) {
	      result = {
	        name: 'Tizen'
	      , osname: 'Tizen'
	      , tizen: t
	      , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
	      };
	    }
	    else if (/qupzilla/i.test(ua)) {
	      result = {
	        name: 'QupZilla'
	        , qupzilla: t
	        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
	      }
	    }
	    else if (/chromium/i.test(ua)) {
	      result = {
	        name: 'Chromium'
	        , chromium: t
	        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
	      }
	    }
	    else if (/chrome|crios|crmo/i.test(ua)) {
	      result = {
	        name: 'Chrome'
	        , chrome: t
	        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
	      }
	    }
	    else if (android) {
	      result = {
	        name: 'Android'
	        , version: versionIdentifier
	      }
	    }
	    else if (/safari|applewebkit/i.test(ua)) {
	      result = {
	        name: 'Safari'
	      , safari: t
	      }
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if (iosdevice) {
	      result = {
	        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
	      }
	      // WTF: version is not part of user agent in web apps
	      if (versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    }
	    else if(/googlebot/i.test(ua)) {
	      result = {
	        name: 'Googlebot'
	      , googlebot: t
	      , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
	      }
	    }
	    else {
	      result = {
	        name: getFirstMatch(/^(.*)\/(.*) /),
	        version: getSecondMatch(/^(.*)\/(.*) /)
	     };
	   }
	
	    // set webkit or gecko flag for browsers based on these engines
	    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
	      if (/(apple)?webkit\/537\.36/i.test(ua)) {
	        result.name = result.name || "Blink"
	        result.blink = t
	      } else {
	        result.name = result.name || "Webkit"
	        result.webkit = t
	      }
	      if (!result.version && versionIdentifier) {
	        result.version = versionIdentifier
	      }
	    } else if (!result.opera && /gecko\//i.test(ua)) {
	      result.name = result.name || "Gecko"
	      result.gecko = t
	      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
	    }
	
	    // set OS flags for platforms that have multiple browsers
	    if (!result.windowsphone && (android || result.silk)) {
	      result.android = t
	      result.osname = 'Android'
	    } else if (!result.windowsphone && iosdevice) {
	      result[iosdevice] = t
	      result.ios = t
	      result.osname = 'iOS'
	    } else if (mac) {
	      result.mac = t
	      result.osname = 'macOS'
	    } else if (xbox) {
	      result.xbox = t
	      result.osname = 'Xbox'
	    } else if (windows) {
	      result.windows = t
	      result.osname = 'Windows'
	    } else if (linux) {
	      result.linux = t
	      result.osname = 'Linux'
	    }
	
	    function getWindowsVersion (s) {
	      switch (s) {
	        case 'NT': return 'NT'
	        case 'XP': return 'XP'
	        case 'NT 5.0': return '2000'
	        case 'NT 5.1': return 'XP'
	        case 'NT 5.2': return '2003'
	        case 'NT 6.0': return 'Vista'
	        case 'NT 6.1': return '7'
	        case 'NT 6.2': return '8'
	        case 'NT 6.3': return '8.1'
	        case 'NT 10.0': return '10'
	        default: return undefined
	      }
	    }
	
	    // OS version extraction
	    var osVersion = '';
	    if (result.windows) {
	      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i))
	    } else if (result.windowsphone) {
	      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
	    } else if (result.mac) {
	      osVersion = getFirstMatch(/Mac OS X (\d+([_\.\s]\d+)*)/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (iosdevice) {
	      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
	      osVersion = osVersion.replace(/[_\s]/g, '.');
	    } else if (android) {
	      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
	    } else if (result.webos) {
	      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
	    } else if (result.blackberry) {
	      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
	    } else if (result.bada) {
	      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
	    } else if (result.tizen) {
	      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
	    }
	    if (osVersion) {
	      result.osversion = osVersion;
	    }
	
	    // device type extraction
	    var osMajorVersion = !result.windows && osVersion.split('.')[0];
	    if (
	         tablet
	      || nexusTablet
	      || iosdevice == 'ipad'
	      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
	      || result.silk
	    ) {
	      result.tablet = t
	    } else if (
	         mobile
	      || iosdevice == 'iphone'
	      || iosdevice == 'ipod'
	      || android
	      || nexusMobile
	      || result.blackberry
	      || result.webos
	      || result.bada
	    ) {
	      result.mobile = t
	    }
	
	    // Graded Browser Support
	    // http://developer.yahoo.com/yui/articles/gbs
	    if (result.msedge ||
	        (result.msie && result.version >= 10) ||
	        (result.yandexbrowser && result.version >= 15) ||
			    (result.vivaldi && result.version >= 1.0) ||
	        (result.chrome && result.version >= 20) ||
	        (result.samsungBrowser && result.version >= 4) ||
	        (result.whale && compareVersions([result.version, '1.0']) === 1) ||
	        (result.mzbrowser && compareVersions([result.version, '6.0']) === 1) ||
	        (result.focus && compareVersions([result.version, '1.0']) === 1) ||
	        (result.firefox && result.version >= 20.0) ||
	        (result.safari && result.version >= 6) ||
	        (result.opera && result.version >= 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
	        (result.blackberry && result.version >= 10.1)
	        || (result.chromium && result.version >= 20)
	        ) {
	      result.a = t;
	    }
	    else if ((result.msie && result.version < 10) ||
	        (result.chrome && result.version < 20) ||
	        (result.firefox && result.version < 20.0) ||
	        (result.safari && result.version < 6) ||
	        (result.opera && result.version < 10.0) ||
	        (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
	        || (result.chromium && result.version < 20)
	        ) {
	      result.c = t
	    } else result.x = t
	
	    return result
	  }
	
	  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')
	
	  bowser.test = function (browserList) {
	    for (var i = 0; i < browserList.length; ++i) {
	      var browserItem = browserList[i];
	      if (typeof browserItem=== 'string') {
	        if (browserItem in bowser) {
	          return true;
	        }
	      }
	    }
	    return false;
	  }
	
	  /**
	   * Get version precisions count
	   *
	   * @example
	   *   getVersionPrecision("1.10.3") // 3
	   *
	   * @param  {string} version
	   * @return {number}
	   */
	  function getVersionPrecision(version) {
	    return version.split(".").length;
	  }
	
	  /**
	   * Array::map polyfill
	   *
	   * @param  {Array} arr
	   * @param  {Function} iterator
	   * @return {Array}
	   */
	  function map(arr, iterator) {
	    var result = [], i;
	    if (Array.prototype.map) {
	      return Array.prototype.map.call(arr, iterator);
	    }
	    for (i = 0; i < arr.length; i++) {
	      result.push(iterator(arr[i]));
	    }
	    return result;
	  }
	
	  /**
	   * Calculate browser version weight
	   *
	   * @example
	   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
	   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
	   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
	   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
	   *
	   * @param  {Array<String>} versions versions to compare
	   * @return {Number} comparison result
	   */
	  function compareVersions(versions) {
	    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
	    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
	    var chunks = map(versions, function (version) {
	      var delta = precision - getVersionPrecision(version);
	
	      // 2) "9" -> "9.0" (for precision = 2)
	      version = version + new Array(delta + 1).join(".0");
	
	      // 3) "9.0" -> ["000000000"", "000000009"]
	      return map(version.split("."), function (chunk) {
	        return new Array(20 - chunk.length).join("0") + chunk;
	      }).reverse();
	    });
	
	    // iterate in reverse order by reversed chunks array
	    while (--precision >= 0) {
	      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
	      if (chunks[0][precision] > chunks[1][precision]) {
	        return 1;
	      }
	      else if (chunks[0][precision] === chunks[1][precision]) {
	        if (precision === 0) {
	          // all version chunks are same
	          return 0;
	        }
	      }
	      else {
	        return -1;
	      }
	    }
	  }
	
	  /**
	   * Check if browser is unsupported
	   *
	   * @example
	   *   bowser.isUnsupportedBrowser({
	   *     msie: "10",
	   *     firefox: "23",
	   *     chrome: "29",
	   *     safari: "5.1",
	   *     opera: "16",
	   *     phantom: "534"
	   *   });
	   *
	   * @param  {Object}  minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function isUnsupportedBrowser(minVersions, strictMode, ua) {
	    var _bowser = bowser;
	
	    // make strictMode param optional with ua param usage
	    if (typeof strictMode === 'string') {
	      ua = strictMode;
	      strictMode = void(0);
	    }
	
	    if (strictMode === void(0)) {
	      strictMode = false;
	    }
	    if (ua) {
	      _bowser = detect(ua);
	    }
	
	    var version = "" + _bowser.version;
	    for (var browser in minVersions) {
	      if (minVersions.hasOwnProperty(browser)) {
	        if (_bowser[browser]) {
	          if (typeof minVersions[browser] !== 'string') {
	            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
	          }
	
	          // browser version and min supported version.
	          return compareVersions([version, minVersions[browser]]) < 0;
	        }
	      }
	    }
	
	    return strictMode; // not found
	  }
	
	  /**
	   * Check if browser is supported
	   *
	   * @param  {Object} minVersions map of minimal version to browser
	   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
	   * @param  {String}  [ua] user agent string
	   * @return {Boolean}
	   */
	  function check(minVersions, strictMode, ua) {
	    return !isUnsupportedBrowser(minVersions, strictMode, ua);
	  }
	
	  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
	  bowser.compareVersions = compareVersions;
	  bowser.check = check;
	
	  /*
	   * Set our detect method to the main bowser object so we can
	   * reuse it to test other user agents.
	   * This is needed to implement future tests.
	   */
	  bowser._detect = detect;
	
	  /*
	   * Set our detect public method to the main bowser object
	   * This is needed to implement bowser in server side
	   */
	  bowser.detect = detect;
	  return bowser
	});


/***/ }),
/* 375 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 376 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (_ref) {
	  var browser = _ref.browser;
	  var version = _ref.version;
	  var prefix = _ref.prefix;
	
	  var prefixedKeyframes = 'keyframes';
	
	  if (browser === 'chrome' && version < 43 || (browser === 'safari' || browser === 'ios_saf') && version < 9 || browser === 'opera' && version < 30 || browser === 'android' && version <= 4.4 || browser === 'and_uc') {
	    prefixedKeyframes = prefix.css + prefixedKeyframes;
	  }
	  return prefixedKeyframes;
	};
	
	module.exports = exports['default'];

/***/ }),
/* 377 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = { "chrome": { "transform": 35, "transformOrigin": 35, "transformOriginX": 35, "transformOriginY": 35, "backfaceVisibility": 35, "perspective": 35, "perspectiveOrigin": 35, "transformStyle": 35, "transformOriginZ": 35, "animation": 42, "animationDelay": 42, "animationDirection": 42, "animationFillMode": 42, "animationDuration": 42, "animationIterationCount": 42, "animationName": 42, "animationPlayState": 42, "animationTimingFunction": 42, "appearance": 55, "userSelect": 55, "fontKerning": 32, "textEmphasisPosition": 55, "textEmphasis": 55, "textEmphasisStyle": 55, "textEmphasisColor": 55, "boxDecorationBreak": 55, "clipPath": 55, "maskImage": 55, "maskMode": 55, "maskRepeat": 55, "maskPosition": 55, "maskClip": 55, "maskOrigin": 55, "maskSize": 55, "maskComposite": 55, "mask": 55, "maskBorderSource": 55, "maskBorderMode": 55, "maskBorderSlice": 55, "maskBorderWidth": 55, "maskBorderOutset": 55, "maskBorderRepeat": 55, "maskBorder": 55, "maskType": 55, "textDecorationStyle": 55, "textDecorationSkip": 55, "textDecorationLine": 55, "textDecorationColor": 55, "filter": 52, "fontFeatureSettings": 47, "breakAfter": 49, "breakBefore": 49, "breakInside": 49, "columnCount": 49, "columnFill": 49, "columnGap": 49, "columnRule": 49, "columnRuleColor": 49, "columnRuleStyle": 49, "columnRuleWidth": 49, "columns": 49, "columnSpan": 49, "columnWidth": 49 }, "safari": { "flex": 8, "flexBasis": 8, "flexDirection": 8, "flexGrow": 8, "flexFlow": 8, "flexShrink": 8, "flexWrap": 8, "alignContent": 8, "alignItems": 8, "alignSelf": 8, "justifyContent": 8, "order": 8, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8, "transformOrigin": 8, "transformOriginX": 8, "transformOriginY": 8, "backfaceVisibility": 8, "perspective": 8, "perspectiveOrigin": 8, "transformStyle": 8, "transformOriginZ": 8, "animation": 8, "animationDelay": 8, "animationDirection": 8, "animationFillMode": 8, "animationDuration": 8, "animationIterationCount": 8, "animationName": 8, "animationPlayState": 8, "animationTimingFunction": 8, "appearance": 10, "userSelect": 10, "backdropFilter": 10, "fontKerning": 9, "scrollSnapType": 10, "scrollSnapPointsX": 10, "scrollSnapPointsY": 10, "scrollSnapDestination": 10, "scrollSnapCoordinate": 10, "textEmphasisPosition": 7, "textEmphasis": 7, "textEmphasisStyle": 7, "textEmphasisColor": 7, "boxDecorationBreak": 10, "clipPath": 10, "maskImage": 10, "maskMode": 10, "maskRepeat": 10, "maskPosition": 10, "maskClip": 10, "maskOrigin": 10, "maskSize": 10, "maskComposite": 10, "mask": 10, "maskBorderSource": 10, "maskBorderMode": 10, "maskBorderSlice": 10, "maskBorderWidth": 10, "maskBorderOutset": 10, "maskBorderRepeat": 10, "maskBorder": 10, "maskType": 10, "textDecorationStyle": 10, "textDecorationSkip": 10, "textDecorationLine": 10, "textDecorationColor": 10, "shapeImageThreshold": 10, "shapeImageMargin": 10, "shapeImageOutside": 10, "filter": 9, "hyphens": 10, "flowInto": 10, "flowFrom": 10, "breakBefore": 8, "breakAfter": 8, "breakInside": 8, "regionFragment": 10, "columnCount": 8, "columnFill": 8, "columnGap": 8, "columnRule": 8, "columnRuleColor": 8, "columnRuleStyle": 8, "columnRuleWidth": 8, "columns": 8, "columnSpan": 8, "columnWidth": 8 }, "firefox": { "appearance": 51, "userSelect": 51, "boxSizing": 28, "textAlignLast": 48, "textDecorationStyle": 35, "textDecorationSkip": 35, "textDecorationLine": 35, "textDecorationColor": 35, "tabSize": 51, "hyphens": 42, "fontFeatureSettings": 33, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "opera": { "flex": 16, "flexBasis": 16, "flexDirection": 16, "flexGrow": 16, "flexFlow": 16, "flexShrink": 16, "flexWrap": 16, "alignContent": 16, "alignItems": 16, "alignSelf": 16, "justifyContent": 16, "order": 16, "transform": 22, "transformOrigin": 22, "transformOriginX": 22, "transformOriginY": 22, "backfaceVisibility": 22, "perspective": 22, "perspectiveOrigin": 22, "transformStyle": 22, "transformOriginZ": 22, "animation": 29, "animationDelay": 29, "animationDirection": 29, "animationFillMode": 29, "animationDuration": 29, "animationIterationCount": 29, "animationName": 29, "animationPlayState": 29, "animationTimingFunction": 29, "appearance": 41, "userSelect": 41, "fontKerning": 19, "textEmphasisPosition": 41, "textEmphasis": 41, "textEmphasisStyle": 41, "textEmphasisColor": 41, "boxDecorationBreak": 41, "clipPath": 41, "maskImage": 41, "maskMode": 41, "maskRepeat": 41, "maskPosition": 41, "maskClip": 41, "maskOrigin": 41, "maskSize": 41, "maskComposite": 41, "mask": 41, "maskBorderSource": 41, "maskBorderMode": 41, "maskBorderSlice": 41, "maskBorderWidth": 41, "maskBorderOutset": 41, "maskBorderRepeat": 41, "maskBorder": 41, "maskType": 41, "textDecorationStyle": 41, "textDecorationSkip": 41, "textDecorationLine": 41, "textDecorationColor": 41, "filter": 39, "fontFeatureSettings": 34, "breakAfter": 36, "breakBefore": 36, "breakInside": 36, "columnCount": 36, "columnFill": 36, "columnGap": 36, "columnRule": 36, "columnRuleColor": 36, "columnRuleStyle": 36, "columnRuleWidth": 36, "columns": 36, "columnSpan": 36, "columnWidth": 36 }, "ie": { "flex": 10, "flexDirection": 10, "flexFlow": 10, "flexWrap": 10, "transform": 9, "transformOrigin": 9, "transformOriginX": 9, "transformOriginY": 9, "userSelect": 11, "wrapFlow": 11, "wrapThrough": 11, "wrapMargin": 11, "scrollSnapType": 11, "scrollSnapPointsX": 11, "scrollSnapPointsY": 11, "scrollSnapDestination": 11, "scrollSnapCoordinate": 11, "touchAction": 10, "hyphens": 11, "flowInto": 11, "flowFrom": 11, "breakBefore": 11, "breakAfter": 11, "breakInside": 11, "regionFragment": 11, "gridTemplateColumns": 11, "gridTemplateRows": 11, "gridTemplateAreas": 11, "gridTemplate": 11, "gridAutoColumns": 11, "gridAutoRows": 11, "gridAutoFlow": 11, "grid": 11, "gridRowStart": 11, "gridColumnStart": 11, "gridRowEnd": 11, "gridRow": 11, "gridColumn": 11, "gridColumnEnd": 11, "gridColumnGap": 11, "gridRowGap": 11, "gridArea": 11, "gridGap": 11, "textSizeAdjust": 11 }, "edge": { "userSelect": 14, "wrapFlow": 14, "wrapThrough": 14, "wrapMargin": 14, "scrollSnapType": 14, "scrollSnapPointsX": 14, "scrollSnapPointsY": 14, "scrollSnapDestination": 14, "scrollSnapCoordinate": 14, "hyphens": 14, "flowInto": 14, "flowFrom": 14, "breakBefore": 14, "breakAfter": 14, "breakInside": 14, "regionFragment": 14, "gridTemplateColumns": 14, "gridTemplateRows": 14, "gridTemplateAreas": 14, "gridTemplate": 14, "gridAutoColumns": 14, "gridAutoRows": 14, "gridAutoFlow": 14, "grid": 14, "gridRowStart": 14, "gridColumnStart": 14, "gridRowEnd": 14, "gridRow": 14, "gridColumn": 14, "gridColumnEnd": 14, "gridColumnGap": 14, "gridRowGap": 14, "gridArea": 14, "gridGap": 14 }, "ios_saf": { "flex": 8.1, "flexBasis": 8.1, "flexDirection": 8.1, "flexGrow": 8.1, "flexFlow": 8.1, "flexShrink": 8.1, "flexWrap": 8.1, "alignContent": 8.1, "alignItems": 8.1, "alignSelf": 8.1, "justifyContent": 8.1, "order": 8.1, "transition": 6, "transitionDelay": 6, "transitionDuration": 6, "transitionProperty": 6, "transitionTimingFunction": 6, "transform": 8.1, "transformOrigin": 8.1, "transformOriginX": 8.1, "transformOriginY": 8.1, "backfaceVisibility": 8.1, "perspective": 8.1, "perspectiveOrigin": 8.1, "transformStyle": 8.1, "transformOriginZ": 8.1, "animation": 8.1, "animationDelay": 8.1, "animationDirection": 8.1, "animationFillMode": 8.1, "animationDuration": 8.1, "animationIterationCount": 8.1, "animationName": 8.1, "animationPlayState": 8.1, "animationTimingFunction": 8.1, "appearance": 9.3, "userSelect": 9.3, "backdropFilter": 9.3, "fontKerning": 9.3, "scrollSnapType": 9.3, "scrollSnapPointsX": 9.3, "scrollSnapPointsY": 9.3, "scrollSnapDestination": 9.3, "scrollSnapCoordinate": 9.3, "boxDecorationBreak": 9.3, "clipPath": 9.3, "maskImage": 9.3, "maskMode": 9.3, "maskRepeat": 9.3, "maskPosition": 9.3, "maskClip": 9.3, "maskOrigin": 9.3, "maskSize": 9.3, "maskComposite": 9.3, "mask": 9.3, "maskBorderSource": 9.3, "maskBorderMode": 9.3, "maskBorderSlice": 9.3, "maskBorderWidth": 9.3, "maskBorderOutset": 9.3, "maskBorderRepeat": 9.3, "maskBorder": 9.3, "maskType": 9.3, "textSizeAdjust": 9.3, "textDecorationStyle": 9.3, "textDecorationSkip": 9.3, "textDecorationLine": 9.3, "textDecorationColor": 9.3, "shapeImageThreshold": 9.3, "shapeImageMargin": 9.3, "shapeImageOutside": 9.3, "filter": 9, "hyphens": 9.3, "flowInto": 9.3, "flowFrom": 9.3, "breakBefore": 8.1, "breakAfter": 8.1, "breakInside": 8.1, "regionFragment": 9.3, "columnCount": 8.1, "columnFill": 8.1, "columnGap": 8.1, "columnRule": 8.1, "columnRuleColor": 8.1, "columnRuleStyle": 8.1, "columnRuleWidth": 8.1, "columns": 8.1, "columnSpan": 8.1, "columnWidth": 8.1 }, "android": { "flex": 4.2, "flexBasis": 4.2, "flexDirection": 4.2, "flexGrow": 4.2, "flexFlow": 4.2, "flexShrink": 4.2, "flexWrap": 4.2, "alignContent": 4.2, "alignItems": 4.2, "alignSelf": 4.2, "justifyContent": 4.2, "order": 4.2, "transition": 4.2, "transitionDelay": 4.2, "transitionDuration": 4.2, "transitionProperty": 4.2, "transitionTimingFunction": 4.2, "transform": 4.4, "transformOrigin": 4.4, "transformOriginX": 4.4, "transformOriginY": 4.4, "backfaceVisibility": 4.4, "perspective": 4.4, "perspectiveOrigin": 4.4, "transformStyle": 4.4, "transformOriginZ": 4.4, "animation": 4.4, "animationDelay": 4.4, "animationDirection": 4.4, "animationFillMode": 4.4, "animationDuration": 4.4, "animationIterationCount": 4.4, "animationName": 4.4, "animationPlayState": 4.4, "animationTimingFunction": 4.4, "appearance": 51, "userSelect": 51, "fontKerning": 4.4, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "filter": 51, "fontFeatureSettings": 4.4, "breakAfter": 51, "breakBefore": 51, "breakInside": 51, "columnCount": 51, "columnFill": 51, "columnGap": 51, "columnRule": 51, "columnRuleColor": 51, "columnRuleStyle": 51, "columnRuleWidth": 51, "columns": 51, "columnSpan": 51, "columnWidth": 51 }, "and_chr": { "appearance": 51, "userSelect": 51, "textEmphasisPosition": 51, "textEmphasis": 51, "textEmphasisStyle": 51, "textEmphasisColor": 51, "boxDecorationBreak": 51, "clipPath": 51, "maskImage": 51, "maskMode": 51, "maskRepeat": 51, "maskPosition": 51, "maskClip": 51, "maskOrigin": 51, "maskSize": 51, "maskComposite": 51, "mask": 51, "maskBorderSource": 51, "maskBorderMode": 51, "maskBorderSlice": 51, "maskBorderWidth": 51, "maskBorderOutset": 51, "maskBorderRepeat": 51, "maskBorder": 51, "maskType": 51, "textDecorationStyle": 51, "textDecorationSkip": 51, "textDecorationLine": 51, "textDecorationColor": 51, "filter": 51 }, "and_uc": { "flex": 9.9, "flexBasis": 9.9, "flexDirection": 9.9, "flexGrow": 9.9, "flexFlow": 9.9, "flexShrink": 9.9, "flexWrap": 9.9, "alignContent": 9.9, "alignItems": 9.9, "alignSelf": 9.9, "justifyContent": 9.9, "order": 9.9, "transition": 9.9, "transitionDelay": 9.9, "transitionDuration": 9.9, "transitionProperty": 9.9, "transitionTimingFunction": 9.9, "transform": 9.9, "transformOrigin": 9.9, "transformOriginX": 9.9, "transformOriginY": 9.9, "backfaceVisibility": 9.9, "perspective": 9.9, "perspectiveOrigin": 9.9, "transformStyle": 9.9, "transformOriginZ": 9.9, "animation": 9.9, "animationDelay": 9.9, "animationDirection": 9.9, "animationFillMode": 9.9, "animationDuration": 9.9, "animationIterationCount": 9.9, "animationName": 9.9, "animationPlayState": 9.9, "animationTimingFunction": 9.9, "appearance": 9.9, "userSelect": 9.9, "fontKerning": 9.9, "textEmphasisPosition": 9.9, "textEmphasis": 9.9, "textEmphasisStyle": 9.9, "textEmphasisColor": 9.9, "maskImage": 9.9, "maskMode": 9.9, "maskRepeat": 9.9, "maskPosition": 9.9, "maskClip": 9.9, "maskOrigin": 9.9, "maskSize": 9.9, "maskComposite": 9.9, "mask": 9.9, "maskBorderSource": 9.9, "maskBorderMode": 9.9, "maskBorderSlice": 9.9, "maskBorderWidth": 9.9, "maskBorderOutset": 9.9, "maskBorderRepeat": 9.9, "maskBorder": 9.9, "maskType": 9.9, "textSizeAdjust": 9.9, "filter": 9.9, "hyphens": 9.9, "flowInto": 9.9, "flowFrom": 9.9, "breakBefore": 9.9, "breakAfter": 9.9, "breakInside": 9.9, "regionFragment": 9.9, "fontFeatureSettings": 9.9, "columnCount": 9.9, "columnFill": 9.9, "columnGap": 9.9, "columnRule": 9.9, "columnRuleColor": 9.9, "columnRuleStyle": 9.9, "columnRuleWidth": 9.9, "columns": 9.9, "columnSpan": 9.9, "columnWidth": 9.9 }, "op_mini": {} };
	module.exports = exports["default"];

/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = position;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function position(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var browser = _ref.browserInfo.browser;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if (property === 'position' && value === 'sticky' && (browser === 'safari' || browser === 'ios_saf')) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 379 */
/***/ (function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (prefixedValue, value, keepUnprefixed) {
	  return keepUnprefixed ? [prefixedValue, value] : prefixedValue;
	};
	
	module.exports = exports["default"];

/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = calc;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function calc(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if (typeof value === 'string' && value.indexOf('calc(') > -1 && (browser === 'firefox' && version < 15 || browser === 'chrome' && version < 25 || browser === 'safari' && version < 6.1 || browser === 'ios_saf' && version < 7)) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(value.replace(/calc\(/g, css + 'calc('), value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = zoomCursor;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = { 'zoom-in': true, 'zoom-out': true };
	
	function zoomCursor(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if (property === 'cursor' && values[value] && (browser === 'firefox' && version < 24 || browser === 'chrome' && version < 37 || browser === 'safari' && version < 9 || browser === 'opera' && version < 24)) {
	    return {
	      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = grabCursor;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = { grab: true, grabbing: true };
	
	function grabCursor(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var browser = _ref.browserInfo.browser;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  // adds prefixes for firefox, chrome, safari, and opera regardless of version until a reliable brwoser support info can be found (see: https://github.com/rofrischmann/inline-style-prefixer/issues/79)
	  if (property === 'cursor' && values[value] && (browser === 'firefox' || browser === 'chrome' || browser === 'safari' || browser === 'opera')) {
	    return {
	      cursor: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flex;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var values = { flex: true, 'inline-flex': true };
	
	function flex(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if (property === 'display' && values[value] && (browser === 'chrome' && version < 29 && version > 20 || (browser === 'safari' || browser === 'ios_saf') && version < 9 && version > 6 || browser === 'opera' && (version == 15 || version == 16))) {
	    return {
	      display: (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed)
	    };
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = sizing;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var properties = {
	  maxHeight: true,
	  maxWidth: true,
	  width: true,
	  height: true,
	  columnWidth: true,
	  minWidth: true,
	  minHeight: true
	};
	var values = {
	  'min-content': true,
	  'max-content': true,
	  'fill-available': true,
	  'fit-content': true,
	  'contain-floats': true
	};
	
	function sizing(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  // This might change in the future
	  // Keep an eye on it
	  if (properties[property] && values[value]) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = gradient;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;
	
	function gradient(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if (typeof value === 'string' && value.match(values) !== null && (browser === 'firefox' && version < 16 || browser === 'chrome' && version < 26 || (browser === 'safari' || browser === 'ios_saf') && version < 7 || (browser === 'opera' || browser === 'op_mini') && version < 12.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    return _defineProperty({}, property, (0, _getPrefixedValue2.default)(css + value, value, keepUnprefixed));
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.default = transition;
	
	var _hyphenateStyleName = __webpack_require__(370);
	
	var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
	
	var _unprefixProperty = __webpack_require__(387);
	
	var _unprefixProperty2 = _interopRequireDefault(_unprefixProperty);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var properties = { transition: true, transitionProperty: true };
	
	function transition(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var css = _ref.prefix.css;
	  var requiresPrefix = _ref.requiresPrefix;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  // also check for already prefixed transitions
	  var unprefixedProperty = (0, _unprefixProperty2.default)(property);
	
	  if (typeof value === 'string' && properties[unprefixedProperty]) {
	    var _ret = function () {
	      // TODO: memoize this array
	      var requiresPrefixDashCased = Object.keys(requiresPrefix).map(function (prop) {
	        return (0, _hyphenateStyleName2.default)(prop);
	      });
	
	      // only split multi values, not cubic beziers
	      var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);
	
	      requiresPrefixDashCased.forEach(function (prop) {
	        multipleValues.forEach(function (val, index) {
	          if (val.indexOf(prop) > -1 && prop !== 'order') {
	            multipleValues[index] = val.replace(prop, css + prop) + (keepUnprefixed ? ',' + val : '');
	          }
	        });
	      });
	
	      return {
	        v: _defineProperty({}, property, multipleValues.join(','))
	      };
	    }();
	
	    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 387 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function (property) {
	  var unprefixed = property.replace(/^(ms|Webkit|Moz|O)/, '');
	  return unprefixed.charAt(0).toLowerCase() + unprefixed.slice(1);
	};
	
	module.exports = exports['default'];

/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxIE;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'distribute',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  flex: 'flexbox',
	  'inline-flex': 'inline-flexbox'
	};
	var alternativeProps = {
	  alignContent: 'msFlexLinePack',
	  alignSelf: 'msFlexItemAlign',
	  alignItems: 'msFlexAlign',
	  justifyContent: 'msFlexPack',
	  order: 'msFlexOrder',
	  flexGrow: 'msFlexPositive',
	  flexShrink: 'msFlexNegative',
	  flexBasis: 'msPreferredSize'
	};
	
	function flexboxIE(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var styles = _ref.styles;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if ((alternativeProps[property] || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'ie_mob' || browser === 'ie') && version == 10) {
	    if (!keepUnprefixed && !Array.isArray(styles[property])) {
	      delete styles[property];
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = flexboxOld;
	
	var _getPrefixedValue = __webpack_require__(379);
	
	var _getPrefixedValue2 = _interopRequireDefault(_getPrefixedValue);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	var alternativeValues = {
	  'space-around': 'justify',
	  'space-between': 'justify',
	  'flex-start': 'start',
	  'flex-end': 'end',
	  'wrap-reverse': 'multiple',
	  wrap: 'multiple',
	  flex: 'box',
	  'inline-flex': 'inline-box'
	};
	
	var alternativeProps = {
	  alignItems: 'WebkitBoxAlign',
	  justifyContent: 'WebkitBoxPack',
	  flexWrap: 'WebkitBoxLines'
	};
	
	var otherProps = ['alignContent', 'alignSelf', 'order', 'flexGrow', 'flexShrink', 'flexBasis', 'flexDirection'];
	var properties = Object.keys(alternativeProps).concat(otherProps);
	
	function flexboxOld(_ref) {
	  var property = _ref.property;
	  var value = _ref.value;
	  var styles = _ref.styles;
	  var _ref$browserInfo = _ref.browserInfo;
	  var browser = _ref$browserInfo.browser;
	  var version = _ref$browserInfo.version;
	  var css = _ref.prefix.css;
	  var keepUnprefixed = _ref.keepUnprefixed;
	
	  if ((properties.indexOf(property) > -1 || property === 'display' && typeof value === 'string' && value.indexOf('flex') > -1) && (browser === 'firefox' && version < 22 || browser === 'chrome' && version < 21 || (browser === 'safari' || browser === 'ios_saf') && version <= 6.1 || browser === 'android' && version < 4.4 || browser === 'and_uc')) {
	    if (!keepUnprefixed && !Array.isArray(styles[property])) {
	      delete styles[property];
	    }
	    if (property === 'flexDirection' && typeof value === 'string') {
	      return {
	        WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
	        WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
	      };
	    }
	    if (property === 'display' && alternativeValues[value]) {
	      return {
	        display: (0, _getPrefixedValue2.default)(css + alternativeValues[value], value, keepUnprefixed)
	      };
	    }
	    if (alternativeProps[property]) {
	      return _defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
	    }
	  }
	}
	module.exports = exports['default'];

/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = callOnce;
	
	var _warning = __webpack_require__(289);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CALLED_ONCE = 'muiPrepared';
	
	function callOnce() {
	  if (process.env.NODE_ENV !== 'production') {
	    return function (style) {
	      if (style[CALLED_ONCE]) {
	        process.env.NODE_ENV !== "production" ? (0, _warning2.default)(false, 'Material-UI: You cannot call prepareStyles() on the same style object more than once.') : void 0;
	      }
	      style[CALLED_ONCE] = true;
	      return style;
	    };
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _keys = __webpack_require__(392);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	exports.default = rtl;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var reTranslate = /((^|\s)translate(3d|X)?\()(\-?[\d]+)/;
	var reSkew = /((^|\s)skew(x|y)?\()\s*(\-?[\d]+)(deg|rad|grad)(,\s*(\-?[\d]+)(deg|rad|grad))?/;
	
	/**
	 * This function ensures that `style` supports both ltr and rtl directions by
	 * checking `styleConstants` in `muiTheme` and replacing attribute keys if
	 * necessary.
	 */
	function rtl(muiTheme) {
	  if (muiTheme.isRtl) {
	    return function (style) {
	      if (style.directionInvariant === true) {
	        return style;
	      }
	
	      var flippedAttributes = {
	        // Keys and their replacements.
	        right: 'left',
	        left: 'right',
	        marginRight: 'marginLeft',
	        marginLeft: 'marginRight',
	        paddingRight: 'paddingLeft',
	        paddingLeft: 'paddingRight',
	        borderRight: 'borderLeft',
	        borderLeft: 'borderRight'
	      };
	
	      var newStyle = {};
	
	      (0, _keys2.default)(style).forEach(function (attribute) {
	        var value = style[attribute];
	        var key = attribute;
	
	        if (flippedAttributes.hasOwnProperty(attribute)) {
	          key = flippedAttributes[attribute];
	        }
	
	        switch (attribute) {
	          case 'float':
	          case 'textAlign':
	            if (value === 'right') {
	              value = 'left';
	            } else if (value === 'left') {
	              value = 'right';
	            }
	            break;
	
	          case 'direction':
	            if (value === 'ltr') {
	              value = 'rtl';
	            } else if (value === 'rtl') {
	              value = 'ltr';
	            }
	            break;
	
	          case 'transform':
	            if (!value) break;
	            var matches = void 0;
	            if (matches = value.match(reTranslate)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]));
	            }
	            if (matches = value.match(reSkew)) {
	              value = value.replace(matches[0], matches[1] + -parseFloat(matches[4]) + matches[5] + matches[6] ? ', ' + (-parseFloat(matches[7]) + matches[8]) : '');
	            }
	            break;
	
	          case 'transformOrigin':
	            if (!value) break;
	            if (value.indexOf('right') > -1) {
	              value = value.replace('right', 'left');
	            } else if (value.indexOf('left') > -1) {
	              value = value.replace('left', 'right');
	            }
	            break;
	        }
	
	        newStyle[key] = value;
	      });
	
	      return newStyle;
	    };
	  }
	}

/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(393), __esModule: true };

/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(394);
	module.exports = __webpack_require__(201).Object.keys;


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(233);
	var $keys = __webpack_require__(216);
	
	__webpack_require__(239)('keys', function () {
	  return function keys(it) {
	    return $keys(toObject(it));
	  };
	});


/***/ }),
/* 395 */
/***/ (function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.default = compose;
	function compose() {
	  for (var _len = arguments.length, funcs = Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }
	
	  if (funcs.length === 0) {
	    return function (arg) {
	      return arg;
	    };
	  }
	
	  if (funcs.length === 1) {
	    return funcs[0];
	  }
	
	  return funcs.reduce(function (a, b) {
	    return function () {
	      return a(b.apply(undefined, arguments));
	    };
	  });
	}

/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _classCallCheck2 = __webpack_require__(240);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _colors = __webpack_require__(351);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Typography = function Typography() {
	  (0, _classCallCheck3.default)(this, Typography);
	
	  // text colors
	  this.textFullBlack = _colors.fullBlack;
	  this.textDarkBlack = _colors.darkBlack;
	  this.textLightBlack = _colors.lightBlack;
	  this.textMinBlack = _colors.minBlack;
	  this.textFullWhite = _colors.fullWhite;
	  this.textDarkWhite = _colors.darkWhite;
	  this.textLightWhite = _colors.lightWhite;
	
	  // font weight
	  this.fontWeightLight = 300;
	  this.fontWeightNormal = 400;
	  this.fontWeightMedium = 500;
	
	  this.fontStyleButtonFontSize = 14;
	};
	
	exports.default = new Typography();

/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map